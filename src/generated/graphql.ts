import { GraphQLClient, RequestOptions } from 'graphql-request';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
type GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  BigInt: { input: number; output: number; }
  ISO8601Date: { input: string; output: string; }
  ISO8601DateTime: { input: string; output: string; }
  JSON: { input: any; output: any; }
};

/** Autogenerated input type of AcceptZenhubOrganizationInvite */
export type AcceptZenhubOrganizationInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A token issued for ZenhubOrganizationInvite */
  readonly token: Scalars['String']['input'];
};

/** Autogenerated return type of AcceptZenhubOrganizationInvite. */
export type AcceptZenhubOrganizationInvitePayload = {
  readonly __typename?: 'AcceptZenhubOrganizationInvitePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubOrganization: ZenhubOrganization;
};

export type ActivityFeed = Comment | TimelineItem;

/** The connection type for ActivityFeed. */
export type ActivityFeedConnection = {
  readonly __typename?: 'ActivityFeedConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ActivityFeedEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ActivityFeed>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ActivityFeedEdge = {
  readonly __typename?: 'ActivityFeedEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node?: Maybe<ActivityFeed>;
};

export type ActivityFeedField = {
  readonly activityFeed?: Maybe<ActivityFeedConnection>;
};


export type ActivityFeedFieldActivityFeedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skipTimelineItems?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated input type of AddAssigneesToIssues */
export type AddAssigneesToIssuesInput = {
  readonly assigneeIds: ReadonlyArray<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddAssigneesToIssues. */
export type AddAssigneesToIssuesPayload = {
  readonly __typename?: 'AddAssigneesToIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
  readonly unassignable: ReadonlyArray<Unassignable>;
};

/** Autogenerated input type of AddAssigneesToZenhubEpics */
export type AddAssigneesToZenhubEpicsInput = {
  /** Ids of ZenhubUsers */
  readonly assigneeIds: ReadonlyArray<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddAssigneesToZenhubEpics. */
export type AddAssigneesToZenhubEpicsPayload = {
  readonly __typename?: 'AddAssigneesToZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of AddEpicsToProject */
export type AddEpicsToProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epicIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly projectId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddEpicsToProject. */
export type AddEpicsToProjectPayload = {
  readonly __typename?: 'AddEpicsToProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epics: ReadonlyArray<Epic>;
  readonly previousProjects: ReadonlyArray<Maybe<Project>>;
  readonly project: Project;
};

/** Autogenerated input type of AddEpicsToRoadmap */
export type AddEpicsToRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epicIds: ReadonlyArray<Scalars['ID']['input']>;
  /** Roadmap id can be retrieved from the workspace object */
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddEpicsToRoadmap. */
export type AddEpicsToRoadmapPayload = {
  readonly __typename?: 'AddEpicsToRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epics: ReadonlyArray<Epic>;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of AddEstimateSetValue */
export type AddEstimateSetValueInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly repositoryId?: InputMaybe<Scalars['ID']['input']>;
  readonly value: Scalars['Float']['input'];
};

/** Autogenerated return type of AddEstimateSetValue. */
export type AddEstimateSetValuePayload = {
  readonly __typename?: 'AddEstimateSetValuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly estimateSet: EstimateSet;
};

/** Autogenerated input type of AddIssuesToEpics */
export type AddIssuesToEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epicIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddIssuesToEpics. */
export type AddIssuesToEpicsPayload = {
  readonly __typename?: 'AddIssuesToEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epics: ReadonlyArray<Epic>;
};

/** Autogenerated input type of AddIssuesToReleases */
export type AddIssuesToReleasesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly releaseIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddIssuesToReleases. */
export type AddIssuesToReleasesPayload = {
  readonly __typename?: 'AddIssuesToReleasesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly releases: ReadonlyArray<Release>;
};

/** Autogenerated input type of AddIssuesToSprints */
export type AddIssuesToSprintsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly sprintIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddIssuesToSprints. */
export type AddIssuesToSprintsPayload = {
  readonly __typename?: 'AddIssuesToSprintsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly sprintIssues: ReadonlyArray<SprintIssue>;
};

/** Autogenerated input type of AddIssuesToZenhubEpics */
export type AddIssuesToZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddIssuesToZenhubEpics. */
export type AddIssuesToZenhubEpicsPayload = {
  readonly __typename?: 'AddIssuesToZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of AddLabelsToIssues */
export type AddLabelsToIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  /** One of two label arguments is required */
  readonly labelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  /** One of two label arguments is required */
  readonly labelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
};

/** Autogenerated return type of AddLabelsToIssues. */
export type AddLabelsToIssuesPayload = {
  readonly __typename?: 'AddLabelsToIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly labels: ReadonlyArray<Label>;
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of AddMilestoneForIssues */
export type AddMilestoneForIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly milestoneId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddMilestoneForIssues. */
export type AddMilestoneForIssuesPayload = {
  readonly __typename?: 'AddMilestoneForIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of AddProjectsToRoadmap */
export type AddProjectsToRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddProjectsToRoadmap. */
export type AddProjectsToRoadmapPayload = {
  readonly __typename?: 'AddProjectsToRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly projects: ReadonlyArray<Project>;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of AddRepositoriesToRelease */
export type AddRepositoriesToReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly releaseId: Scalars['ID']['input'];
  /** Github ids of repositories to add to the release */
  readonly repositoryGhIds: ReadonlyArray<Scalars['Int']['input']>;
};

/** Autogenerated return type of AddRepositoriesToRelease. */
export type AddRepositoriesToReleasePayload = {
  readonly __typename?: 'AddRepositoriesToReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly release: Release;
};

/** Autogenerated input type of AddRepositoryToWorkspace */
export type AddRepositoryToWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Github ids of repositories to add to the workspace */
  readonly repositoryGhId: Scalars['ID']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddRepositoryToWorkspace. */
export type AddRepositoryToWorkspacePayload = {
  readonly __typename?: 'AddRepositoryToWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspaceRepository: WorkspaceRepository;
};

/** Autogenerated input type of AddSubIssues */
export type AddSubIssuesInput = {
  readonly childIssueIds: ReadonlyArray<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly parentId: Scalars['ID']['input'];
  readonly replaceParent?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of AddSubIssues. */
export type AddSubIssuesPayload = {
  readonly __typename?: 'AddSubIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of AddWorkspaceLabelFilters */
export type AddWorkspaceLabelFiltersInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Only show issues with these labels for the workspace */
  readonly labelNames: ReadonlyArray<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddWorkspaceLabelFilters. */
export type AddWorkspaceLabelFiltersPayload = {
  readonly __typename?: 'AddWorkspaceLabelFiltersPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
  /** created label filters */
  readonly workspaceLabelFilters: ReadonlyArray<WorkspaceLabelFilter>;
};

/** Autogenerated input type of AddZenhubAssigneesToIssues */
export type AddZenhubAssigneesToIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly zenhubUserIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddZenhubAssigneesToIssues. */
export type AddZenhubAssigneesToIssuesPayload = {
  readonly __typename?: 'AddZenhubAssigneesToIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issues: ReadonlyArray<Issue>;
};

/** Autogenerated input type of AddZenhubEpicsToProject */
export type AddZenhubEpicsToProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddZenhubEpicsToProject. */
export type AddZenhubEpicsToProjectPayload = {
  readonly __typename?: 'AddZenhubEpicsToProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly previousProjects: ReadonlyArray<Maybe<Project>>;
  readonly project: Project;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of AddZenhubEpicsToRoadmap */
export type AddZenhubEpicsToRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Roadmap id can be retrieved from the workspace object */
  readonly roadmapId: Scalars['ID']['input'];
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddZenhubEpicsToRoadmap. */
export type AddZenhubEpicsToRoadmapPayload = {
  readonly __typename?: 'AddZenhubEpicsToRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly roadmap: Roadmap;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of AddZenhubLabelsToIssues */
export type AddZenhubLabelsToIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  /** One of two label arguments is required */
  readonly labelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
  /** One of two label arguments is required */
  readonly zenhubLabelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};

/** Autogenerated return type of AddZenhubLabelsToIssues. */
export type AddZenhubLabelsToIssuesPayload = {
  readonly __typename?: 'AddZenhubLabelsToIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issues: ReadonlyArray<Issue>;
};

/** Autogenerated input type of AddZenhubLabelsToZenhubEpics */
export type AddZenhubLabelsToZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** One of two label arguments is required */
  readonly labelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
  /** One of two label arguments is required */
  readonly zenhubLabelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};

/** Autogenerated return type of AddZenhubLabelsToZenhubEpics. */
export type AddZenhubLabelsToZenhubEpicsPayload = {
  readonly __typename?: 'AddZenhubLabelsToZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of AddZenhubRepositoryToWorkspace */
export type AddZenhubRepositoryToWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly repositoryId: Scalars['ID']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddZenhubRepositoryToWorkspace. */
export type AddZenhubRepositoryToWorkspacePayload = {
  readonly __typename?: 'AddZenhubRepositoryToWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspaceSharedZenhubRepository: WorkspaceSharedZenhubRepository;
};

/** Autogenerated input type of AddZenhubUsersToWorkspace */
export type AddZenhubUsersToWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
  readonly workspaceUserRoles?: InputMaybe<ReadonlyArray<WorkspaceRoleInput>>;
  readonly zenhubUserIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of AddZenhubUsersToWorkspace. */
export type AddZenhubUsersToWorkspacePayload = {
  readonly __typename?: 'AddZenhubUsersToWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
  readonly zenhubUsers: ReadonlyArray<ZenhubUser>;
};

export type AiAcceptanceCriteriaMetadataInput = {
  readonly requestIds: ReadonlyArray<Scalars['String']['input']>;
};

export type AiLabelSuggestionsMetadataInput = {
  readonly requestIds: ReadonlyArray<Scalars['String']['input']>;
};

export type AiMetadataInput = {
  readonly acceptanceCriteria?: InputMaybe<AiAcceptanceCriteriaMetadataInput>;
  readonly labelSuggestions?: InputMaybe<AiLabelSuggestionsMetadataInput>;
};

export type AnomalousIssue = {
  readonly __typename?: 'AnomalousIssue';
  readonly duration: Scalars['Int']['output'];
  readonly issue: Issue;
};

export type BaseIssueType = {
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly disposition: IssueTypeDisposition;
  readonly id: Scalars['ID']['output'];
  readonly isDefault: Scalars['Boolean']['output'];
  readonly isDefaultForLevel: Scalars['Boolean']['output'];
  readonly isEnabled: Scalars['Boolean']['output'];
  /** @deprecated Removed from Github API */
  readonly isPrivate: Scalars['Boolean']['output'];
  readonly level?: Maybe<Scalars['Int']['output']>;
  readonly name: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Blockage = Node & Timestamps & {
  readonly __typename?: 'Blockage';
  readonly blocked: IssueDependencyItem;
  readonly blocking: IssueDependencyItem;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Bot = Owner & Timestamps & {
  readonly __typename?: 'Bot';
  readonly avatarUrl: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly hasWorkspace: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly login: Scalars['String']['output'];
  readonly projects: ProjectConnection;
  /** Repositories favorited by this github user */
  readonly repositoryFavorites: RepositoryFavoriteConnection;
  readonly roadmapItems: RoadmapItemConnection;
  readonly searchWorkspaces: WorkspaceSearchMatchConnection;
  readonly type: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
};


export type BotProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type BotRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type BotRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


export type BotSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


export type BotWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type BucketIssueHistoryAction =
  | 'ISSUE_ADDED'
  | 'ISSUE_REMOVED';

/** Autogenerated input type of CloseIssues */
export type CloseIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of CloseIssues. */
export type CloseIssuesPayload = {
  readonly __typename?: 'CloseIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

export type Comment = Node & Timestamps & {
  readonly __typename?: 'Comment';
  readonly author: ZenhubUser;
  readonly body: Scalars['String']['output'];
  readonly commentable: Commentable;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly editor?: Maybe<ZenhubUser>;
  readonly htmlBody: Scalars['String']['output'];
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
  readonly lastEditedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for Comment. */
export type CommentConnection = {
  readonly __typename?: 'CommentConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<CommentEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Comment>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type CommentEdge = {
  readonly __typename?: 'CommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Comment;
};

export type Commentable = Issue | ZenhubEpic;

/** Autogenerated input type of ConvertZenhubIssueToGithubIssue */
export type ConvertZenhubIssueToGithubIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Id of a zenhub issue */
  readonly issueId: Scalars['ID']['input'];
  /** Github repository to move the issue to */
  readonly repositoryId: Scalars['ID']['input'];
};

/** Autogenerated return type of ConvertZenhubIssueToGithubIssue. */
export type ConvertZenhubIssueToGithubIssuePayload = {
  readonly __typename?: 'ConvertZenhubIssueToGithubIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
};

/** Autogenerated input type of CreateComment */
export type CreateCommentInput = {
  readonly body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly commentableId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateComment. */
export type CreateCommentPayload = {
  readonly __typename?: 'CreateCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateEpicFromIssue */
export type CreateEpicFromIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Ids of a issues to add to the epic */
  readonly epicChildIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly issueId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEpicFromIssue. */
export type CreateEpicFromIssuePayload = {
  readonly __typename?: 'CreateEpicFromIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
};

/** Autogenerated input type of CreateEpic */
export type CreateEpicInput = {
  readonly aiMetadata?: InputMaybe<AiMetadataInput>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issue: IssueInput;
};

/** Autogenerated input type of CreateEpicOnProject */
export type CreateEpicOnProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epic: EpicInput;
  readonly projectId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEpicOnProject. */
export type CreateEpicOnProjectPayload = {
  readonly __typename?: 'CreateEpicOnProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
  readonly project: Project;
};

/** Autogenerated input type of CreateEpicOnRoadmap */
export type CreateEpicOnRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epic: EpicInput;
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEpicOnRoadmap. */
export type CreateEpicOnRoadmapPayload = {
  readonly __typename?: 'CreateEpicOnRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
  readonly roadmap: Roadmap;
};

/** Autogenerated return type of CreateEpic. */
export type CreateEpicPayload = {
  readonly __typename?: 'CreateEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
};

/** Autogenerated input type of CreateGithubLabel */
export type CreateGithubLabelInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color: Scalars['String']['input'];
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
  readonly repositoryId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateGithubLabel. */
export type CreateGithubLabelPayload = {
  readonly __typename?: 'CreateGithubLabelPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly label: Label;
};

/** Autogenerated input type of CreateIssueDependency */
export type CreateIssueDependencyInput = {
  readonly blockedIssue: IssueInfoInput;
  readonly blockingIssue: IssueInfoInput;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateIssueDependency. */
export type CreateIssueDependencyPayload = {
  readonly __typename?: 'CreateIssueDependencyPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issueDependency: IssueDependency;
};

/** Autogenerated input type of CreateIssue */
export type CreateIssueInput = {
  readonly aiMetadata?: InputMaybe<AiMetadataInput>;
  readonly assignees?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly body?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueTypeId?: InputMaybe<Scalars['ID']['input']>;
  readonly labels?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly milestone?: InputMaybe<Scalars['Int']['input']>;
  readonly parentIssueId?: InputMaybe<Scalars['ID']['input']>;
  readonly repositoryId: Scalars['ID']['input'];
  readonly title: Scalars['String']['input'];
  /** Assignee IDs for Zenhub issue */
  readonly zenhubAssigneeIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  /** Label infos for Zenhub issue */
  readonly zenhubLabelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
  readonly zorgMetadata?: InputMaybe<ZorgIssueMetadataInput>;
};

/** Autogenerated input type of CreateIssueKeyDate */
export type CreateIssueKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly issueId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateIssueKeyDate. */
export type CreateIssueKeyDatePayload = {
  readonly __typename?: 'CreateIssueKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
  readonly keyDate: KeyDate;
};

/** Autogenerated return type of CreateIssue. */
export type CreateIssuePayload = {
  readonly __typename?: 'CreateIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
};

/** Autogenerated input type of CreateIssuePrConnection */
export type CreateIssuePrConnectionInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly pullRequestId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateIssuePrConnection. */
export type CreateIssuePrConnectionPayload = {
  readonly __typename?: 'CreateIssuePrConnectionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
  readonly pullRequest: Issue;
};

/** Autogenerated input type of CreateMilestone */
export type CreateMilestoneInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly dueOn?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly repositoryId: Scalars['ID']['input'];
  readonly startDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly title: Scalars['String']['input'];
};

/** Autogenerated return type of CreateMilestone. */
export type CreateMilestonePayload = {
  readonly __typename?: 'CreateMilestonePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly milestone: Milestone;
};

/** Autogenerated input type of CreatePipelineAutomation */
export type CreatePipelineAutomationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Possible values: for labels: { labels: [{ name:, color:}, { name:, color:}] }. For assignees: { assignees: [user1_eid, user2_eid] }. To remove all assignees pass empty array { assignees: [] }. For sprints: { sprints: [sprint1_eid, sprint2_eid] }. For epics: { epics: [epic1_eid, epic2_eid] }. For zenhub epics: { zenhubEpics: [epic1_eid, epic2_eid] }. For relative sprints: { relativeSprints: [0, 1, 2] }, where numbers are index of sprints from the current sprint. To remove all sprints pass empty array { relativeSprints: [] }. for pipelines: { pipelines: [pipeline1_eid, pipeline2_eid] } */
  readonly elementDetails: Scalars['JSON']['input'];
  readonly pipelineId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePipelineAutomation. */
export type CreatePipelineAutomationPayload = {
  readonly __typename?: 'CreatePipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineAutomation: PipelineAutomation;
};

/** Autogenerated input type of CreatePipeline */
export type CreatePipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
  /** Integer value that represents the position of the pipeline inthe workspace. Starts with 0 that represents the leftmost position. */
  readonly position?: InputMaybe<Scalars['Int']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePipeline. */
export type CreatePipelinePayload = {
  readonly __typename?: 'CreatePipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipeline: Pipeline;
};

/** Autogenerated input type of CreatePipelineToPipelineAutomation */
export type CreatePipelineToPipelineAutomationInput = {
  readonly applyRetroactively?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly destinationPipelineId: Scalars['ID']['input'];
  readonly sourcePipelineId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePipelineToPipelineAutomation. */
export type CreatePipelineToPipelineAutomationPayload = {
  readonly __typename?: 'CreatePipelineToPipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly movedIssuesCount?: Maybe<Scalars['Int']['output']>;
  readonly pipelineToPipelineAutomation: PipelineToPipelineAutomation;
};

/** Autogenerated input type of CreateProjectOnRoadmap */
export type CreateProjectOnRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly project: ProjectInput;
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProjectOnRoadmap. */
export type CreateProjectOnRoadmapPayload = {
  readonly __typename?: 'CreateProjectOnRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of CreateRelease */
export type CreateReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly release: ReleaseCreateInput;
};

/** Autogenerated return type of CreateRelease. */
export type CreateReleasePayload = {
  readonly __typename?: 'CreateReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly release: Release;
};

/** Autogenerated input type of CreateRoadmapKeyDate */
export type CreateRoadmapKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateRoadmapKeyDate. */
export type CreateRoadmapKeyDatePayload = {
  readonly __typename?: 'CreateRoadmapKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of CreateSavedView */
export type CreateSavedViewInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly filters: IssueSearchFiltersInput;
  readonly name: Scalars['String']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateSavedView. */
export type CreateSavedViewPayload = {
  readonly __typename?: 'CreateSavedViewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly savedView: SavedView;
};

/** Autogenerated input type of CreateSprintConfig */
export type CreateSprintConfigInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly sprintConfig: SprintConfigCreateInput;
};

/** Autogenerated return type of CreateSprintConfig. */
export type CreateSprintConfigPayload = {
  readonly __typename?: 'CreateSprintConfigPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly sprintConfig: SprintConfig;
};

/** Autogenerated input type of CreateTimelineKeyDate */
export type CreateTimelineKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTimelineKeyDate. */
export type CreateTimelineKeyDatePayload = {
  readonly __typename?: 'CreateTimelineKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly workspace: Workspace;
};

/** Autogenerated input type of CreateWorkspace */
export type CreateWorkspaceInput = {
  readonly areUploadedFilesPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly defaultRepositoryGhId?: InputMaybe<Scalars['Int']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly githubProject?: InputMaybe<GithubProjectInput>;
  readonly name: Scalars['String']['input'];
  readonly private?: InputMaybe<Scalars['Boolean']['input']>;
  readonly repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  readonly workspaceConfig?: InputMaybe<WorkspaceConfigInput>;
  readonly zenhubOrganizationId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of CreateWorkspace. */
export type CreateWorkspacePayload = {
  readonly __typename?: 'CreateWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of CreateZenhubEpic */
export type CreateZenhubEpicInput = {
  readonly aiMetadata?: InputMaybe<AiMetadataInput>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubEpic: ZenhubEpicInput;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
  readonly zenhubRepositoryId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated input type of CreateZenhubEpicKeyDate */
export type CreateZenhubEpicKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateZenhubEpicKeyDate. */
export type CreateZenhubEpicKeyDatePayload = {
  readonly __typename?: 'CreateZenhubEpicKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of CreateZenhubEpicOnProject */
export type CreateZenhubEpicOnProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
  readonly zenhubEpic: ZenhubEpicInput;
  readonly zenhubRepositoryId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of CreateZenhubEpicOnProject. */
export type CreateZenhubEpicOnProjectPayload = {
  readonly __typename?: 'CreateZenhubEpicOnProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of CreateZenhubEpicOnRoadmap */
export type CreateZenhubEpicOnRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly roadmapId: Scalars['ID']['input'];
  readonly zenhubEpic: ZenhubEpicInput;
};

/** Autogenerated return type of CreateZenhubEpicOnRoadmap. */
export type CreateZenhubEpicOnRoadmapPayload = {
  readonly __typename?: 'CreateZenhubEpicOnRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly roadmap: Roadmap;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated return type of CreateZenhubEpic. */
export type CreateZenhubEpicPayload = {
  readonly __typename?: 'CreateZenhubEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of CreateZenhubLabel */
export type CreateZenhubLabelInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color: Scalars['String']['input'];
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
  readonly zenhubOrganizationId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateZenhubLabel. */
export type CreateZenhubLabelPayload = {
  readonly __typename?: 'CreateZenhubLabelPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubLabel: ZenhubLabel;
};

/** Autogenerated input type of CreateZenhubOrganization */
export type CreateZenhubOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
};

/** Autogenerated input type of CreateZenhubOrganizationInvite */
export type CreateZenhubOrganizationInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly emailProperties?: InputMaybe<EmailPropertiesInput>;
  readonly expireInDays: Scalars['Int']['input'];
  readonly workspaceId?: InputMaybe<Scalars['ID']['input']>;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateZenhubOrganizationInvite. */
export type CreateZenhubOrganizationInvitePayload = {
  readonly __typename?: 'CreateZenhubOrganizationInvitePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly token: Scalars['String']['output'];
};

/** Autogenerated return type of CreateZenhubOrganization. */
export type CreateZenhubOrganizationPayload = {
  readonly __typename?: 'CreateZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubOrganization: ZenhubOrganization;
};

/** Autogenerated input type of DeleteComment */
export type DeleteCommentInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly commentId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteComment. */
export type DeleteCommentPayload = {
  readonly __typename?: 'DeleteCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteEpicByIssueInfo */
export type DeleteEpicByIssueInfoInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issue: IssueInfoInput;
};

/** Autogenerated return type of DeleteEpicByIssueInfo. */
export type DeleteEpicByIssueInfoPayload = {
  readonly __typename?: 'DeleteEpicByIssueInfoPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
};

/** Autogenerated input type of DeleteIssueDependency */
export type DeleteIssueDependencyInput = {
  readonly blockedIssue: IssueInfoInput;
  readonly blockingIssue: IssueInfoInput;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DeleteIssueDependency. */
export type DeleteIssueDependencyPayload = {
  readonly __typename?: 'DeleteIssueDependencyPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issueDependency: IssueDependency;
};

/** Autogenerated input type of DeleteIssueKeyDate */
export type DeleteIssueKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteIssueKeyDate. */
export type DeleteIssueKeyDatePayload = {
  readonly __typename?: 'DeleteIssueKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
  readonly keyDate: KeyDate;
};

/** Autogenerated input type of DeleteIssuePrConnection */
export type DeleteIssuePrConnectionInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly pullRequestId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteIssuePrConnection. */
export type DeleteIssuePrConnectionPayload = {
  readonly __typename?: 'DeleteIssuePrConnectionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
  readonly pullRequest: Issue;
};

/** Autogenerated input type of DeleteMilestone */
export type DeleteMilestoneInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly ignoreInaccessible?: InputMaybe<Scalars['Boolean']['input']>;
  readonly milestoneId: Scalars['ID']['input'];
  readonly updateAllInWorkspaceId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of DeleteMilestone. */
export type DeleteMilestonePayload = {
  readonly __typename?: 'DeleteMilestonePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly milestone: Milestone;
};

/** Autogenerated input type of DeleteNotionIntegrationToken */
export type DeleteNotionIntegrationTokenInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DeleteNotionIntegrationToken. */
export type DeleteNotionIntegrationTokenPayload = {
  readonly __typename?: 'DeleteNotionIntegrationTokenPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly notionUid: Scalars['ID']['output'];
  readonly zenhubUser: ZenhubUser;
};

/** Autogenerated input type of DeletePipelineAutomation */
export type DeletePipelineAutomationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineAutomationId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePipelineAutomation. */
export type DeletePipelineAutomationPayload = {
  readonly __typename?: 'DeletePipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineAutomation: PipelineAutomation;
};

/** Autogenerated input type of DeletePipeline */
export type DeletePipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly destinationPipelineId: Scalars['ID']['input'];
  readonly pipelineId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePipeline. */
export type DeletePipelinePayload = {
  readonly __typename?: 'DeletePipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly destinationPipeline: Pipeline;
};

/** Autogenerated input type of DeletePipelineToPipelineAutomation */
export type DeletePipelineToPipelineAutomationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineToPipelineAutomationId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePipelineToPipelineAutomation. */
export type DeletePipelineToPipelineAutomationPayload = {
  readonly __typename?: 'DeletePipelineToPipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineToPipelineAutomation: PipelineToPipelineAutomation;
};

/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteProject. */
export type DeleteProjectPayload = {
  readonly __typename?: 'DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly projectId: Scalars['ID']['output'];
};

/** Autogenerated input type of DeleteRoadmapKeyDate */
export type DeleteRoadmapKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteRoadmapKeyDate. */
export type DeleteRoadmapKeyDatePayload = {
  readonly __typename?: 'DeleteRoadmapKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of DeleteSavedView */
export type DeleteSavedViewInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly savedViewId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteSavedView. */
export type DeleteSavedViewPayload = {
  readonly __typename?: 'DeleteSavedViewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly savedView: SavedView;
};

/** Autogenerated input type of DeleteSprintConfigAndOpenSprints */
export type DeleteSprintConfigAndOpenSprintsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteSprintConfigAndOpenSprints. */
export type DeleteSprintConfigAndOpenSprintsPayload = {
  readonly __typename?: 'DeleteSprintConfigAndOpenSprintsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of DeleteTimelineKeyDate */
export type DeleteTimelineKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteTimelineKeyDate. */
export type DeleteTimelineKeyDatePayload = {
  readonly __typename?: 'DeleteTimelineKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly workspace: Workspace;
};

/** Autogenerated input type of DeleteWorkspaceFavorite */
export type DeleteWorkspaceFavoriteInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteWorkspaceFavorite. */
export type DeleteWorkspaceFavoritePayload = {
  readonly __typename?: 'DeleteWorkspaceFavoritePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of DeleteWorkspace */
export type DeleteWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteWorkspace. */
export type DeleteWorkspacePayload = {
  readonly __typename?: 'DeleteWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspaceId: Scalars['ID']['output'];
};

/** Autogenerated input type of DeleteZenhubEpic */
export type DeleteZenhubEpicInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated input type of DeleteZenhubEpicKeyDate */
export type DeleteZenhubEpicKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteZenhubEpicKeyDate. */
export type DeleteZenhubEpicKeyDatePayload = {
  readonly __typename?: 'DeleteZenhubEpicKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated return type of DeleteZenhubEpic. */
export type DeleteZenhubEpicPayload = {
  readonly __typename?: 'DeleteZenhubEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpicId: Scalars['ID']['output'];
};

/** Autogenerated input type of DeleteZenhubIssue */
export type DeleteZenhubIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteZenhubIssue. */
export type DeleteZenhubIssuePayload = {
  readonly __typename?: 'DeleteZenhubIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issueId: Scalars['ID']['output'];
};

/** Autogenerated input type of DeleteZenhubLabels */
export type DeleteZenhubLabelsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly names: ReadonlyArray<Scalars['String']['input']>;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteZenhubLabels. */
export type DeleteZenhubLabelsPayload = {
  readonly __typename?: 'DeleteZenhubLabelsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubLabels: ReadonlyArray<ZenhubLabel>;
};

/** Autogenerated input type of DeleteZenhubOrganizationInviteRecipients */
export type DeleteZenhubOrganizationInviteRecipientsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubOrganizationInviteRecipientIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of DeleteZenhubOrganizationInviteRecipients. */
export type DeleteZenhubOrganizationInviteRecipientsPayload = {
  readonly __typename?: 'DeleteZenhubOrganizationInviteRecipientsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteZenhubOrganizationInvites */
export type DeleteZenhubOrganizationInvitesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubOrganizationInviteIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of DeleteZenhubOrganizationInvites. */
export type DeleteZenhubOrganizationInvitesPayload = {
  readonly __typename?: 'DeleteZenhubOrganizationInvitesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteZenhubUser */
export type DeleteZenhubUserInput = {
  readonly autoAssignAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DeleteZenhubUser. */
export type DeleteZenhubUserPayload = {
  readonly __typename?: 'DeleteZenhubUserPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubUserId: Scalars['ID']['output'];
};

/** Filter strategic issues by delivery ris */
export type DeliveryRiskFilterInput = {
  readonly progressKind?: InputMaybe<DeliveryRiskProgressKind>;
  readonly recursive?: InputMaybe<Scalars['Boolean']['input']>;
  readonly scopeToWorkspace?: InputMaybe<Scalars['Boolean']['input']>;
  readonly statuses?: InputMaybe<DeliveryRiskStatusInput>;
};

export type DeliveryRiskProgressKind =
  /** Calculate progress using issue counts */
  | 'counts'
  /** Calculate progress using issue estimate points */
  | 'points';

export type DeliveryRiskStatus =
  /** All sub-tasks are completed */
  | 'completed'
  /** The progress is lagging behind the target schedule */
  | 'delayed'
  /** The progress is significantly behind the target schedule */
  | 'late'
  /** No progress has been made yet */
  | 'not_started'
  /** The progress is comparable to the target schedule */
  | 'on_time'
  /** Start date or end date not set. No progress data available. */
  | 'unknown';

/** Filter by delivery risk status */
export type DeliveryRiskStatusInput = {
  readonly in?: InputMaybe<ReadonlyArray<DeliveryRiskStatus>>;
  readonly nin?: InputMaybe<ReadonlyArray<DeliveryRiskStatus>>;
};

/** Autogenerated input type of DisconnectGithubUser */
export type DisconnectGithubUserInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DisconnectGithubUser. */
export type DisconnectGithubUserPayload = {
  readonly __typename?: 'DisconnectGithubUserPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubUser: ZenhubUser;
};

/** Autogenerated input type of DisconnectWorkspaceRepository */
export type DisconnectWorkspaceRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly repositoryGhId: Scalars['Int']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of DisconnectWorkspaceRepository. */
export type DisconnectWorkspaceRepositoryPayload = {
  readonly __typename?: 'DisconnectWorkspaceRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of DismissConnectNotionPrompt */
export type DismissConnectNotionPromptInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DismissConnectNotionPrompt. */
export type DismissConnectNotionPromptPayload = {
  readonly __typename?: 'DismissConnectNotionPromptPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubUser: ZenhubUser;
};

export type DisplayFilter =
  /** Includes Issues and PRs */
  | 'all'
  /** Includes only Issues */
  | 'issues'
  /** Includes only PRs */
  | 'prs';

/** Autogenerated input type of DuplicatePipelineAutomation */
export type DuplicatePipelineAutomationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineAutomationId: Scalars['ID']['input'];
};

/** Autogenerated return type of DuplicatePipelineAutomation. */
export type DuplicatePipelineAutomationPayload = {
  readonly __typename?: 'DuplicatePipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineAutomation: PipelineAutomation;
};

/** Input properties needed to send email notifications */
export type EmailPropertiesInput = {
  readonly recipients: ReadonlyArray<Scalars['String']['input']>;
};

export type Epic = IssueProgress & Node & RoadmapItemDates & Timestamps & ViewerPermission & {
  readonly __typename?: 'Epic';
  readonly childIssues: IssueConnection;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly endOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly issue: Issue;
  readonly issueCountProgress?: Maybe<IssueCountProgress>;
  readonly issueEstimateProgress?: Maybe<IssueEstimateProgress>;
  readonly project?: Maybe<Project>;
  readonly startOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly viewerPermission: PermissionLevel;
};


export type EpicChildIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type EpicEndOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};


export type EpicStartOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};

/** Filter issue search results */
export type EpicAssignableIssueSearchFiltersInput = {
  readonly pipelineIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly repositoryIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** The connection type for Epic. */
export type EpicConnection = {
  readonly __typename?: 'EpicConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<EpicEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Epic>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EpicEdge = {
  readonly __typename?: 'EpicEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Epic;
};

export type EpicInput = {
  readonly issue: IssueInput;
};

export type EpicOrderField =
  | 'CREATED_AT'
  | 'TITLE';

/** Order of Epic connection */
export type EpicOrderInput = {
  readonly direction?: InputMaybe<OrderDirection>;
  readonly field?: InputMaybe<EpicOrderField>;
};

/** Filter issues by special epic filters */
export type EpicSearchFiltersInput = {
  readonly id?: InputMaybe<IdInput>;
  readonly specialFilters?: InputMaybe<EpicSpecialFilter>;
};

export type EpicSpecialFilter =
  /** Show all epics and hide subtasks */
  | 'epics_only'
  /** Show all epics and subtasks */
  | 'epics_with_subtasks'
  /** Hide epics */
  | 'no_epics'
  /** Show all issues not in an epic */
  | 'not_in_epic';

export type Estimate = Timestamps & {
  readonly __typename?: 'Estimate';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly value: Scalars['Float']['output'];
};

/** Filter issues by special estimate filters */
export type EstimateSearchFiltersInput = {
  readonly specialFilters?: InputMaybe<EstimateSpecialFilter>;
  readonly values?: InputMaybe<FloatInput>;
};

export type EstimateSet = {
  readonly __typename?: 'EstimateSet';
  readonly repository: Repository;
  readonly values: ReadonlyArray<Scalars['Float']['output']>;
};

export type EstimateSpecialFilter =
  /** Issues assigned for voting */
  | 'assigned_for_voting'
  /** Issues assigned to user for voting */
  | 'assigned_to_user_for_voting'
  /** Issues not estimated */
  | 'not_estimated';

export type EstimationGroup = {
  readonly __typename?: 'EstimationGroup';
  readonly id: Scalars['ID']['output'];
  readonly inviter: ZenhubUser;
  readonly participants: ZenhubUserConnection;
  readonly workspace: Workspace;
};


export type EstimationGroupParticipantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  issueIds: ReadonlyArray<Scalars['ID']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for EstimationGroup. */
export type EstimationGroupConnection = {
  readonly __typename?: 'EstimationGroupConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<EstimationGroupEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<EstimationGroup>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EstimationGroupEdge = {
  readonly __typename?: 'EstimationGroupEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: EstimationGroup;
};

export type EstimationVote = Timestamps & {
  readonly __typename?: 'EstimationVote';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly issue: Issue;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly value?: Maybe<Scalars['Float']['output']>;
  readonly voter: ZenhubUser;
};

/** The connection type for EstimationVote. */
export type EstimationVoteConnection = {
  readonly __typename?: 'EstimationVoteConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<EstimationVoteEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<EstimationVote>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EstimationVoteEdge = {
  readonly __typename?: 'EstimationVoteEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: EstimationVote;
};

/** Filter a String column */
export type FloatInput = {
  readonly in?: InputMaybe<ReadonlyArray<Scalars['Float']['input']>>;
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['Float']['input']>>;
  readonly notInAny?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated input type of GenerateSprintReview */
export type GenerateSprintReviewInput = {
  readonly callAsync?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly sprintId: Scalars['ID']['input'];
};

/** Autogenerated return type of GenerateSprintReview. */
export type GenerateSprintReviewPayload = {
  readonly __typename?: 'GenerateSprintReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly sprintReview?: Maybe<SprintReview>;
};

export type GithubIssueType = BaseIssueType & Timestamps & {
  readonly __typename?: 'GithubIssueType';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly disposition: IssueTypeDisposition;
  readonly id: Scalars['ID']['output'];
  readonly isDefault: Scalars['Boolean']['output'];
  readonly isDefaultForLevel: Scalars['Boolean']['output'];
  readonly isEnabled: Scalars['Boolean']['output'];
  /** @deprecated Removed from Github API */
  readonly isPrivate: Scalars['Boolean']['output'];
  readonly issuesCount: Scalars['Int']['output'];
  readonly level?: Maybe<Scalars['Int']['output']>;
  readonly name: Scalars['String']['output'];
  readonly owner: Organization;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for GithubIssueType. */
export type GithubIssueTypeConnection = {
  readonly __typename?: 'GithubIssueTypeConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<GithubIssueTypeEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<GithubIssueType>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type GithubIssueTypeEdge = {
  readonly __typename?: 'GithubIssueTypeEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: GithubIssueType;
};

/** A reference to a GitHub project via Github repository node id and repository id */
export type GithubProjectInput = {
  readonly githubProjectId: Scalars['String']['input'];
  readonly githubProjectRepoGhId: Scalars['Int']['input'];
};

export type GithubTimestamps = {
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Filter an ID column */
export type IdInput = {
  readonly in?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly notInAny?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated input type of InviteToEstimate */
export type InviteToEstimateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  /** Text that will be sent to the invited users through GH notifications */
  readonly message?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId?: InputMaybe<Scalars['ID']['input']>;
  readonly zenhubUserIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of InviteToEstimate. */
export type InviteToEstimatePayload = {
  readonly __typename?: 'InviteToEstimatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly estimationVotes: ReadonlyArray<EstimationVote>;
};

export type Issue = ActivityFeedField & GithubTimestamps & Node & Timestamps & ViewerPermission & {
  readonly __typename?: 'Issue';
  readonly activityFeed?: Maybe<ActivityFeedConnection>;
  readonly assignees: UserConnection;
  /** Issues that are blocked by this Issue. */
  readonly blockedIssues: IssueConnection;
  /** Dependent items that are blocked by this issue */
  readonly blockedItems: IssueDependencyItemConnection;
  /** Issues that are blocking this Issue. */
  readonly blockingIssues: IssueConnection;
  /** Dependent items that are blocking this issue */
  readonly blockingItems: IssueDependencyItemConnection;
  readonly body?: Maybe<Scalars['String']['output']>;
  readonly closedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly comments: CommentConnection;
  /** Return the Pull Requests connected to this issue */
  readonly connectedPrs: IssueConnection;
  /** 1st step connections of the PR. Only available for PRs */
  readonly connections: IssueConnection;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  /** Issue creator; Only available for Zenhub Issues */
  readonly creator?: Maybe<ZenhubUser>;
  readonly enteredStageAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  /** @deprecated This field must not be used. */
  readonly epic?: Maybe<Epic>;
  readonly estimate?: Maybe<Estimate>;
  /** Estimates given by participants */
  readonly estimationVotes: EstimationVoteConnection;
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
  /** Issues that are immediate Github-children of this Issue. */
  readonly githubChildIssues: IssueConnection;
  /** Parent issue of this Issue. */
  readonly githubParentIssue?: Maybe<Issue>;
  readonly htmlBody?: Maybe<Scalars['String']['output']>;
  readonly htmlUrl: Scalars['String']['output'];
  readonly id: Scalars['ID']['output'];
  readonly issueType?: Maybe<IssueIssueType>;
  readonly keyDates?: Maybe<KeyDateConnection>;
  readonly labels: LabelConnection;
  readonly metadata?: Maybe<Scalars['JSON']['output']>;
  readonly milestone?: Maybe<Milestone>;
  readonly number: Scalars['Int']['output'];
  /** @deprecated This field must not be used. Use parentZenhubEpics. */
  readonly parentEpics: EpicConnection;
  /** Parent issue of this Issue (Github or Zenhub) */
  readonly parentIssue?: Maybe<Issue>;
  readonly parentZenhubEpics: ZenhubEpicConnection;
  /** Issue connections to different pipelines */
  readonly pipelineIssue?: Maybe<PipelineIssue>;
  readonly pipelineIssues: PipelineIssueConnection;
  readonly pullRequest: Scalars['Boolean']['output'];
  readonly pullRequestObject?: Maybe<PullRequest>;
  readonly pullRequestReviews?: Maybe<PullRequestReviewConnection>;
  readonly releases: ReleaseConnection;
  readonly repository: Repository;
  readonly reviewRequests?: Maybe<ReviewRequestConnection>;
  readonly sprintIssues: SprintIssueConnection;
  /** Sprints that the issue belongs to */
  readonly sprints: SprintConnection;
  readonly state: IssueState;
  readonly timelineItems: TimelineItemConnection;
  readonly title: Scalars['String']['output'];
  /** Github or Zebhub issue */
  readonly type: IssueType;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  /** Issue creator; Only available for GitHub Issues */
  readonly user: Owner;
  readonly viewerPermission: PermissionLevel;
  readonly zenhubAssignees: ZenhubUserConnection;
  /** Issues that are immediate ZenHub-children of this Issue. */
  readonly zenhubChildIssues: IssueConnection;
  readonly zenhubLabels: ZenhubLabelConnection;
  readonly zenhubUrl: Scalars['String']['output'];
  readonly zorgMetadata?: Maybe<ZorgIssueMetadata>;
};


export type IssueActivityFeedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skipTimelineItems?: InputMaybe<Scalars['Boolean']['input']>;
};


export type IssueAssigneesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueBlockedIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueBlockedItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueBlockingIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueBlockingItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueConnectedPrsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueConnectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueEnteredStageAtArgs = {
  pipelineStage: PipelineStage;
};


export type IssueEstimationVotesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueGithubChildIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueKeyDatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
};


export type IssueLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueMetadataArgs = {
  payloadOptions?: InputMaybe<IssueMetadataPayloadOptionsInput>;
  workspaceId: Scalars['ID']['input'];
};


export type IssueParentEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueParentZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssuePipelineIssueArgs = {
  workspaceId: Scalars['ID']['input'];
};


export type IssuePipelineIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssuePullRequestReviewsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueReleasesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueReviewRequestsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueSprintIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<SprintIssueOrderInput>;
};


export type IssueSprintsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId?: InputMaybe<Scalars['ID']['input']>;
};


export type IssueTimelineItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueZenhubAssigneesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueZenhubChildIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueZenhubLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IssueZenhubUrlArgs = {
  workspaceId: Scalars['ID']['input'];
};


export type IssueZorgMetadataArgs = {
  workspaceId?: InputMaybe<Scalars['ID']['input']>;
  zenhubOrganizationId?: InputMaybe<Scalars['ID']['input']>;
};

/** Filter by issue bucket IDs */
export type IssueBucketIdsInput = {
  readonly ids?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};

/** The connection type for Issue. */
export type IssueConnection = {
  readonly __typename?: 'IssueConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Issue>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly pipelineCounts: PipelineCounts;
  /** @deprecated Use common field pipelineCounts instead */
  readonly splitCounts: Scalars['JSON']['output'];
  /** @deprecated Use common field pipelineCounts instead */
  readonly sumEstimates: Scalars['Float']['output'];
  readonly totalCount: Scalars['Int']['output'];
};

export type IssueCountProgress = {
  readonly __typename?: 'IssueCountProgress';
  readonly closed: Scalars['Int']['output'];
  readonly open: Scalars['Int']['output'];
  readonly total: Scalars['Int']['output'];
};

export type IssueDependency = Node & Timestamps & {
  readonly __typename?: 'IssueDependency';
  readonly blockedIssue: Issue;
  readonly blockingIssue: Issue;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for IssueDependency. */
export type IssueDependencyConnection = {
  readonly __typename?: 'IssueDependencyConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueDependencyEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueDependency>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type IssueDependencyEdge = {
  readonly __typename?: 'IssueDependencyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: IssueDependency;
};

export type IssueDependencyItem = Issue | ZenhubEpic;

/** The connection type for IssueDependencyItem. */
export type IssueDependencyItemConnection = {
  readonly __typename?: 'IssueDependencyItemConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueDependencyItemEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueDependencyItem>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type IssueDependencyItemEdge = {
  readonly __typename?: 'IssueDependencyItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node?: Maybe<IssueDependencyItem>;
};

/** Filter source/target fields in issue dependency */
export type IssueDependencyItemFiltersInput = {
  readonly state?: InputMaybe<IssueDependencyItemStateInput>;
};

export type IssueDependencyItemState =
  | 'CLOSED'
  | 'OPEN';

/** Filter by IssueDependencyItemState */
export type IssueDependencyItemStateInput = {
  readonly eq: IssueDependencyItemState;
};

/** An edge in a connection. */
export type IssueEdge = {
  readonly __typename?: 'IssueEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Issue;
};

export type IssueEstimateProgress = {
  readonly __typename?: 'IssueEstimateProgress';
  readonly closed: Scalars['Float']['output'];
  readonly open: Scalars['Float']['output'];
  readonly total: Scalars['Float']['output'];
};

/** Filter Issues */
export type IssueFiltersInput = {
  readonly repositoryId?: InputMaybe<IdInput>;
  readonly state?: InputMaybe<IssueStateInput>;
};

export type IssueFlowStats = {
  readonly __typename?: 'IssueFlowStats';
  readonly anomalies?: Maybe<ReadonlyArray<AnomalousIssue>>;
  readonly avgCycleDays?: Maybe<Scalars['Int']['output']>;
  readonly inDevelopmentDays?: Maybe<Scalars['Int']['output']>;
  readonly inReviewDays?: Maybe<Scalars['Int']['output']>;
};

/** A reference to an issue via github or zenhub repository and issue number */
export type IssueInfoInput = {
  readonly issueNumber: Scalars['Int']['input'];
  readonly repositoryGhId?: InputMaybe<Scalars['Int']['input']>;
  readonly repositoryId?: InputMaybe<Scalars['ID']['input']>;
};

export type IssueInput = {
  readonly assignees?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly body?: InputMaybe<Scalars['String']['input']>;
  readonly labels?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly milestone?: InputMaybe<Scalars['Int']['input']>;
  readonly repositoryGhId?: InputMaybe<Scalars['Int']['input']>;
  readonly repositoryId?: InputMaybe<Scalars['ID']['input']>;
  readonly title: Scalars['String']['input'];
};

export type IssueIssueType = GithubIssueType | ZenhubIssueType;

/** The connection type for IssueIssueType. */
export type IssueIssueTypeConnection = {
  readonly __typename?: 'IssueIssueTypeConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueIssueTypeEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueIssueType>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

export type IssueIssueTypeDispositionInput =
  /** Any */
  | 'ANY'
  /** Issue types for Board and untyped issues */
  | 'BOARD'
  /** Issue types for Board */
  | 'BOARD_ONLY'
  /** Issue types for Planning Panel and untyped issues */
  | 'PLANNING_PANEL'
  /** Issue types for Planning Panel */
  | 'PLANNING_PANEL_ONLY';

/** An edge in a connection. */
export type IssueIssueTypeEdge = {
  readonly __typename?: 'IssueIssueTypeEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node?: Maybe<IssueIssueType>;
};

/** Filter by issue type names */
export type IssueIssueTypeFiltersInput = {
  readonly in?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
};

export type IssueIssueTypeLevelRangeInput = {
  readonly maximum?: InputMaybe<Scalars['Int']['input']>;
  readonly minimum?: InputMaybe<Scalars['Int']['input']>;
};

export type IssueLabelOption = {
  readonly __typename?: 'IssueLabelOption';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly name: Scalars['String']['output'];
};

/** The connection type for IssueLabelOption. */
export type IssueLabelOptionConnection = {
  readonly __typename?: 'IssueLabelOptionConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueLabelOptionEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueLabelOption>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type IssueLabelOptionEdge = {
  readonly __typename?: 'IssueLabelOptionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: IssueLabelOption;
};

export type IssueMetadataPayloadOptionsInput = {
  readonly withAssignees?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withBasicInfo?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withBlockageInfo?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withEpicsInfo?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withEstimates?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withLabels?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withMilestone?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withPipeline?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withPullRequestInfo?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withReleases?: InputMaybe<Scalars['Boolean']['input']>;
  readonly withSprints?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IssueOrderField =
  /** Order by assignee logins */
  | 'assignees'
  /** Order by issue created_at */
  | 'created_at'
  /** Order by issue estimate */
  | 'estimate'
  /** Order by issue github updated_at */
  | 'gh_updated_at'
  /** Order by sprint dates */
  | 'sprints'
  /** Order by whether issue is stale or not */
  | 'stale'
  /** Order by issue title */
  | 'title'
  /** Order by issue updated_at */
  | 'updated_at';

/** Sort issue search results */
export type IssueOrderInput = {
  readonly direction: OrderDirection;
  readonly field: IssueOrderField;
};

export type IssueProgress = {
  readonly issueCountProgress?: Maybe<IssueCountProgress>;
  readonly issueEstimateProgress?: Maybe<IssueEstimateProgress>;
};

/** Filter issue search results */
export type IssueSearchFiltersInput = {
  /** Filter by assigned users using user IDs */
  readonly assigneeIds?: InputMaybe<IssueUserIdInput>;
  /** Filter by assigned users using user logins */
  readonly assignees?: InputMaybe<IssueUserLoginInput>;
  /** Show or hide pull requests */
  readonly displayType?: InputMaybe<DisplayFilter>;
  readonly estimates?: InputMaybe<EstimateSearchFiltersInput>;
  readonly issueBuckets?: InputMaybe<IssueBucketIdsInput>;
  readonly issueIssueTypeDisposition?: InputMaybe<IssueIssueTypeDispositionInput>;
  readonly issueIssueTypes?: InputMaybe<StringInput>;
  readonly labels?: InputMaybe<StringInput>;
  /** Filter by all or any of the filters */
  readonly matchType?: InputMaybe<MatchingFilter>;
  readonly milestones?: InputMaybe<StringInput>;
  readonly parentIssues?: InputMaybe<ParentIssuesInput>;
  readonly releases?: InputMaybe<IdInput>;
  readonly repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly sprints?: InputMaybe<SprintIdInput>;
  /** Filter by issue creator using user IDs */
  readonly userIds?: InputMaybe<IssueUserIdInput>;
  /** Filter by issue creator using user logins */
  readonly users?: InputMaybe<IssueUserLoginInput>;
  readonly zenhubEpics?: InputMaybe<ZenhubEpicSearchFiltersInput>;
};

export type IssueState =
  | 'CLOSED'
  | 'OPEN';

/** Filter for Issue state */
export type IssueStateFilterInput = {
  readonly in?: InputMaybe<ReadonlyArray<IssueState>>;
  readonly nin?: InputMaybe<ReadonlyArray<IssueState>>;
};

/** Filter by IssueState */
export type IssueStateInput = {
  readonly eq: IssueState;
};

export type IssueTemplate = {
  readonly __typename?: 'IssueTemplate';
  readonly body: Scalars['String']['output'];
  readonly default: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly metadata?: Maybe<Scalars['JSON']['output']>;
  readonly path: Scalars['String']['output'];
  readonly raw: Scalars['String']['output'];
  readonly repository: Repository;
};

/** The connection type for IssueTemplate. */
export type IssueTemplateConnection = {
  readonly __typename?: 'IssueTemplateConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueTemplateEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueTemplate>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type IssueTemplateEdge = {
  readonly __typename?: 'IssueTemplateEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: IssueTemplate;
};

export type IssueType =
  | 'GithubIssue'
  | 'ZenhubIssue';

export type IssueTypeDisposition =
  | 'BOARD'
  | 'PLANNING_PANEL';

export type IssueTypeOption = BaseIssueType & Timestamps & {
  readonly __typename?: 'IssueTypeOption';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly disposition: IssueTypeDisposition;
  /** Whether the issue type has related GithubIssueType */
  readonly hasRelatedGithubIssueTypes: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly isDefault: Scalars['Boolean']['output'];
  readonly isDefaultForLevel: Scalars['Boolean']['output'];
  readonly isEnabled: Scalars['Boolean']['output'];
  /** @deprecated Removed from Github API */
  readonly isPrivate: Scalars['Boolean']['output'];
  readonly level?: Maybe<Scalars['Int']['output']>;
  readonly name: Scalars['String']['output'];
  /** Issue types matching the name that exist in one of the connected GH organizations */
  readonly relatedGithubIssueTypes: ReadonlyArray<GithubIssueType>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  /** Underlying Zenhub issue type */
  readonly zenhubIssueType: ZenhubIssueType;
};

/** The connection type for IssueTypeOption. */
export type IssueTypeOptionConnection = {
  readonly __typename?: 'IssueTypeOptionConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueTypeOptionEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueTypeOption>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type IssueTypeOptionEdge = {
  readonly __typename?: 'IssueTypeOptionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: IssueTypeOption;
};

/** Filter an ID column */
export type IssueUserIdInput = {
  readonly in?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly notInAny?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Filter an ID column */
export type IssueUserLoginInput = {
  /** List of GH user logins or ZH user emails */
  readonly in?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** List of GH user logins or ZH user emails */
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly notInAny?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IssueUserOption = {
  readonly __typename?: 'IssueUserOption';
  readonly githubUser?: Maybe<User>;
  readonly zenhubUser?: Maybe<ZenhubUser>;
};

/** The connection type for IssueUserOption. */
export type IssueUserOptionConnection = {
  readonly __typename?: 'IssueUserOptionConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<IssueUserOptionEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<IssueUserOption>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type IssueUserOptionEdge = {
  readonly __typename?: 'IssueUserOptionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: IssueUserOption;
};

export type IssuesCountCheck = {
  readonly __typename?: 'IssuesCountCheck';
  readonly githubCount: Scalars['Int']['output'];
  readonly raptorCount: Scalars['Int']['output'];
};

export type KeyDate = Node & {
  readonly __typename?: 'KeyDate';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly date: Scalars['ISO8601Date']['output'];
  readonly description: Scalars['String']['output'];
  readonly id: Scalars['ID']['output'];
};

/** The connection type for KeyDate. */
export type KeyDateConnection = {
  readonly __typename?: 'KeyDateConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<KeyDateEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<KeyDate>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type KeyDateEdge = {
  readonly __typename?: 'KeyDateEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: KeyDate;
};

export type Label = Timestamps & {
  readonly __typename?: 'Label';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly ghId: Scalars['BigInt']['output'];
  readonly ghNodeId: Scalars['ID']['output'];
  readonly id: Scalars['ID']['output'];
  readonly issues: IssueConnection;
  readonly name: Scalars['String']['output'];
  readonly repository: Repository;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type LabelIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Label. */
export type LabelConnection = {
  readonly __typename?: 'LabelConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<LabelEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Label>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type LabelEdge = {
  readonly __typename?: 'LabelEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Label;
};

export type LabelInfoInput = {
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated input type of LeaveZenhubOrganization */
export type LeaveZenhubOrganizationInput = {
  readonly autoAssignAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
};

/** Autogenerated return type of LeaveZenhubOrganization. */
export type LeaveZenhubOrganizationPayload = {
  readonly __typename?: 'LeaveZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubOrganization: ZenhubOrganization;
};

export type Mannequin = Owner & Timestamps & {
  readonly __typename?: 'Mannequin';
  readonly avatarUrl: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly hasWorkspace: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly login: Scalars['String']['output'];
  readonly projects: ProjectConnection;
  /** Repositories favorited by this github user */
  readonly repositoryFavorites: RepositoryFavoriteConnection;
  readonly roadmapItems: RoadmapItemConnection;
  readonly searchWorkspaces: WorkspaceSearchMatchConnection;
  readonly type: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
};


export type MannequinProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type MannequinRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type MannequinRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


export type MannequinSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


export type MannequinWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type MatchingFilter =
  /** Include records that match all filters */
  | 'all'
  /** Include records that match any filters */
  | 'any';

/** Autogenerated input type of MigrateGheTransferredRepository */
export type MigrateGheTransferredRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly newRepository: Scalars['String']['input'];
  readonly oldRepository: Scalars['String']['input'];
};

/** Autogenerated return type of MigrateGheTransferredRepository. */
export type MigrateGheTransferredRepositoryPayload = {
  readonly __typename?: 'MigrateGheTransferredRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly state: Scalars['String']['output'];
};

export type Milestone = GithubTimestamps & Node & Timestamps & {
  readonly __typename?: 'Milestone';
  readonly closedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly closedIssuesCount: Scalars['Int']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly creator?: Maybe<Owner>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly dueOn?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId: Scalars['Int']['output'];
  readonly ghNodeId: Scalars['ID']['output'];
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly issues: IssueConnection;
  readonly number: Scalars['Int']['output'];
  readonly openIssuesCount: Scalars['Int']['output'];
  readonly otherRepositories: RepositoryConnection;
  readonly repository: Repository;
  readonly startDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly state: MilestoneState;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type MilestoneIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type MilestoneOtherRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId: Scalars['ID']['input'];
};

/** The connection type for Milestone. */
export type MilestoneConnection = {
  readonly __typename?: 'MilestoneConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<MilestoneEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Milestone>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type MilestoneEdge = {
  readonly __typename?: 'MilestoneEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Milestone;
};

export type MilestoneState =
  | 'CLOSED'
  | 'OPEN';

/** Autogenerated input type of MoveAllPipelineIssues */
export type MoveAllPipelineIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly destinationPipelineId: Scalars['ID']['input'];
  readonly pipelineIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of MoveAllPipelineIssues. */
export type MoveAllPipelineIssuesPayload = {
  readonly __typename?: 'MoveAllPipelineIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of MoveIssue */
export type MoveIssueInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly pipelineId: Scalars['ID']['input'];
  readonly position?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of MoveIssue. */
export type MoveIssuePayload = {
  readonly __typename?: 'MoveIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
  readonly pipeline: Pipeline;
};

/** Autogenerated input type of MoveIssueRelativeTo */
export type MoveIssueRelativeToInput = {
  readonly afterPipelineIssueId?: InputMaybe<Scalars['ID']['input']>;
  readonly beforePipelineIssueId?: InputMaybe<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly pipelineId?: InputMaybe<Scalars['ID']['input']>;
  readonly position?: InputMaybe<PipelineIssuePosition>;
};

/** Autogenerated return type of MoveIssueRelativeTo. */
export type MoveIssueRelativeToPayload = {
  readonly __typename?: 'MoveIssueRelativeToPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineIssueMove: PipelineIssueMove;
};

/** Autogenerated input type of MovePipelineIssues */
export type MovePipelineIssuesInput = {
  readonly afterPipelineIssueId?: InputMaybe<Scalars['ID']['input']>;
  readonly beforePipelineIssueId?: InputMaybe<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineId: Scalars['ID']['input'];
  readonly pipelineIssueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly position?: InputMaybe<PipelineIssuePosition>;
};

/** Autogenerated return type of MovePipelineIssues. */
export type MovePipelineIssuesPayload = {
  readonly __typename?: 'MovePipelineIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipeline: Pipeline;
  readonly pipelineIssues: ReadonlyArray<PipelineIssue>;
};

/** Autogenerated input type of MoveRoadmapItemRelativeTo */
export type MoveRoadmapItemRelativeToInput = {
  readonly afterItemId?: InputMaybe<Scalars['ID']['input']>;
  readonly beforeItemId?: InputMaybe<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly itemId: Scalars['ID']['input'];
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of MoveRoadmapItemRelativeTo. */
export type MoveRoadmapItemRelativeToPayload = {
  readonly __typename?: 'MoveRoadmapItemRelativeToPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly item: RoadmapItem;
};

/** Autogenerated input type of MoveZenhubIssueToWorkspace */
export type MoveZenhubIssueToWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of MoveZenhubIssueToWorkspace. */
export type MoveZenhubIssueToWorkspacePayload = {
  readonly __typename?: 'MoveZenhubIssueToWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
};

export type Mutation = {
  readonly __typename?: 'Mutation';
  /** Accept an invitation to ZenhubOrganization */
  readonly acceptZenhubOrganizationInvite?: Maybe<AcceptZenhubOrganizationInvitePayload>;
  /** Add assignees to multiple Issues */
  readonly addAssigneesToIssues?: Maybe<AddAssigneesToIssuesPayload>;
  /** Add assignees to multiple zenhub_epics */
  readonly addAssigneesToZenhubEpics?: Maybe<AddAssigneesToZenhubEpicsPayload>;
  /**
   * Add Epics to a Project
   * @deprecated This mutation must not be used. Use addZenhubEpicsToProject.
   */
  readonly addEpicsToProject?: Maybe<AddEpicsToProjectPayload>;
  /**
   * Add Epics to a Roadmap
   * @deprecated This mutation must not be used. Use addZenhubEpicsToRoadmap.
   */
  readonly addEpicsToRoadmap?: Maybe<AddEpicsToRoadmapPayload>;
  /** Add a value to an EstimateSet */
  readonly addEstimateSetValue?: Maybe<AddEstimateSetValuePayload>;
  /**
   * Adds Issues to Epics
   * @deprecated This mutation must not be used. Use addIssuesToZenhubEpics.
   */
  readonly addIssuesToEpics?: Maybe<AddIssuesToEpicsPayload>;
  /** Add Issues to Releases */
  readonly addIssuesToReleases?: Maybe<AddIssuesToReleasesPayload>;
  /** Add Issues to Sprints */
  readonly addIssuesToSprints?: Maybe<AddIssuesToSprintsPayload>;
  /** Adds Issues to Zenhub Epics */
  readonly addIssuesToZenhubEpics?: Maybe<AddIssuesToZenhubEpicsPayload>;
  /** Add labels to multiple Issues */
  readonly addLabelsToIssues?: Maybe<AddLabelsToIssuesPayload>;
  /** Add milestone to multiple Issues */
  readonly addMilestoneToIssues?: Maybe<AddMilestoneForIssuesPayload>;
  /** Add Projects to a Roadmap */
  readonly addProjectsToRoadmap?: Maybe<AddProjectsToRoadmapPayload>;
  /** Add repositories to a release */
  readonly addRepositoriesToRelease?: Maybe<AddRepositoriesToReleasePayload>;
  /** Add a Repository to a Workspace */
  readonly addRepositoryToWorkspace?: Maybe<AddRepositoryToWorkspacePayload>;
  /** Add sub-issues to an issue */
  readonly addSubIssues?: Maybe<AddSubIssuesPayload>;
  /** Add label filters to a Workspace */
  readonly addWorkspaceLabelFilters?: Maybe<AddWorkspaceLabelFiltersPayload>;
  /** Add zenhub users to multiple issues as assignees */
  readonly addZenhubAssigneesToIssues?: Maybe<AddZenhubAssigneesToIssuesPayload>;
  /** Add Zenhub Epics to a Project */
  readonly addZenhubEpicsToProject?: Maybe<AddZenhubEpicsToProjectPayload>;
  /** Add Zenhub epics to a Roadmap */
  readonly addZenhubEpicsToRoadmap?: Maybe<AddZenhubEpicsToRoadmapPayload>;
  /** Add zenhub labels to multiple issues */
  readonly addZenhubLabelsToIssues?: Maybe<AddZenhubLabelsToIssuesPayload>;
  /** Add zenhub labels to multiple zenhub epics */
  readonly addZenhubLabelsToZenhubEpics?: Maybe<AddZenhubLabelsToZenhubEpicsPayload>;
  /** Add a ZenhubRepository to a Workspace */
  readonly addZenhubRepositoryToWorkspace?: Maybe<AddZenhubRepositoryToWorkspacePayload>;
  /** Add Zenhub users to a workspace */
  readonly addZenhubUsersToWorkspace?: Maybe<AddZenhubUsersToWorkspacePayload>;
  /** Closes multiple issues at once */
  readonly closeIssues?: Maybe<CloseIssuesPayload>;
  /** Convert Zenhub issue to Github issue */
  readonly convertZenhubIssueToGithubIssue?: Maybe<ConvertZenhubIssueToGithubIssuePayload>;
  /** Creates a comment */
  readonly createComment?: Maybe<CreateCommentPayload>;
  /**
   * Creates an Epic
   * @deprecated This mutation must not be used. Use createZenhubEpic.
   */
  readonly createEpic?: Maybe<CreateEpicPayload>;
  /**
   * Convert issue to an epic and add issues to it
   * @deprecated This mutation must not be used. Use createZenhubEpic.
   */
  readonly createEpicFromIssue?: Maybe<CreateEpicFromIssuePayload>;
  /**
   * Create an Epic on a Project
   * @deprecated This mutation must not be used. Use createZenhubEpicOnProject.
   */
  readonly createEpicOnProject?: Maybe<CreateEpicOnProjectPayload>;
  /**
   * Create an Epic on a Roadmap
   * @deprecated This mutation must not be used. Use createZenhubEpicOnRoadmap.
   */
  readonly createEpicOnRoadmap?: Maybe<CreateEpicOnRoadmapPayload>;
  /** Create a Github label */
  readonly createGithubLabel?: Maybe<CreateGithubLabelPayload>;
  /** Creates an Issue */
  readonly createIssue?: Maybe<CreateIssuePayload>;
  /**
   * Creates a Dependency between two issues
   * @deprecated Use createBlockage instead
   */
  readonly createIssueDependency?: Maybe<CreateIssueDependencyPayload>;
  /** Create a new key date for an issue */
  readonly createIssueKeyDate?: Maybe<CreateIssueKeyDatePayload>;
  /** Creates Issue<->PR Connection */
  readonly createIssuePrConnection?: Maybe<CreateIssuePrConnectionPayload>;
  /** Create a milestone */
  readonly createMilestone?: Maybe<CreateMilestonePayload>;
  /** Create a new Pipeline */
  readonly createPipeline?: Maybe<CreatePipelinePayload>;
  /** Create a new Pipeline Automation */
  readonly createPipelineAutomation?: Maybe<CreatePipelineAutomationPayload>;
  /** Create a new PipelineToPipelineAutomation */
  readonly createPipelineToPipelineAutomation?: Maybe<CreatePipelineToPipelineAutomationPayload>;
  /** Create a Project on a Roadmap */
  readonly createProjectOnRoadmap?: Maybe<CreateProjectOnRoadmapPayload>;
  /** Create a release */
  readonly createRelease?: Maybe<CreateReleasePayload>;
  /** Create a new key date for the roadmap */
  readonly createRoadmapKeyDate?: Maybe<CreateRoadmapKeyDatePayload>;
  /** Save board filters */
  readonly createSavedView?: Maybe<CreateSavedViewPayload>;
  /** Creates a SprintConfig for a workspace */
  readonly createSprintConfig?: Maybe<CreateSprintConfigPayload>;
  /** Create a new key date for the timeline */
  readonly createTimelineKeyDate?: Maybe<CreateTimelineKeyDatePayload>;
  /** Create a Workspace */
  readonly createWorkspace?: Maybe<CreateWorkspacePayload>;
  /** Create a Zenhub epic */
  readonly createZenhubEpic?: Maybe<CreateZenhubEpicPayload>;
  /** Create a new key date for a Zenhub Epic */
  readonly createZenhubEpicKeyDate?: Maybe<CreateZenhubEpicKeyDatePayload>;
  /** Create a Zenhub Epic on a Project */
  readonly createZenhubEpicOnProject?: Maybe<CreateZenhubEpicOnProjectPayload>;
  /** Create a Zenhub epic on a Roadmap */
  readonly createZenhubEpicOnRoadmap?: Maybe<CreateZenhubEpicOnRoadmapPayload>;
  /** Create a Zenhub label */
  readonly createZenhubLabel?: Maybe<CreateZenhubLabelPayload>;
  /** Create a Zenhub Organization */
  readonly createZenhubOrganization?: Maybe<CreateZenhubOrganizationPayload>;
  /** Create ZenhubOrganization invite */
  readonly createZenhubOrganizationInvite?: Maybe<CreateZenhubOrganizationInvitePayload>;
  /** Deletes comment */
  readonly deleteComment?: Maybe<DeleteCommentPayload>;
  /**
   * Destroy epic and its dependents
   * @deprecated This mutation must not be used. Use deleteZenhubEpic.
   */
  readonly deleteEpicByIssueInfo?: Maybe<DeleteEpicByIssueInfoPayload>;
  /**
   * Delete a Dependency between two issues
   * @deprecated Use deleteBlockage instead
   */
  readonly deleteIssueDependency?: Maybe<DeleteIssueDependencyPayload>;
  /** Delete a key date from an issue */
  readonly deleteIssueKeyDate?: Maybe<DeleteIssueKeyDatePayload>;
  /** Deletes Issue<->PR Connection */
  readonly deleteIssuePrConnection?: Maybe<DeleteIssuePrConnectionPayload>;
  /** Delete a milestone */
  readonly deleteMilestone?: Maybe<DeleteMilestonePayload>;
  /** Deletes a Notion Integration Token */
  readonly deleteNotionIntegrationToken?: Maybe<DeleteNotionIntegrationTokenPayload>;
  /** Delete a Pipeline */
  readonly deletePipeline?: Maybe<DeletePipelinePayload>;
  /** Delete a Pipeline Automation */
  readonly deletePipelineAutomation?: Maybe<DeletePipelineAutomationPayload>;
  /** Delete a PipelineToPipelineAutomation */
  readonly deletePipelineToPipelineAutomation?: Maybe<DeletePipelineToPipelineAutomationPayload>;
  /** Delete a Project */
  readonly deleteProject?: Maybe<DeleteProjectPayload>;
  /** Delete a key date from the roadmap */
  readonly deleteRoadmapKeyDate?: Maybe<DeleteRoadmapKeyDatePayload>;
  /** Delete saved view */
  readonly deleteSavedView?: Maybe<DeleteSavedViewPayload>;
  /** Delete a SprintConfig and open Sprints for a workspace */
  readonly deleteSprintConfigAndOpenSprints?: Maybe<DeleteSprintConfigAndOpenSprintsPayload>;
  /** Delete a key date from the timeline */
  readonly deleteTimelineKeyDate?: Maybe<DeleteTimelineKeyDatePayload>;
  /** Deletes a Workspace */
  readonly deleteWorkspace?: Maybe<DeleteWorkspacePayload>;
  /** Deletes a workspace favorite */
  readonly deleteWorkspaceFavorite?: Maybe<DeleteWorkspaceFavoritePayload>;
  /** Delete zenhub epic */
  readonly deleteZenhubEpic?: Maybe<DeleteZenhubEpicPayload>;
  /** Delete a key date from a Zenhub Epic */
  readonly deleteZenhubEpicKeyDate?: Maybe<DeleteZenhubEpicKeyDatePayload>;
  /** Delete Zenhub issue */
  readonly deleteZenhubIssue?: Maybe<DeleteZenhubIssuePayload>;
  /** Delete Zenhub labels */
  readonly deleteZenhubLabels?: Maybe<DeleteZenhubLabelsPayload>;
  /** Delete ZenhubOrganizationInvite recipients */
  readonly deleteZenhubOrganizationInviteRecipients?: Maybe<DeleteZenhubOrganizationInviteRecipientsPayload>;
  /** Delete ZenhubOrganization invites */
  readonly deleteZenhubOrganizationInvites?: Maybe<DeleteZenhubOrganizationInvitesPayload>;
  /** Delete Zenhub user */
  readonly deleteZenhubUser?: Maybe<DeleteZenhubUserPayload>;
  /** Disconnect Github from account */
  readonly disconnectGithubUser?: Maybe<DisconnectGithubUserPayload>;
  /** Disconnects a repository from a Workspace */
  readonly disconnectWorkspaceRepository?: Maybe<DisconnectWorkspaceRepositoryPayload>;
  /** Update the notion prompt dismissal status of a user */
  readonly dismissConnectNotionPrompt?: Maybe<DismissConnectNotionPromptPayload>;
  /** Duplicates a Pipeline Automation */
  readonly duplicatePipelineAutomation?: Maybe<DuplicatePipelineAutomationPayload>;
  /** Generates sprint review */
  readonly generateSprintReview?: Maybe<GenerateSprintReviewPayload>;
  /** Invite a list of users to estimate a list of issues. Errors on PR */
  readonly inviteToEstimate?: Maybe<InviteToEstimatePayload>;
  /** Leave zenhub organization */
  readonly leaveZenhubOrganization?: Maybe<LeaveZenhubOrganizationPayload>;
  /** Migrate Zenhub metadata for repositories that were transferred to GitHub Enterprise */
  readonly migrateGheTransferredRepository?: Maybe<MigrateGheTransferredRepositoryPayload>;
  /** Move all pipeline issues from source pipelines to a destination pipeline */
  readonly moveAllPipelineIssues?: Maybe<MoveAllPipelineIssuesPayload>;
  /** Move issues to a position in a pipeline */
  readonly moveIssue?: Maybe<MoveIssuePayload>;
  /** Move Issue after/before a PipelineIssue or to start/end */
  readonly moveIssueRelativeTo?: Maybe<MoveIssueRelativeToPayload>;
  /** Move PipelineIssues to either top or bottom */
  readonly movePipelineIssues?: Maybe<MovePipelineIssuesPayload>;
  /** Move roadmap items relative to each other */
  readonly moveRoadmapItemRelativeTo?: Maybe<MoveRoadmapItemRelativeToPayload>;
  /** Moves a Zenhub issue to a different workspace */
  readonly moveZenhubIssueToWorkspace?: Maybe<MoveZenhubIssueToWorkspacePayload>;
  /** Remove assignees from multiple Issues */
  readonly removeAssigneesFromIssues?: Maybe<RemoveAssigneesFromIssuesPayload>;
  /** Remove assignees fromto multiple zenhub_epics */
  readonly removeAssigneesFromZenhubEpics?: Maybe<RemoveAssigneesFromZenhubEpicsPayload>;
  /**
   * Removes an Epic from a Project
   * @deprecated This mutation must not be used. Use removeZenhubEpicsFromProject.
   */
  readonly removeEpicFromProject?: Maybe<RemoveEpicFromProjectPayload>;
  /**
   * Removes an Epic from a Roadmap
   * @deprecated This mutation must not be used. Use removeZenhubEpicsFromRoadmap.
   */
  readonly removeEpicFromRoadmap?: Maybe<RemoveEpicFromRoadmapPayload>;
  /** Remove a value from an EstimateSet */
  readonly removeEstimateSetValue?: Maybe<RemoveEstimateSetValuePayload>;
  /** Remove a vote on issue estimation */
  readonly removeEstimationVote?: Maybe<RemoveEstimationVotePayload>;
  /** Removes multiple issue priorities */
  readonly removeIssueInfoPriorities?: Maybe<RemoveIssueInfoPrioritiesPayload>;
  /**
   * Remove Issues from Epics
   * @deprecated This mutation must not be used. Use removeissuesFromZenhubEpics.
   */
  readonly removeIssuesFromEpics?: Maybe<RemoveIssuesFromEpicsPayload>;
  /** Remove Issues from Releases */
  readonly removeIssuesFromReleases?: Maybe<RemoveIssuesFromReleasesPayload>;
  /** Remove Issues from Sprints */
  readonly removeIssuesFromSprints?: Maybe<RemoveIssuesFromSprintsPayload>;
  /** Remove Issues from Zenhub Epics */
  readonly removeIssuesFromZenhubEpics?: Maybe<RemoveIssuesFromZenhubEpicsPayload>;
  /** Remove labels from multiple Issues */
  readonly removeLabelsFromIssues?: Maybe<RemoveLabelsFromIssuesPayload>;
  /** Remove milestone from multiple Issues */
  readonly removeMilestoneToIssues?: Maybe<RemoveMilestoneForIssuesPayload>;
  /** Remove a Project from a Roadmap */
  readonly removeProjectFromRoadmap?: Maybe<RemoveProjectFromRoadmapPayload>;
  /** Remove repositories from a release */
  readonly removeRepositoriesFromRelease?: Maybe<RemoveRepositoriesFromReleasePayload>;
  /** Remove sub-issues from an issue */
  readonly removeSubIssues?: Maybe<RemoveSubIssuesPayload>;
  /** Remove user from zenhub organization */
  readonly removeUserFromZenhubOrganization?: Maybe<RemoveUserFromZenhubOrganizationPayload>;
  /** Removes label filters from a Workspace */
  readonly removeWorkspaceLabelFilters?: Maybe<RemoveWorkspaceLabelFiltersPayload>;
  /** Remove zenhub users as assignees from multiple issues */
  readonly removeZenhubAssigneesFromIssues?: Maybe<RemoveZenhubAssigneesFromIssuesPayload>;
  /** Removes a Zenhub Epic from a Project */
  readonly removeZenhubEpicFromProject?: Maybe<RemoveZenhubEpicFromProjectPayload>;
  /** Remove Zenhub epic from a Roadmap */
  readonly removeZenhubEpicFromRoadmap?: Maybe<RemoveZenhubEpicFromRoadmapPayload>;
  /** Remove zenhub labels from multiple issues */
  readonly removeZenhubLabelsFromIssues?: Maybe<RemoveZenhubLabelsFromIssuesPayload>;
  /** Remove zenhub labels from multiple zenhub epics */
  readonly removeZenhubLabelsFromZenhubEpics?: Maybe<RemoveZenhubLabelsFromZenhubEpicsPayload>;
  /** Remove a ZenhubRepository from a Workspace */
  readonly removeZenhubRepositoryFromWorkspace?: Maybe<RemoveZenhubRepositoryFromWorkspacePayload>;
  /** Remove Zenhub users from a workspace */
  readonly removeZenhubUsersFromWorkspace?: Maybe<RemoveZenhubUsersFromWorkspacePayload>;
  /** Reopen Issues into a Pipeline either at the start or end */
  readonly reopenIssues?: Maybe<ReopenIssuesPayload>;
  /** Reprioritizes a sub-issue to a different position in the parent list. */
  readonly reprioritizeSubIssue?: Maybe<ReprioritizeSubIssuePayload>;
  /** Set an estimate on an Issue */
  readonly setEstimate?: Maybe<SetEstimatePayload>;
  /** Give a vote on issue estimation */
  readonly setEstimationVote?: Maybe<SetEstimationVotePayload>;
  /** Sets a workspace as favorite */
  readonly setFavoriteWorkspace?: Maybe<SetFavoriteWorkspacePayload>;
  /** Sets multiple issue priorities */
  readonly setIssueInfoPriorities?: Maybe<SetIssueInfoPrioritiesPayload>;
  /** Set the start date on a milestone */
  readonly setMilestoneStartDate?: Maybe<SetMilestoneStartDatePayload>;
  /** Set estimates on multiple Issues */
  readonly setMultipleEstimates?: Maybe<SetMultipleEstimatesPayload>;
  /** Set an estimate on ZenhubEpics */
  readonly setMultipleEstimatesOnZenhubEpics?: Maybe<SetMultipleEstimatesOnZenhubEpicsPayload>;
  /** Set stages for pipelines */
  readonly setPipelineStages?: Maybe<SetPipelineStagesPayload>;
  /** Set priority on PipelineIssues */
  readonly setPriorityOnPipelineIssues?: Maybe<SetPriorityOnPipelineIssuesPayload>;
  /** Sets a pull_request_pipeline_id for a workspace */
  readonly setPullRequestPipeline?: Maybe<SetPullRequestPipelinePayload>;
  /** For a user, set Workspace's last viewed timestamp to now */
  readonly setWorkspaceViewedNow?: Maybe<SetWorkspaceViewedNowPayload>;
  /** Splits a repository from a Workspace */
  readonly splitWorkspaceRepository?: Maybe<SplitWorkspaceRepositoryPayload>;
  /** Updates comment */
  readonly updateComment?: Maybe<UpdateCommentPayload>;
  /**
   * Update epic's startOn and endOn dates
   * @deprecated This mutation must not be used. Use updateZenhubEpicDates.
   */
  readonly updateEpicDates?: Maybe<UpdateEpicDatesPayload>;
  /**
   * Adds and Removes Issues from an Epic
   * @deprecated This mutation must not be used. Use updateZenhubEpic.
   */
  readonly updateEpicIssuesByIssueInfos?: Maybe<UpdateEpicIssuesByIssueInfosPayload>;
  /** Update an existing Issue */
  readonly updateIssue?: Maybe<UpdateIssuePayload>;
  /** Update a key date of an issue */
  readonly updateIssueKeyDate?: Maybe<UpdateIssueKeyDatePayload>;
  /** Update a milestone */
  readonly updateMilestone?: Maybe<UpdateMilestonePayload>;
  /** Update a Pipeline */
  readonly updatePipeline?: Maybe<UpdatePipelinePayload>;
  /** Updates a Pipeline Automation */
  readonly updatePipelineAutomation?: Maybe<UpdatePipelineAutomationPayload>;
  /** Updates a Pipeline Configuration */
  readonly updatePipelineConfiguration?: Maybe<UpdatePipelineConfigurationPayload>;
  /** Update a Project */
  readonly updateProject?: Maybe<UpdateProjectPayload>;
  /** Update Project's startOn and endOn dates */
  readonly updateProjectDates?: Maybe<UpdateProjectDatesPayload>;
  /** Update a Project State */
  readonly updateProjectState?: Maybe<UpdateProjectStatePayload>;
  /** Update a release */
  readonly updateRelease?: Maybe<UpdateReleasePayload>;
  /** Update a key date from the roadmap */
  readonly updateRoadmapKeyDate?: Maybe<UpdateRoadmapKeyDatePayload>;
  /** Update filters or name of a saved view */
  readonly updateSavedView?: Maybe<UpdateSavedViewPayload>;
  /** Update an existing Sprint */
  readonly updateSprint?: Maybe<UpdateSprintPayload>;
  /** Updates a SprintConfig for a workspace */
  readonly updateSprintConfig?: Maybe<UpdateSprintConfigPayload>;
  /** Update a key date from the timeline */
  readonly updateTimelineKeyDate?: Maybe<UpdateTimelineKeyDatePayload>;
  /** Update user permissions on organization */
  readonly updateUserPermissions?: Maybe<UpdateUserPermissionsPayload>;
  /** Update a Workspace */
  readonly updateWorkspace?: Maybe<UpdateWorkspacePayload>;
  /** Update the role and add user to workspace if needed */
  readonly updateWorkspaceZenhubUserRole?: Maybe<UpdateWorkspaceZenhubUserRolePayload>;
  /** Update Zenhub epic */
  readonly updateZenhubEpic?: Maybe<UpdateZenhubEpicPayload>;
  /** Update Zenhub epic's startOn and endOn dates */
  readonly updateZenhubEpicDates?: Maybe<UpdateZenhubEpicDatesPayload>;
  /** Update a key date from a Zenhub Epic */
  readonly updateZenhubEpicKeyDate?: Maybe<UpdateZenhubEpicKeyDatePayload>;
  /** Update a ZenhubEpic State */
  readonly updateZenhubEpicState?: Maybe<UpdateZenhubEpicStatePayload>;
  /** Update ZenhubOrganization */
  readonly updateZenhubOrganization?: Maybe<UpdateZenhubOrganizationPayload>;
};


export type MutationAcceptZenhubOrganizationInviteArgs = {
  input: AcceptZenhubOrganizationInviteInput;
};


export type MutationAddAssigneesToIssuesArgs = {
  input: AddAssigneesToIssuesInput;
};


export type MutationAddAssigneesToZenhubEpicsArgs = {
  input: AddAssigneesToZenhubEpicsInput;
};


export type MutationAddEpicsToProjectArgs = {
  input: AddEpicsToProjectInput;
};


export type MutationAddEpicsToRoadmapArgs = {
  input: AddEpicsToRoadmapInput;
};


export type MutationAddEstimateSetValueArgs = {
  input: AddEstimateSetValueInput;
};


export type MutationAddIssuesToEpicsArgs = {
  input: AddIssuesToEpicsInput;
};


export type MutationAddIssuesToReleasesArgs = {
  input: AddIssuesToReleasesInput;
};


export type MutationAddIssuesToSprintsArgs = {
  input: AddIssuesToSprintsInput;
};


export type MutationAddIssuesToZenhubEpicsArgs = {
  input: AddIssuesToZenhubEpicsInput;
};


export type MutationAddLabelsToIssuesArgs = {
  input: AddLabelsToIssuesInput;
};


export type MutationAddMilestoneToIssuesArgs = {
  input: AddMilestoneForIssuesInput;
};


export type MutationAddProjectsToRoadmapArgs = {
  input: AddProjectsToRoadmapInput;
};


export type MutationAddRepositoriesToReleaseArgs = {
  input: AddRepositoriesToReleaseInput;
};


export type MutationAddRepositoryToWorkspaceArgs = {
  input: AddRepositoryToWorkspaceInput;
};


export type MutationAddSubIssuesArgs = {
  input: AddSubIssuesInput;
};


export type MutationAddWorkspaceLabelFiltersArgs = {
  input: AddWorkspaceLabelFiltersInput;
};


export type MutationAddZenhubAssigneesToIssuesArgs = {
  input: AddZenhubAssigneesToIssuesInput;
};


export type MutationAddZenhubEpicsToProjectArgs = {
  input: AddZenhubEpicsToProjectInput;
};


export type MutationAddZenhubEpicsToRoadmapArgs = {
  input: AddZenhubEpicsToRoadmapInput;
};


export type MutationAddZenhubLabelsToIssuesArgs = {
  input: AddZenhubLabelsToIssuesInput;
};


export type MutationAddZenhubLabelsToZenhubEpicsArgs = {
  input: AddZenhubLabelsToZenhubEpicsInput;
};


export type MutationAddZenhubRepositoryToWorkspaceArgs = {
  input: AddZenhubRepositoryToWorkspaceInput;
};


export type MutationAddZenhubUsersToWorkspaceArgs = {
  input: AddZenhubUsersToWorkspaceInput;
};


export type MutationCloseIssuesArgs = {
  input: CloseIssuesInput;
};


export type MutationConvertZenhubIssueToGithubIssueArgs = {
  input: ConvertZenhubIssueToGithubIssueInput;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentInput;
};


export type MutationCreateEpicArgs = {
  input: CreateEpicInput;
};


export type MutationCreateEpicFromIssueArgs = {
  input: CreateEpicFromIssueInput;
};


export type MutationCreateEpicOnProjectArgs = {
  input: CreateEpicOnProjectInput;
};


export type MutationCreateEpicOnRoadmapArgs = {
  input: CreateEpicOnRoadmapInput;
};


export type MutationCreateGithubLabelArgs = {
  input: CreateGithubLabelInput;
};


export type MutationCreateIssueArgs = {
  input: CreateIssueInput;
};


export type MutationCreateIssueDependencyArgs = {
  input: CreateIssueDependencyInput;
};


export type MutationCreateIssueKeyDateArgs = {
  input: CreateIssueKeyDateInput;
};


export type MutationCreateIssuePrConnectionArgs = {
  input: CreateIssuePrConnectionInput;
};


export type MutationCreateMilestoneArgs = {
  input: CreateMilestoneInput;
};


export type MutationCreatePipelineArgs = {
  input: CreatePipelineInput;
};


export type MutationCreatePipelineAutomationArgs = {
  input: CreatePipelineAutomationInput;
};


export type MutationCreatePipelineToPipelineAutomationArgs = {
  input: CreatePipelineToPipelineAutomationInput;
};


export type MutationCreateProjectOnRoadmapArgs = {
  input: CreateProjectOnRoadmapInput;
};


export type MutationCreateReleaseArgs = {
  input: CreateReleaseInput;
};


export type MutationCreateRoadmapKeyDateArgs = {
  input: CreateRoadmapKeyDateInput;
};


export type MutationCreateSavedViewArgs = {
  input: CreateSavedViewInput;
};


export type MutationCreateSprintConfigArgs = {
  input: CreateSprintConfigInput;
};


export type MutationCreateTimelineKeyDateArgs = {
  input: CreateTimelineKeyDateInput;
};


export type MutationCreateWorkspaceArgs = {
  input: CreateWorkspaceInput;
};


export type MutationCreateZenhubEpicArgs = {
  input: CreateZenhubEpicInput;
};


export type MutationCreateZenhubEpicKeyDateArgs = {
  input: CreateZenhubEpicKeyDateInput;
};


export type MutationCreateZenhubEpicOnProjectArgs = {
  input: CreateZenhubEpicOnProjectInput;
};


export type MutationCreateZenhubEpicOnRoadmapArgs = {
  input: CreateZenhubEpicOnRoadmapInput;
};


export type MutationCreateZenhubLabelArgs = {
  input: CreateZenhubLabelInput;
};


export type MutationCreateZenhubOrganizationArgs = {
  input: CreateZenhubOrganizationInput;
};


export type MutationCreateZenhubOrganizationInviteArgs = {
  input: CreateZenhubOrganizationInviteInput;
};


export type MutationDeleteCommentArgs = {
  input: DeleteCommentInput;
};


export type MutationDeleteEpicByIssueInfoArgs = {
  input: DeleteEpicByIssueInfoInput;
};


export type MutationDeleteIssueDependencyArgs = {
  input: DeleteIssueDependencyInput;
};


export type MutationDeleteIssueKeyDateArgs = {
  input: DeleteIssueKeyDateInput;
};


export type MutationDeleteIssuePrConnectionArgs = {
  input: DeleteIssuePrConnectionInput;
};


export type MutationDeleteMilestoneArgs = {
  input: DeleteMilestoneInput;
};


export type MutationDeleteNotionIntegrationTokenArgs = {
  input: DeleteNotionIntegrationTokenInput;
};


export type MutationDeletePipelineArgs = {
  input: DeletePipelineInput;
};


export type MutationDeletePipelineAutomationArgs = {
  input: DeletePipelineAutomationInput;
};


export type MutationDeletePipelineToPipelineAutomationArgs = {
  input: DeletePipelineToPipelineAutomationInput;
};


export type MutationDeleteProjectArgs = {
  input: DeleteProjectInput;
};


export type MutationDeleteRoadmapKeyDateArgs = {
  input: DeleteRoadmapKeyDateInput;
};


export type MutationDeleteSavedViewArgs = {
  input: DeleteSavedViewInput;
};


export type MutationDeleteSprintConfigAndOpenSprintsArgs = {
  input: DeleteSprintConfigAndOpenSprintsInput;
};


export type MutationDeleteTimelineKeyDateArgs = {
  input: DeleteTimelineKeyDateInput;
};


export type MutationDeleteWorkspaceArgs = {
  input: DeleteWorkspaceInput;
};


export type MutationDeleteWorkspaceFavoriteArgs = {
  input: DeleteWorkspaceFavoriteInput;
};


export type MutationDeleteZenhubEpicArgs = {
  input: DeleteZenhubEpicInput;
};


export type MutationDeleteZenhubEpicKeyDateArgs = {
  input: DeleteZenhubEpicKeyDateInput;
};


export type MutationDeleteZenhubIssueArgs = {
  input: DeleteZenhubIssueInput;
};


export type MutationDeleteZenhubLabelsArgs = {
  input: DeleteZenhubLabelsInput;
};


export type MutationDeleteZenhubOrganizationInviteRecipientsArgs = {
  input: DeleteZenhubOrganizationInviteRecipientsInput;
};


export type MutationDeleteZenhubOrganizationInvitesArgs = {
  input: DeleteZenhubOrganizationInvitesInput;
};


export type MutationDeleteZenhubUserArgs = {
  input: DeleteZenhubUserInput;
};


export type MutationDisconnectGithubUserArgs = {
  input: DisconnectGithubUserInput;
};


export type MutationDisconnectWorkspaceRepositoryArgs = {
  input: DisconnectWorkspaceRepositoryInput;
};


export type MutationDismissConnectNotionPromptArgs = {
  input: DismissConnectNotionPromptInput;
};


export type MutationDuplicatePipelineAutomationArgs = {
  input: DuplicatePipelineAutomationInput;
};


export type MutationGenerateSprintReviewArgs = {
  input: GenerateSprintReviewInput;
};


export type MutationInviteToEstimateArgs = {
  input: InviteToEstimateInput;
};


export type MutationLeaveZenhubOrganizationArgs = {
  input: LeaveZenhubOrganizationInput;
};


export type MutationMigrateGheTransferredRepositoryArgs = {
  input: MigrateGheTransferredRepositoryInput;
};


export type MutationMoveAllPipelineIssuesArgs = {
  input: MoveAllPipelineIssuesInput;
};


export type MutationMoveIssueArgs = {
  input: MoveIssueInput;
};


export type MutationMoveIssueRelativeToArgs = {
  input: MoveIssueRelativeToInput;
};


export type MutationMovePipelineIssuesArgs = {
  input: MovePipelineIssuesInput;
};


export type MutationMoveRoadmapItemRelativeToArgs = {
  input: MoveRoadmapItemRelativeToInput;
};


export type MutationMoveZenhubIssueToWorkspaceArgs = {
  input: MoveZenhubIssueToWorkspaceInput;
};


export type MutationRemoveAssigneesFromIssuesArgs = {
  input: RemoveAssigneesFromIssuesInput;
};


export type MutationRemoveAssigneesFromZenhubEpicsArgs = {
  input: RemoveAssigneesFromZenhubEpicsInput;
};


export type MutationRemoveEpicFromProjectArgs = {
  input: RemoveEpicFromProjectInput;
};


export type MutationRemoveEpicFromRoadmapArgs = {
  input: RemoveEpicFromRoadmapInput;
};


export type MutationRemoveEstimateSetValueArgs = {
  input: RemoveEstimateSetValueInput;
};


export type MutationRemoveEstimationVoteArgs = {
  input: RemoveEstimationVoteInput;
};


export type MutationRemoveIssueInfoPrioritiesArgs = {
  input: RemoveIssueInfoPrioritiesInput;
};


export type MutationRemoveIssuesFromEpicsArgs = {
  input: RemoveIssuesFromEpicsInput;
};


export type MutationRemoveIssuesFromReleasesArgs = {
  input: RemoveIssuesFromReleasesInput;
};


export type MutationRemoveIssuesFromSprintsArgs = {
  input: RemoveIssuesFromSprintsInput;
};


export type MutationRemoveIssuesFromZenhubEpicsArgs = {
  input: RemoveIssuesFromZenhubEpicsInput;
};


export type MutationRemoveLabelsFromIssuesArgs = {
  input: RemoveLabelsFromIssuesInput;
};


export type MutationRemoveMilestoneToIssuesArgs = {
  input: RemoveMilestoneForIssuesInput;
};


export type MutationRemoveProjectFromRoadmapArgs = {
  input: RemoveProjectFromRoadmapInput;
};


export type MutationRemoveRepositoriesFromReleaseArgs = {
  input: RemoveRepositoriesFromReleaseInput;
};


export type MutationRemoveSubIssuesArgs = {
  input: RemoveSubIssuesInput;
};


export type MutationRemoveUserFromZenhubOrganizationArgs = {
  input: RemoveUserFromZenhubOrganizationInput;
};


export type MutationRemoveWorkspaceLabelFiltersArgs = {
  input: RemoveWorkspaceLabelFiltersInput;
};


export type MutationRemoveZenhubAssigneesFromIssuesArgs = {
  input: RemoveZenhubAssigneesFromIssuesInput;
};


export type MutationRemoveZenhubEpicFromProjectArgs = {
  input: RemoveZenhubEpicFromProjectInput;
};


export type MutationRemoveZenhubEpicFromRoadmapArgs = {
  input: RemoveZenhubEpicFromRoadmapInput;
};


export type MutationRemoveZenhubLabelsFromIssuesArgs = {
  input: RemoveZenhubLabelsFromIssuesInput;
};


export type MutationRemoveZenhubLabelsFromZenhubEpicsArgs = {
  input: RemoveZenhubLabelsFromZenhubEpicsInput;
};


export type MutationRemoveZenhubRepositoryFromWorkspaceArgs = {
  input: RemoveZenhubRepositoryFromWorkspaceInput;
};


export type MutationRemoveZenhubUsersFromWorkspaceArgs = {
  input: RemoveZenhubUsersFromWorkspaceInput;
};


export type MutationReopenIssuesArgs = {
  input: ReopenIssuesInput;
};


export type MutationReprioritizeSubIssueArgs = {
  input: ReprioritizeSubIssueInput;
};


export type MutationSetEstimateArgs = {
  input: SetEstimateInput;
};


export type MutationSetEstimationVoteArgs = {
  input: SetEstimationVoteInput;
};


export type MutationSetFavoriteWorkspaceArgs = {
  input: SetFavoriteWorkspaceInput;
};


export type MutationSetIssueInfoPrioritiesArgs = {
  input: SetIssueInfoPrioritiesInput;
};


export type MutationSetMilestoneStartDateArgs = {
  input: SetMilestoneStartDateInput;
};


export type MutationSetMultipleEstimatesArgs = {
  input: SetMultipleEstimatesInput;
};


export type MutationSetMultipleEstimatesOnZenhubEpicsArgs = {
  input: SetMultipleEstimatesOnZenhubEpicsInput;
};


export type MutationSetPipelineStagesArgs = {
  input: SetPipelineStagesInput;
};


export type MutationSetPriorityOnPipelineIssuesArgs = {
  input: SetPriorityOnPipelineIssuesInput;
};


export type MutationSetPullRequestPipelineArgs = {
  input: SetPullRequestPipelineInput;
};


export type MutationSetWorkspaceViewedNowArgs = {
  input: SetWorkspaceViewedNowInput;
};


export type MutationSplitWorkspaceRepositoryArgs = {
  input: SplitWorkspaceRepositoryInput;
};


export type MutationUpdateCommentArgs = {
  input: UpdateCommentInput;
};


export type MutationUpdateEpicDatesArgs = {
  input: UpdateEpicDatesInput;
};


export type MutationUpdateEpicIssuesByIssueInfosArgs = {
  input: UpdateEpicIssuesByIssueInfosInput;
};


export type MutationUpdateIssueArgs = {
  input: UpdateIssueInput;
};


export type MutationUpdateIssueKeyDateArgs = {
  input: UpdateIssueKeyDateInput;
};


export type MutationUpdateMilestoneArgs = {
  input: UpdateMilestoneInput;
};


export type MutationUpdatePipelineArgs = {
  input: UpdatePipelineInput;
};


export type MutationUpdatePipelineAutomationArgs = {
  input: UpdatePipelineAutomationInput;
};


export type MutationUpdatePipelineConfigurationArgs = {
  input: UpdatePipelineConfigurationInput;
};


export type MutationUpdateProjectArgs = {
  input: UpdateProjectInput;
};


export type MutationUpdateProjectDatesArgs = {
  input: UpdateProjectDatesInput;
};


export type MutationUpdateProjectStateArgs = {
  input: UpdateProjectStateInput;
};


export type MutationUpdateReleaseArgs = {
  input: UpdateReleaseInput;
};


export type MutationUpdateRoadmapKeyDateArgs = {
  input: UpdateRoadmapKeyDateInput;
};


export type MutationUpdateSavedViewArgs = {
  input: UpdateSavedViewInput;
};


export type MutationUpdateSprintArgs = {
  input: UpdateSprintInput;
};


export type MutationUpdateSprintConfigArgs = {
  input: UpdateSprintConfigInput;
};


export type MutationUpdateTimelineKeyDateArgs = {
  input: UpdateTimelineKeyDateInput;
};


export type MutationUpdateUserPermissionsArgs = {
  input: UpdateUserPermissionsInput;
};


export type MutationUpdateWorkspaceArgs = {
  input: UpdateWorkspaceInput;
};


export type MutationUpdateWorkspaceZenhubUserRoleArgs = {
  input: UpdateWorkspaceZenhubUserRoleInput;
};


export type MutationUpdateZenhubEpicArgs = {
  input: UpdateZenhubEpicInput;
};


export type MutationUpdateZenhubEpicDatesArgs = {
  input: UpdateZenhubEpicDatesInput;
};


export type MutationUpdateZenhubEpicKeyDateArgs = {
  input: UpdateZenhubEpicKeyDateInput;
};


export type MutationUpdateZenhubEpicStateArgs = {
  input: UpdateZenhubEpicStateInput;
};


export type MutationUpdateZenhubOrganizationArgs = {
  input: UpdateZenhubOrganizationInput;
};

export type NoOwner = Owner & {
  readonly __typename?: 'NoOwner';
  readonly avatarUrl: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly hasWorkspace: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly login: Scalars['String']['output'];
  readonly projects: ProjectConnection;
  /** Repositories favorited by this github user */
  readonly repositoryFavorites: RepositoryFavoriteConnection;
  readonly roadmapItems: RoadmapItemConnection;
  readonly searchWorkspaces: WorkspaceSearchMatchConnection;
  readonly type: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
};


export type NoOwnerProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type NoOwnerRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type NoOwnerRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


export type NoOwnerSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


export type NoOwnerWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
};

export type OrderDirection =
  | 'ASC'
  | 'DESC';

/** Cached Github organization data. Is inherited from OwnerType. */
export type Organization = Owner & Timestamps & {
  readonly __typename?: 'Organization';
  readonly avatarUrl: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly hasWorkspace: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly login: Scalars['String']['output'];
  readonly projects: ProjectConnection;
  /** Repositories favorited by this github user */
  readonly repositoryFavorites: RepositoryFavoriteConnection;
  readonly roadmapItems: RoadmapItemConnection;
  readonly searchWorkspaces: WorkspaceSearchMatchConnection;
  readonly type: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
  readonly zenhubOrganization?: Maybe<ZenhubOrganization>;
};


/** Cached Github organization data. Is inherited from OwnerType. */
export type OrganizationProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Cached Github organization data. Is inherited from OwnerType. */
export type OrganizationRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Cached Github organization data. Is inherited from OwnerType. */
export type OrganizationRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


/** Cached Github organization data. Is inherited from OwnerType. */
export type OrganizationSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


/** Cached Github organization data. Is inherited from OwnerType. */
export type OrganizationWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Cached Github data for user or organization */
export type Owner = {
  readonly avatarUrl: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly hasWorkspace: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly login: Scalars['String']['output'];
  readonly projects: ProjectConnection;
  /** Repositories favorited by this github user */
  readonly repositoryFavorites: RepositoryFavoriteConnection;
  readonly roadmapItems: RoadmapItemConnection;
  readonly searchWorkspaces: WorkspaceSearchMatchConnection;
  readonly type: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
};


/** Cached Github data for user or organization */
export type OwnerProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Cached Github data for user or organization */
export type OwnerRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Cached Github data for user or organization */
export type OwnerRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


/** Cached Github data for user or organization */
export type OwnerSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


/** Cached Github data for user or organization */
export type OwnerWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  readonly __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  readonly endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  readonly hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  readonly hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  readonly startCursor?: Maybe<Scalars['String']['output']>;
};

export type ParentIssueSpecialFilter =
  /** Show issues that are not parents */
  | 'not_a_parent'
  /** Show all issues not in parent */
  | 'not_in_parent'
  /** Show all parents and hide children */
  | 'parents_only'
  /** Show all parents and children */
  | 'parents_with_children';

/** Filter by parent issue IDs */
export type ParentIssuesInput = {
  readonly ids?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly recursiveIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly specialFilters?: InputMaybe<ParentIssueSpecialFilter>;
};

export type PermissionLevel =
  | 'ADMIN'
  | 'NONE'
  | 'READ'
  | 'WRITE'
  | 'ZENHUB_WRITE';

/** Board column object. */
export type Pipeline = Node & Timestamps & {
  readonly __typename?: 'Pipeline';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly hasEstimatedIssues: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  /** Whether the pipeline is a default for new PRs */
  readonly isDefaultPRPipeline: Scalars['Boolean']['output'];
  /** @deprecated This field must not be used. */
  readonly isEpicPipeline: Scalars['Boolean']['output'];
  readonly issues: IssueConnection;
  readonly itemBefore?: Maybe<Pipeline>;
  readonly name: Scalars['String']['output'];
  readonly pipelineConfiguration: PipelineConfiguration;
  readonly pipelineToPipelineAutomationDestinations: PipelineToPipelineAutomationConnection;
  readonly pipelineToPipelineAutomationSources: PipelineToPipelineAutomationConnection;
  readonly stage?: Maybe<PipelineStage>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspace: Workspace;
};


/** Board column object. */
export type PipelineIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  repositoryId?: InputMaybe<Scalars['ID']['input']>;
  state?: InputMaybe<IssueState>;
};


/** Board column object. */
export type PipelinePipelineToPipelineAutomationDestinationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Board column object. */
export type PipelinePipelineToPipelineAutomationSourcesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Pipeline automation column object. */
export type PipelineAutomation = Timestamps & {
  readonly __typename?: 'PipelineAutomation';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  /** Possible values: for labels: { labels: [{ name:, color:}, { name:, color:}] }. For assignees: { assignees: [user1_eid, user2_eid] }. To remove all assignees pass empty array { assignees: [] }. For sprints: { sprints: [sprint1_eid, sprint2_eid] }. For epics: { epics: [epic1_eid, epic2_eid] }. For zenhub epics: { zenhubEpics: [epic1_eid, epic2_eid] }. For relative sprints: { relativeSprints: [0, 1, 2] }, where numbers are index of sprints from the current sprint. To remove all sprints pass empty array { relativeSprints: [] }. for pipelines: { pipelines: [pipeline1_eid, pipeline2_eid] } */
  readonly elementDetails: Scalars['JSON']['output'];
  readonly id: Scalars['ID']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for PipelineAutomation. */
export type PipelineAutomationConnection = {
  readonly __typename?: 'PipelineAutomationConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<PipelineAutomationEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<PipelineAutomation>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PipelineAutomationEdge = {
  readonly __typename?: 'PipelineAutomationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: PipelineAutomation;
};

export type PipelineConfigInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
  readonly stage?: InputMaybe<PipelineStage>;
};

/** Pipeline configurations column object. */
export type PipelineConfiguration = Timestamps & {
  readonly __typename?: 'PipelineConfiguration';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly pipelineAutomations: PipelineAutomationConnection;
  /** Stale interval in days. */
  readonly staleInterval?: Maybe<Scalars['Int']['output']>;
  readonly staleIssues?: Maybe<Scalars['Boolean']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly wipLimits: WipLimitConnection;
};


/** Pipeline configurations column object. */
export type PipelineConfigurationPipelineAutomationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Pipeline configurations column object. */
export type PipelineConfigurationWipLimitsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Pipeline. */
export type PipelineConnection = {
  readonly __typename?: 'PipelineConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<PipelineEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Pipeline>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

export type PipelineCounts = {
  readonly __typename?: 'PipelineCounts';
  readonly issuesCount: Scalars['Int']['output'];
  readonly pullRequestsCount: Scalars['Int']['output'];
  readonly sumEstimates: Scalars['Float']['output'];
  readonly unfilteredIssueCount?: Maybe<Scalars['Int']['output']>;
  readonly unfilteredSumEstimates?: Maybe<Scalars['Float']['output']>;
};

/** An edge in a connection. */
export type PipelineEdge = {
  readonly __typename?: 'PipelineEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Pipeline;
};

/** Position of an issue in a pipeline */
export type PipelineIssue = {
  readonly __typename?: 'PipelineIssue';
  readonly id: Scalars['ID']['output'];
  readonly issue: Issue;
  readonly itemAfter?: Maybe<PipelineIssue>;
  readonly itemBefore?: Maybe<PipelineIssue>;
  readonly latestTransferTime?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly pipeline: Pipeline;
  readonly priority?: Maybe<Priority>;
  readonly relativePosition: Scalars['BigInt']['output'];
  readonly workspace: Workspace;
};

/** The connection type for PipelineIssue. */
export type PipelineIssueConnection = {
  readonly __typename?: 'PipelineIssueConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<PipelineIssueEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<PipelineIssue>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PipelineIssueEdge = {
  readonly __typename?: 'PipelineIssueEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: PipelineIssue;
};

export type PipelineIssueMove = {
  readonly __typename?: 'PipelineIssueMove';
  readonly movedAt: Scalars['Float']['output'];
  readonly pipelineIssue: PipelineIssue;
  readonly sourcePipelineId?: Maybe<Scalars['ID']['output']>;
};

export type PipelineIssuePosition =
  | 'END'
  | 'START';

export type PipelineStage =
  | 'BACKLOG'
  | 'COMPLETED'
  | 'DEVELOPMENT'
  | 'REVIEW'
  | 'SPRINT_BACKLOG';

/** Automatic issue movement between pipelines */
export type PipelineToPipelineAutomation = Node & Timestamps & {
  readonly __typename?: 'PipelineToPipelineAutomation';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly destinationPipeline: Pipeline;
  readonly id: Scalars['ID']['output'];
  readonly sourcePipeline: Pipeline;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for PipelineToPipelineAutomation. */
export type PipelineToPipelineAutomationConnection = {
  readonly __typename?: 'PipelineToPipelineAutomationConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<PipelineToPipelineAutomationEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<PipelineToPipelineAutomation>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PipelineToPipelineAutomationEdge = {
  readonly __typename?: 'PipelineToPipelineAutomationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: PipelineToPipelineAutomation;
};

export type Priority = Timestamps & {
  readonly __typename?: 'Priority';
  readonly color: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly name: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for Priority. */
export type PriorityConnection = {
  readonly __typename?: 'PriorityConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<PriorityEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Priority>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PriorityEdge = {
  readonly __typename?: 'PriorityEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Priority;
};

export type Project = IssueProgress & Node & RoadmapItemDates & Timestamps & ViewerPermission & ZenhubEpicIssueProgress & {
  readonly __typename?: 'Project';
  readonly closedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly creator?: Maybe<ZenhubUser>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly endOn?: Maybe<Scalars['ISO8601Date']['output']>;
  /** @deprecated This field must not be used. Use zenhubEpics. */
  readonly epics: EpicConnection;
  readonly htmlBody?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly issueCountProgress?: Maybe<IssueCountProgress>;
  readonly issueEstimateProgress?: Maybe<IssueEstimateProgress>;
  readonly name: Scalars['String']['output'];
  readonly startOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly state: ProjectState;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly viewerAbilities: ProjectAbilities;
  readonly viewerPermission: PermissionLevel;
  readonly zenhubEpics: ZenhubEpicConnection;
  readonly zenhubIssueCountProgress?: Maybe<IssueCountProgress>;
  readonly zenhubIssueEstimateProgress?: Maybe<IssueEstimateProgress>;
};


export type ProjectEndOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};


export type ProjectEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<RoadmapItemOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<IssueStateFilterInput>;
};


export type ProjectStartOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};


export type ProjectZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<RoadmapItemOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<ZenhubEpicStateFilterInput>;
};

export type ProjectAbilities = {
  readonly __typename?: 'ProjectAbilities';
  readonly closeAllEpics: Scalars['Boolean']['output'];
  readonly scaleDates: Scalars['Boolean']['output'];
  readonly shiftDates: Scalars['Boolean']['output'];
};

/** The connection type for Project. */
export type ProjectConnection = {
  readonly __typename?: 'ProjectConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ProjectEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Project>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

export type ProjectDateAction =
  | 'RESET'
  | 'SCALE'
  | 'SHIFT';

/** An edge in a connection. */
export type ProjectEdge = {
  readonly __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Project;
};

export type ProjectInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
};

export type ProjectState =
  | 'CLOSED'
  | 'OPEN';

export type PullRequest = GithubTimestamps & Timestamps & {
  readonly __typename?: 'PullRequest';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly draft: Scalars['Boolean']['output'];
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly issue: Issue;
  readonly state: PullRequestState;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type PullRequestReview = GithubTimestamps & Timestamps & {
  readonly __typename?: 'PullRequestReview';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId: Scalars['Int']['output'];
  readonly ghNodeId: Scalars['ID']['output'];
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly state: PullRequestReviewState;
  readonly submittedAt: Scalars['ISO8601DateTime']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly user?: Maybe<Owner>;
};

/** The connection type for PullRequestReview. */
export type PullRequestReviewConnection = {
  readonly __typename?: 'PullRequestReviewConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<PullRequestReviewEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<PullRequestReview>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PullRequestReviewEdge = {
  readonly __typename?: 'PullRequestReviewEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: PullRequestReview;
};

export type PullRequestReviewState =
  | 'APPROVED'
  | 'CHANGES_REQUESTED'
  | 'COMMENTED'
  | 'DISMISSED';

export type PullRequestState =
  | 'CLOSED'
  | 'MERGED'
  | 'OPEN';

export type Query = {
  readonly __typename?: 'Query';
  /** Lookup an Issue by repository_gh_id or repository_id  and issue_number */
  readonly issueByInfo: Issue;
  /**
   * A concatenated list of all issues connected to any
   *            of the given issues in the passed workspace
   */
  readonly issueConnections: IssueConnection;
  readonly issues: ReadonlyArray<Issue>;
  readonly milestoneByRepoGhIdAndNumber: Milestone;
  /** Fetches an object given its ID. */
  readonly node?: Maybe<Node>;
  /** Fetches a list of objects given a list of IDs. */
  readonly nodes: ReadonlyArray<Maybe<Node>>;
  /** Lookup an Owner by GitHub database ID */
  readonly ownerByGhId?: Maybe<Owner>;
  /** Lookup an Owner by GitHub login */
  readonly ownerByLogin?: Maybe<Owner>;
  /** preview sprint config schedules */
  readonly previewSprintConfig?: Maybe<SprintConfigPreview>;
  /** User's recently viewed Workspaces */
  readonly recentlyViewedWorkspaces: WorkspaceConnection;
  /** Lookup repositories by their GitHub ID */
  readonly repositoriesByGhId: ReadonlyArray<Repository>;
  /** Search and filter closed issues per pipeline */
  readonly searchClosedIssues?: Maybe<IssueConnection>;
  /** Search and filter issues inside repository */
  readonly searchIssues?: Maybe<IssueConnection>;
  /** Search and filter issues per pipeline */
  readonly searchIssuesByPipeline?: Maybe<IssueConnection>;
  /** Search and filter issues inside zenhub epics */
  readonly searchIssuesByZenhubEpics?: Maybe<IssueConnection>;
  /** PipelineToPipelineAutomation records that are triggered when an issue moves into a Pipeline */
  readonly triggeredPipelineToPipelineAutomations: PipelineToPipelineAutomationConnection;
  /** Validate a workspace name within a zorg */
  readonly validateWorkspaceName: Scalars['Boolean']['output'];
  /** Return the current zenhub user */
  readonly viewer: ZenhubUser;
  /** Lookup Workspace by its ID */
  readonly workspace?: Maybe<Workspace>;
};


export type QueryIssueByInfoArgs = {
  issueNumber: Scalars['Int']['input'];
  repositoryGhId?: InputMaybe<Scalars['Int']['input']>;
  repositoryId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryIssueConnectionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  issueIds: ReadonlyArray<Scalars['ID']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId: Scalars['ID']['input'];
};


export type QueryIssuesArgs = {
  ids: ReadonlyArray<Scalars['ID']['input']>;
};


export type QueryMilestoneByRepoGhIdAndNumberArgs = {
  milestoneNumber: Scalars['Int']['input'];
  repositoryGhId: Scalars['Int']['input'];
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: ReadonlyArray<Scalars['ID']['input']>;
};


export type QueryOwnerByGhIdArgs = {
  ghId: Scalars['Int']['input'];
};


export type QueryOwnerByLoginArgs = {
  login: Scalars['String']['input'];
};


export type QueryPreviewSprintConfigArgs = {
  endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  endOnTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  kind?: InputMaybe<SprintConfigKind>;
  startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  startOnTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  tzIdentifier: Scalars['String']['input'];
  workspaceId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryRecentlyViewedWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  zenhubOrganizationId?: InputMaybe<Scalars['ID']['input']>;
};


export type QueryRepositoriesByGhIdArgs = {
  ghIds: ReadonlyArray<Scalars['Int']['input']>;
};


export type QuerySearchClosedIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters: IssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  workspaceId: Scalars['ID']['input'];
};


export type QuerySearchIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters: EpicAssignableIssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeClosed?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  workspaceId: Scalars['ID']['input'];
};


export type QuerySearchIssuesByPipelineArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters: IssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<IssueOrderInput>;
  pipelineId: Scalars['ID']['input'];
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySearchIssuesByZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters: ZenhubEpicIssueSearchFiltersInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};


export type QueryTriggeredPipelineToPipelineAutomationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  issue: IssueInfoInput;
  last?: InputMaybe<Scalars['Int']['input']>;
  pipelineId: Scalars['ID']['input'];
};


export type QueryValidateWorkspaceNameArgs = {
  name: Scalars['String']['input'];
  zenhubOrganizationId: Scalars['ID']['input'];
};


export type QueryWorkspaceArgs = {
  id: Scalars['ID']['input'];
};

export type Release = Node & Timestamps & ViewerPermission & {
  readonly __typename?: 'Release';
  readonly closedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly endOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly issues: IssueConnection;
  readonly issuesCount: Scalars['Int']['output'];
  readonly repositories: RepositoryConnection;
  readonly startOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly state: ReleaseState;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly viewerPermission: PermissionLevel;
};


export type ReleaseIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ReleaseRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Release. */
export type ReleaseConnection = {
  readonly __typename?: 'ReleaseConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ReleaseEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Release>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

export type ReleaseCreateInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly endOn: Scalars['ISO8601Date']['input'];
  readonly repositoryGhIds: ReadonlyArray<Scalars['Int']['input']>;
  readonly startOn: Scalars['ISO8601Date']['input'];
  readonly title: Scalars['String']['input'];
};

/** An edge in a connection. */
export type ReleaseEdge = {
  readonly __typename?: 'ReleaseEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Release;
};

export type ReleaseState =
  | 'CLOSED'
  | 'OPEN';

/** Filter by ReleaseState */
export type ReleaseStateInput = {
  readonly eq: ReleaseState;
};

export type ReleaseUpdateInput = {
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly state?: InputMaybe<ReleaseState>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated input type of RemoveAssigneesFromIssues */
export type RemoveAssigneesFromIssuesInput = {
  readonly assigneeIds: ReadonlyArray<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveAssigneesFromIssues. */
export type RemoveAssigneesFromIssuesPayload = {
  readonly __typename?: 'RemoveAssigneesFromIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of RemoveAssigneesFromZenhubEpics */
export type RemoveAssigneesFromZenhubEpicsInput = {
  readonly assigneeIds: ReadonlyArray<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveAssigneesFromZenhubEpics. */
export type RemoveAssigneesFromZenhubEpicsPayload = {
  readonly __typename?: 'RemoveAssigneesFromZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of RemoveEpicFromProject */
export type RemoveEpicFromProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epicId: Scalars['ID']['input'];
  readonly projectId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveEpicFromProject. */
export type RemoveEpicFromProjectPayload = {
  readonly __typename?: 'RemoveEpicFromProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
  readonly project: Project;
};

/** Autogenerated input type of RemoveEpicFromRoadmap */
export type RemoveEpicFromRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epicId: Scalars['ID']['input'];
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveEpicFromRoadmap. */
export type RemoveEpicFromRoadmapPayload = {
  readonly __typename?: 'RemoveEpicFromRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of RemoveEstimateSetValue */
export type RemoveEstimateSetValueInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly repositoryId?: InputMaybe<Scalars['ID']['input']>;
  readonly value: Scalars['Float']['input'];
};

/** Autogenerated return type of RemoveEstimateSetValue. */
export type RemoveEstimateSetValuePayload = {
  readonly __typename?: 'RemoveEstimateSetValuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly estimateSet: EstimateSet;
};

/** Autogenerated input type of RemoveEstimationVote */
export type RemoveEstimationVoteInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly estimationVoteId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveEstimationVote. */
export type RemoveEstimationVotePayload = {
  readonly __typename?: 'RemoveEstimationVotePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly estimationVote: EstimationVote;
};

/** Autogenerated input type of RemoveIssueInfoPriorities */
export type RemoveIssueInfoPrioritiesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issues: ReadonlyArray<IssueInfoInput>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveIssueInfoPriorities. */
export type RemoveIssueInfoPrioritiesPayload = {
  readonly __typename?: 'RemoveIssueInfoPrioritiesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineIssues: ReadonlyArray<PipelineIssue>;
};

/** Autogenerated input type of RemoveIssuesFromEpics */
export type RemoveIssuesFromEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epicIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveIssuesFromEpics. */
export type RemoveIssuesFromEpicsPayload = {
  readonly __typename?: 'RemoveIssuesFromEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epics: ReadonlyArray<Epic>;
};

/** Autogenerated input type of RemoveIssuesFromReleases */
export type RemoveIssuesFromReleasesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly releaseIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveIssuesFromReleases. */
export type RemoveIssuesFromReleasesPayload = {
  readonly __typename?: 'RemoveIssuesFromReleasesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly releases: ReadonlyArray<Release>;
};

/** Autogenerated input type of RemoveIssuesFromSprints */
export type RemoveIssuesFromSprintsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly sprintIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveIssuesFromSprints. */
export type RemoveIssuesFromSprintsPayload = {
  readonly __typename?: 'RemoveIssuesFromSprintsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly sprints: ReadonlyArray<Sprint>;
};

/** Autogenerated input type of RemoveIssuesFromZenhubEpics */
export type RemoveIssuesFromZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveIssuesFromZenhubEpics. */
export type RemoveIssuesFromZenhubEpicsPayload = {
  readonly __typename?: 'RemoveIssuesFromZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of RemoveLabelsFromIssues */
export type RemoveLabelsFromIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  /** One of two label arguments is required */
  readonly labelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  /** One of two label arguments is required */
  readonly labelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
};

/** Autogenerated return type of RemoveLabelsFromIssues. */
export type RemoveLabelsFromIssuesPayload = {
  readonly __typename?: 'RemoveLabelsFromIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly labels: ReadonlyArray<Label>;
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of RemoveMilestoneForIssues */
export type RemoveMilestoneForIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveMilestoneForIssues. */
export type RemoveMilestoneForIssuesPayload = {
  readonly __typename?: 'RemoveMilestoneForIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of RemoveProjectFromRoadmap */
export type RemoveProjectFromRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
  readonly roadmapId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveProjectFromRoadmap. */
export type RemoveProjectFromRoadmapPayload = {
  readonly __typename?: 'RemoveProjectFromRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
  readonly projectDeleted: Scalars['Boolean']['output'];
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of RemoveRepositoriesFromRelease */
export type RemoveRepositoriesFromReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly releaseId: Scalars['ID']['input'];
  readonly repositoryGhIds: ReadonlyArray<Scalars['Int']['input']>;
};

/** Autogenerated return type of RemoveRepositoriesFromRelease. */
export type RemoveRepositoriesFromReleasePayload = {
  readonly __typename?: 'RemoveRepositoriesFromReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly release: Release;
};

/** Autogenerated input type of RemoveSubIssues */
export type RemoveSubIssuesInput = {
  readonly childIssueIds: ReadonlyArray<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of RemoveSubIssues. */
export type RemoveSubIssuesPayload = {
  readonly __typename?: 'RemoveSubIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

/** Autogenerated input type of RemoveUserFromZenhubOrganization */
export type RemoveUserFromZenhubOrganizationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
  readonly zenhubUserId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveUserFromZenhubOrganization. */
export type RemoveUserFromZenhubOrganizationPayload = {
  readonly __typename?: 'RemoveUserFromZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubOrganization: ZenhubOrganization;
};

/** Autogenerated input type of RemoveWorkspaceLabelFilters */
export type RemoveWorkspaceLabelFiltersInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceLabelFiltersIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveWorkspaceLabelFilters. */
export type RemoveWorkspaceLabelFiltersPayload = {
  readonly __typename?: 'RemoveWorkspaceLabelFiltersPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  /** deleted workspace label filters */
  readonly workspaceLabelFilters: ReadonlyArray<WorkspaceLabelFilter>;
};

/** Autogenerated input type of RemoveZenhubAssigneesFromIssues */
export type RemoveZenhubAssigneesFromIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly zenhubUserIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveZenhubAssigneesFromIssues. */
export type RemoveZenhubAssigneesFromIssuesPayload = {
  readonly __typename?: 'RemoveZenhubAssigneesFromIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issues: ReadonlyArray<Issue>;
};

/** Autogenerated input type of RemoveZenhubEpicFromProject */
export type RemoveZenhubEpicFromProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveZenhubEpicFromProject. */
export type RemoveZenhubEpicFromProjectPayload = {
  readonly __typename?: 'RemoveZenhubEpicFromProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of RemoveZenhubEpicFromRoadmap */
export type RemoveZenhubEpicFromRoadmapInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly force?: InputMaybe<Scalars['Boolean']['input']>;
  readonly roadmapId: Scalars['ID']['input'];
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveZenhubEpicFromRoadmap. */
export type RemoveZenhubEpicFromRoadmapPayload = {
  readonly __typename?: 'RemoveZenhubEpicFromRoadmapPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly roadmap: Roadmap;
  readonly zenhubEpic: ZenhubEpic;
  readonly zenhubEpicDeleted: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemoveZenhubLabelsFromIssues */
export type RemoveZenhubLabelsFromIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly labelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
  readonly zenhubLabelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};

/** Autogenerated return type of RemoveZenhubLabelsFromIssues. */
export type RemoveZenhubLabelsFromIssuesPayload = {
  readonly __typename?: 'RemoveZenhubLabelsFromIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issues: ReadonlyArray<Issue>;
};

/** Autogenerated input type of RemoveZenhubLabelsFromZenhubEpics */
export type RemoveZenhubLabelsFromZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly labelInfos?: InputMaybe<ReadonlyArray<LabelInfoInput>>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly zenhubLabelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};

/** Autogenerated return type of RemoveZenhubLabelsFromZenhubEpics. */
export type RemoveZenhubLabelsFromZenhubEpicsPayload = {
  readonly __typename?: 'RemoveZenhubLabelsFromZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated input type of RemoveZenhubRepositoryFromWorkspace */
export type RemoveZenhubRepositoryFromWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly repositoryId: Scalars['ID']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveZenhubRepositoryFromWorkspace. */
export type RemoveZenhubRepositoryFromWorkspacePayload = {
  readonly __typename?: 'RemoveZenhubRepositoryFromWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of RemoveZenhubUsersFromWorkspace */
export type RemoveZenhubUsersFromWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
  readonly zenhubUserIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of RemoveZenhubUsersFromWorkspace. */
export type RemoveZenhubUsersFromWorkspacePayload = {
  readonly __typename?: 'RemoveZenhubUsersFromWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
  readonly zenhubUsers: ReadonlyArray<ZenhubUser>;
};

/** Autogenerated input type of ReopenIssues */
export type ReopenIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly pipelineId: Scalars['ID']['input'];
  readonly position: PipelineIssuePosition;
};

/** Autogenerated return type of ReopenIssues. */
export type ReopenIssuesPayload = {
  readonly __typename?: 'ReopenIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly failedIssues: ReadonlyArray<Issue>;
  readonly githubErrors: Scalars['JSON']['output'];
  readonly successCount: Scalars['Int']['output'];
};

export type Repository = GithubTimestamps & Node & Timestamps & {
  readonly __typename?: 'Repository';
  readonly assignableIssueTypes: IssueIssueTypeConnection;
  readonly assignableUsers: UserConnection;
  readonly checkIssueCounts?: Maybe<IssuesCountCheck>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly estimateSet: EstimateSet;
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId: Scalars['Int']['output'];
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
  readonly githubIssueTypes: GithubIssueTypeConnection;
  readonly id: Scalars['ID']['output'];
  readonly import: RepositoryImport;
  readonly isArchived: Scalars['Boolean']['output'];
  /** Whether the repository was favorited by the current user */
  readonly isFavorite: Scalars['Boolean']['output'];
  readonly isPrivate: Scalars['Boolean']['output'];
  readonly issueTemplates: IssueTemplateConnection;
  readonly issues: IssueConnection;
  readonly labels: LabelConnection;
  readonly milestones: MilestoneConnection;
  readonly name: Scalars['String']['output'];
  readonly owner: Owner;
  readonly ownerName: Scalars['String']['output'];
  readonly permissions: RepositoryPermission;
  readonly releases: ReleaseConnection;
  /** Defines the type of the repository - either cache of Github data or Zenhub repository */
  readonly type: RepositoryType;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  /** Only for ZenhubRepository. Returns the workspace this repository belongs to */
  readonly workspace?: Maybe<Workspace>;
  /** @deprecated Use `Repository.workspaces_connection`. */
  readonly workspaces: ReadonlyArray<Workspace>;
  readonly workspacesConnection: WorkspaceConnection;
};


export type RepositoryAssignableIssueTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId: Scalars['ID']['input'];
};


export type RepositoryAssignableUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type RepositoryGithubIssueTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepositoryIssueTemplatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepositoryIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepositoryLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepositoryMilestonesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepositoryReleasesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RepositoryWorkspacesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Repository. */
export type RepositoryConnection = {
  readonly __typename?: 'RepositoryConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<RepositoryEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Repository>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type RepositoryEdge = {
  readonly __typename?: 'RepositoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Repository;
};

export type RepositoryFavorite = Timestamps & {
  readonly __typename?: 'RepositoryFavorite';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly repository: Repository;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for RepositoryFavorite. */
export type RepositoryFavoriteConnection = {
  readonly __typename?: 'RepositoryFavoriteConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<RepositoryFavoriteEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<RepositoryFavorite>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type RepositoryFavoriteEdge = {
  readonly __typename?: 'RepositoryFavoriteEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: RepositoryFavorite;
};

/** Stores Github project import information */
export type RepositoryGithubProjectImport = {
  readonly __typename?: 'RepositoryGithubProjectImport';
  readonly ghProjectId: Scalars['String']['output'];
  readonly ghProjectName?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly pipelines: PipelineConnection;
  readonly repository: Repository;
};


/** Stores Github project import information */
export type RepositoryGithubProjectImportPipelinesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Stores information about a repository import state */
export type RepositoryImport = Timestamps & {
  readonly __typename?: 'RepositoryImport';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly resources: RepositoryImportResourceConnection;
  readonly state: RepositoryImportState;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};


/** Stores information about a repository import state */
export type RepositoryImportResourcesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type RepositoryImportResource = Timestamps & {
  readonly __typename?: 'RepositoryImportResource';
  readonly completedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly completedPages?: Maybe<Scalars['Int']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly kind: RepositoryImportResourceKind;
  readonly startedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly state: RepositoryImportResourceState;
  readonly totalPages?: Maybe<Scalars['Int']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for RepositoryImportResource. */
export type RepositoryImportResourceConnection = {
  readonly __typename?: 'RepositoryImportResourceConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<RepositoryImportResourceEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<RepositoryImportResource>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type RepositoryImportResourceEdge = {
  readonly __typename?: 'RepositoryImportResourceEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: RepositoryImportResource;
};

export type RepositoryImportResourceKind =
  | 'CLOSED_ISSUES'
  | 'OPEN_ISSUES';

export type RepositoryImportResourceState =
  | 'COMPLETED'
  | 'IN_PROGRESS'
  | 'PENDING';

export type RepositoryImportState =
  | 'COMPLETED'
  | 'IN_PROGRESS'
  | 'PENDING'
  | 'USABLE';

export type RepositoryMatch = {
  readonly __typename?: 'RepositoryMatch';
  readonly matchedRepositories: ReadonlyArray<Repository>;
  readonly workspace: Workspace;
};

export type RepositoryPermission = {
  readonly __typename?: 'RepositoryPermission';
  readonly admin: Scalars['Boolean']['output'];
  readonly pull: Scalars['Boolean']['output'];
  readonly push: Scalars['Boolean']['output'];
};

export type RepositoryType =
  | 'GithubRepository'
  | 'ZenhubRepository';

/** Autogenerated input type of ReprioritizeSubIssue */
export type ReprioritizeSubIssueInput = {
  readonly afterId?: InputMaybe<Scalars['ID']['input']>;
  readonly beforeId?: InputMaybe<Scalars['ID']['input']>;
  readonly childIssueId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly parentId: Scalars['ID']['input'];
};

/** Autogenerated return type of ReprioritizeSubIssue. */
export type ReprioritizeSubIssuePayload = {
  readonly __typename?: 'ReprioritizeSubIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly githubErrors?: Maybe<Scalars['JSON']['output']>;
  readonly success: Scalars['Boolean']['output'];
};

export type ReviewRequest = Timestamps & {
  readonly __typename?: 'ReviewRequest';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId: Scalars['Int']['output'];
  readonly ghNodeId: Scalars['ID']['output'];
  readonly id: Scalars['ID']['output'];
  readonly reviewer?: Maybe<Reviewer>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for ReviewRequest. */
export type ReviewRequestConnection = {
  readonly __typename?: 'ReviewRequestConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ReviewRequestEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ReviewRequest>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ReviewRequestEdge = {
  readonly __typename?: 'ReviewRequestEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ReviewRequest;
};

export type Reviewer = User;

export type Roadmap = Node & Timestamps & ViewerPermission & {
  readonly __typename?: 'Roadmap';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly items: RoadmapItemConnection;
  readonly keyDates?: Maybe<KeyDateConnection>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly viewerPermission: PermissionLevel;
  readonly workspace: Workspace;
};


export type RoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<RoadmapItemOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


export type RoadmapKeyDatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
};

export type RoadmapItem = Epic | Project | ZenhubEpic;

/** The connection type for RoadmapItem. */
export type RoadmapItemConnection = {
  readonly __typename?: 'RoadmapItemConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<RoadmapItemEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<RoadmapItem>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

export type RoadmapItemDates = {
  readonly endOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly startOn?: Maybe<Scalars['ISO8601Date']['output']>;
};


export type RoadmapItemDatesEndOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};


export type RoadmapItemDatesStartOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};

/** An edge in a connection. */
export type RoadmapItemEdge = {
  readonly __typename?: 'RoadmapItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node?: Maybe<RoadmapItem>;
};

export type RoadmapItemOrderField =
  /** Order by item end_on */
  | 'end_on'
  /** Order by item start_on */
  | 'start_on';

/** Sort roadmap items */
export type RoadmapItemOrderInput = {
  readonly direction: OrderDirection;
  readonly field: RoadmapItemOrderField;
};

export type RoadmapItemState =
  | 'CLOSED'
  | 'IN_PROGRESS'
  | 'OPEN'
  | 'TODO';

/** Filter for RoadmapItem state */
export type RoadmapItemStateFilterInput = {
  readonly in?: InputMaybe<ReadonlyArray<RoadmapItemState>>;
  readonly nin?: InputMaybe<ReadonlyArray<RoadmapItemState>>;
};

/** Possible roles of Zenhub users at organization */
export type Roles =
  | 'ADMIN'
  | 'EXTERNAL_READER'
  | 'EXTERNAL_WRITER'
  | 'MEMBER';

/** A set of filters saved by a user for later use */
export type SavedView = Node & {
  readonly __typename?: 'SavedView';
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
};

/** The connection type for SavedView. */
export type SavedViewConnection = {
  readonly __typename?: 'SavedViewConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<SavedViewEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<SavedView>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SavedViewEdge = {
  readonly __typename?: 'SavedViewEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: SavedView;
};

export type ScopeChange = {
  readonly __typename?: 'ScopeChange';
  readonly action: BucketIssueHistoryAction;
  readonly effectiveAt: Scalars['ISO8601DateTime']['output'];
  readonly estimateValue?: Maybe<Scalars['Float']['output']>;
  readonly issue: Issue;
};

/** The connection type for ScopeChange. */
export type ScopeChangeConnection = {
  readonly __typename?: 'ScopeChangeConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ScopeChangeEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ScopeChange>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ScopeChangeEdge = {
  readonly __typename?: 'ScopeChangeEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ScopeChange;
};

/** Autogenerated input type of SetEstimate */
export type SetEstimateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly value?: InputMaybe<Scalars['Float']['input']>;
};

/** Autogenerated return type of SetEstimate. */
export type SetEstimatePayload = {
  readonly __typename?: 'SetEstimatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
};

/** Autogenerated input type of SetEstimationVote */
export type SetEstimationVoteInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly estimationVoteId: Scalars['ID']['input'];
  readonly value?: InputMaybe<Scalars['Float']['input']>;
};

/** Autogenerated return type of SetEstimationVote. */
export type SetEstimationVotePayload = {
  readonly __typename?: 'SetEstimationVotePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly estimationVote: EstimationVote;
};

/** Autogenerated input type of SetFavoriteWorkspace */
export type SetFavoriteWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of SetFavoriteWorkspace. */
export type SetFavoriteWorkspacePayload = {
  readonly __typename?: 'SetFavoriteWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspaceFavorite: WorkspaceFavorite;
};

/** Autogenerated input type of SetIssueInfoPriorities */
export type SetIssueInfoPrioritiesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issues: ReadonlyArray<IssueInfoInput>;
  readonly priorityId: Scalars['ID']['input'];
};

/** Autogenerated return type of SetIssueInfoPriorities. */
export type SetIssueInfoPrioritiesPayload = {
  readonly __typename?: 'SetIssueInfoPrioritiesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineIssues: ReadonlyArray<PipelineIssue>;
};

/** Autogenerated input type of SetMilestoneStartDate */
export type SetMilestoneStartDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly milestoneId: Scalars['ID']['input'];
  readonly startDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
};

/** Autogenerated return type of SetMilestoneStartDate. */
export type SetMilestoneStartDatePayload = {
  readonly __typename?: 'SetMilestoneStartDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly milestone: Milestone;
};

/** Autogenerated input type of SetMultipleEstimates */
export type SetMultipleEstimatesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly value?: InputMaybe<Scalars['Float']['input']>;
};

/** Autogenerated input type of SetMultipleEstimatesOnZenhubEpics */
export type SetMultipleEstimatesOnZenhubEpicsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly value?: InputMaybe<Scalars['Float']['input']>;
  readonly zenhubEpicIds: ReadonlyArray<Scalars['ID']['input']>;
};

/** Autogenerated return type of SetMultipleEstimatesOnZenhubEpics. */
export type SetMultipleEstimatesOnZenhubEpicsPayload = {
  readonly __typename?: 'SetMultipleEstimatesOnZenhubEpicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpics: ReadonlyArray<ZenhubEpic>;
};

/** Autogenerated return type of SetMultipleEstimates. */
export type SetMultipleEstimatesPayload = {
  readonly __typename?: 'SetMultipleEstimatesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issues: ReadonlyArray<Issue>;
};

/** Autogenerated input type of SetPipelineStages */
export type SetPipelineStagesInput = {
  readonly backlogPipelineIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly completedPipelineIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly inDevelopmentPipelineIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly inReviewPipelineIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly sprintBacklogPipelineIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of SetPipelineStages. */
export type SetPipelineStagesPayload = {
  readonly __typename?: 'SetPipelineStagesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelines: ReadonlyArray<Pipeline>;
};

/** Autogenerated input type of SetPriorityOnPipelineIssues */
export type SetPriorityOnPipelineIssuesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineIssueIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly priorityId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of SetPriorityOnPipelineIssues. */
export type SetPriorityOnPipelineIssuesPayload = {
  readonly __typename?: 'SetPriorityOnPipelineIssuesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineIssues: ReadonlyArray<PipelineIssue>;
};

/** Autogenerated input type of SetPullRequestPipeline */
export type SetPullRequestPipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineId: Scalars['ID']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of SetPullRequestPipeline. */
export type SetPullRequestPipelinePayload = {
  readonly __typename?: 'SetPullRequestPipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of SetWorkspaceViewedNow */
export type SetWorkspaceViewedNowInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of SetWorkspaceViewedNow. */
export type SetWorkspaceViewedNowPayload = {
  readonly __typename?: 'SetWorkspaceViewedNowPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of SplitWorkspaceRepository */
export type SplitWorkspaceRepositoryInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly repositoryGhId: Scalars['Int']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of SplitWorkspaceRepository. */
export type SplitWorkspaceRepositoryPayload = {
  readonly __typename?: 'SplitWorkspaceRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly splitWorkspace: Workspace;
  readonly workspace: Workspace;
};

/** A summary of a sprint */
export type Sprint = Node & Timestamps & {
  readonly __typename?: 'Sprint';
  readonly closedIssuesCount: Scalars['Int']['output'];
  readonly completedPoints: Scalars['Float']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly endAt: Scalars['ISO8601DateTime']['output'];
  readonly generatedName?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly issues: IssueConnection;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly persisted: Scalars['Boolean']['output'];
  /** batching is disabled for this field */
  readonly scopeChange: ScopeChangeConnection;
  readonly sprintIssues: SprintIssueConnection;
  readonly sprintReview?: Maybe<SprintReview>;
  readonly startAt: Scalars['ISO8601DateTime']['output'];
  readonly state: SprintState;
  readonly totalPoints: Scalars['Float']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspace: Workspace;
};


/** A summary of a sprint */
export type SprintIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A summary of a sprint */
export type SprintScopeChangeArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A summary of a sprint */
export type SprintSprintIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  labelIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A configuration for recurring sprints */
export type SprintConfig = Node & Timestamps & {
  readonly __typename?: 'SprintConfig';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly endDay: SprintConfigDayOfTheWeek;
  readonly id: Scalars['ID']['output'];
  readonly kind: SprintConfigKind;
  readonly monthlyAttributes?: Maybe<SprintConfigMonthlyAttributes>;
  readonly name: Scalars['String']['output'];
  readonly period: Scalars['Int']['output'];
  readonly settings: SprintConfigSettings;
  readonly startDay: SprintConfigDayOfTheWeek;
  readonly tzIdentifier: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspace: Workspace;
};

export type SprintConfigCreateInput = {
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly endOnTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly kind?: InputMaybe<SprintConfigKind>;
  readonly name: Scalars['String']['input'];
  readonly settings: SprintConfigSettingsInput;
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly startOnTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly tzIdentifier: Scalars['String']['input'];
  readonly workspaceId: Scalars['ID']['input'];
};

export type SprintConfigDayOfTheWeek =
  | 'FRIDAY'
  | 'MONDAY'
  | 'SATURDAY'
  | 'SUNDAY'
  | 'THURSDAY'
  | 'TUESDAY'
  | 'WEDNESDAY';

export type SprintConfigInput = {
  readonly kind?: InputMaybe<SprintConfigKind>;
  readonly period?: InputMaybe<Scalars['Int']['input']>;
  readonly tzIdentifier: Scalars['String']['input'];
};

export type SprintConfigIssuesFromPipelineInput = {
  readonly enabled: Scalars['Boolean']['input'];
  readonly pipelineId?: InputMaybe<Scalars['ID']['input']>;
  readonly totalStoryPoints?: InputMaybe<Scalars['Float']['input']>;
};

export type SprintConfigKind =
  /** Monthly, calendar-aligned sprints */
  | 'monthly'
  /** Weekly cadence sprints */
  | 'weekly';

export type SprintConfigMonthlyAttributes = {
  readonly __typename?: 'SprintConfigMonthlyAttributes';
  readonly endDay: Scalars['Int']['output'];
  readonly period: Scalars['Int']['output'];
  readonly startDay: Scalars['Int']['output'];
};

export type SprintConfigPreview = {
  readonly __typename?: 'SprintConfigPreview';
  readonly periodInWeeks: Scalars['Int']['output'];
  readonly sprints: ReadonlyArray<Sprint>;
};

export type SprintConfigSettings = {
  readonly __typename?: 'SprintConfigSettings';
  readonly issuesFromPipeline: SprintConfigSettingsIssuesFromPipeline;
  readonly moveUnfinishedIssues: Scalars['Boolean']['output'];
  readonly withTime?: Maybe<Scalars['Boolean']['output']>;
};

export type SprintConfigSettingsInput = {
  readonly issuesFromPipeline: SprintConfigIssuesFromPipelineInput;
  readonly moveUnfinishedIssues: Scalars['Boolean']['input'];
};

export type SprintConfigSettingsIssuesFromPipeline = {
  readonly __typename?: 'SprintConfigSettingsIssuesFromPipeline';
  readonly enabled: Scalars['Boolean']['output'];
  readonly pipelineId?: Maybe<Scalars['ID']['output']>;
  readonly totalStoryPoints?: Maybe<Scalars['Float']['output']>;
};

export type SprintConfigUpdateInput = {
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly endOnTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly kind?: InputMaybe<SprintConfigKind>;
  readonly name: Scalars['String']['input'];
  readonly settings: SprintConfigSettingsInput;
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly startOnTime?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly tzIdentifier?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** The connection type for Sprint. */
export type SprintConnection = {
  readonly __typename?: 'SprintConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<SprintEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Sprint>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SprintEdge = {
  readonly __typename?: 'SprintEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Sprint;
};

export type SprintFiltersInput = {
  readonly id?: InputMaybe<SprintIdInput>;
  readonly state?: InputMaybe<SprintStateInput>;
};

/** Filter sprint ID column */
export type SprintIdInput = {
  readonly in?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly notInAny?: InputMaybe<Scalars['Boolean']['input']>;
  readonly specialFilters?: InputMaybe<SprintSpecialFilter>;
};

export type SprintIssue = Node & Timestamps & {
  readonly __typename?: 'SprintIssue';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly issue: Issue;
  readonly sprint: Sprint;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for SprintIssue. */
export type SprintIssueConnection = {
  readonly __typename?: 'SprintIssueConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<SprintIssueEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<SprintIssue>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SprintIssueEdge = {
  readonly __typename?: 'SprintIssueEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: SprintIssue;
};

export type SprintIssueOrderField =
  | 'SPRINT_END_AT';

/** Order of Sprint Issue connection */
export type SprintIssueOrderInput = {
  readonly direction?: InputMaybe<OrderDirection>;
  readonly field?: InputMaybe<SprintIssueOrderField>;
};

export type SprintOrderField =
  | 'END_AT'
  | 'START_AT';

/** Order of Sprint connection */
export type SprintOrderInput = {
  readonly direction?: InputMaybe<OrderDirection>;
  readonly field?: InputMaybe<SprintOrderField>;
};

/** A sprint review */
export type SprintReview = Node & Timestamps & {
  readonly __typename?: 'SprintReview';
  readonly body?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly htmlBody?: Maybe<Scalars['String']['output']>;
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
  readonly initiatedBy?: Maybe<ZenhubUser>;
  readonly issuesClosedAfterSprintReview: IssueConnection;
  readonly language?: Maybe<Scalars['String']['output']>;
  readonly lastGeneratedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly manuallyEdited: Scalars['Boolean']['output'];
  readonly sprint: Sprint;
  readonly sprintReviewFeatures: SprintReviewFeatureConnection;
  readonly sprintReviewSchedules: SprintReviewScheduleConnection;
  readonly state: SprintReviewState;
  readonly title?: Maybe<Scalars['String']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};


/** A sprint review */
export type SprintReviewIssuesClosedAfterSprintReviewArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A sprint review */
export type SprintReviewSprintReviewFeaturesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A sprint review */
export type SprintReviewSprintReviewSchedulesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** A sprint review feature type */
export type SprintReviewFeature = Node & Timestamps & {
  readonly __typename?: 'SprintReviewFeature';
  readonly aiGeneratedIssues: IssueConnection;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
  readonly manuallyAddedIssues: IssueConnection;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};


/** A sprint review feature type */
export type SprintReviewFeatureAiGeneratedIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** A sprint review feature type */
export type SprintReviewFeatureManuallyAddedIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for SprintReviewFeature. */
export type SprintReviewFeatureConnection = {
  readonly __typename?: 'SprintReviewFeatureConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<SprintReviewFeatureEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<SprintReviewFeature>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SprintReviewFeatureEdge = {
  readonly __typename?: 'SprintReviewFeatureEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: SprintReviewFeature;
};

/** A sprint review schedule */
export type SprintReviewSchedule = Node & Timestamps & {
  readonly __typename?: 'SprintReviewSchedule';
  readonly completedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
  readonly startAt: Scalars['ISO8601DateTime']['output'];
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for SprintReviewSchedule. */
export type SprintReviewScheduleConnection = {
  readonly __typename?: 'SprintReviewScheduleConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<SprintReviewScheduleEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<SprintReviewSchedule>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SprintReviewScheduleEdge = {
  readonly __typename?: 'SprintReviewScheduleEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: SprintReviewSchedule;
};

export type SprintReviewState =
  | 'COMPLETED'
  | 'INITIAL'
  | 'IN_PROGRESS';

export type SprintSpecialFilter =
  /** Current sprint */
  | 'current_sprint';

export type SprintState =
  | 'CLOSED'
  | 'OPEN';

/** Filter by SprintState */
export type SprintStateInput = {
  readonly eq: SprintState;
};

export type StrategicIssueSearchItem = GithubTimestamps & Timestamps & ViewerPermission & {
  readonly __typename?: 'StrategicIssueSearchItem';
  /** @deprecated Use `issue` field instead */
  readonly assignees: UserConnection;
  /** @deprecated Use `issue` field instead */
  readonly closedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  /** Delivery risk status */
  readonly deliveryRiskStatus?: Maybe<DeliveryRiskStatus>;
  /** @deprecated Use `issue` field instead */
  readonly estimate?: Maybe<Estimate>;
  readonly ghCreatedAt: Scalars['ISO8601DateTime']['output'];
  /** @deprecated Use `issue` field instead */
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use `issue` field instead */
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly ghUpdatedAt: Scalars['ISO8601DateTime']['output'];
  /**
   * Parent issue of this Issue.
   * @deprecated Use `parentIssue` instead
   */
  readonly githubParentIssue?: Maybe<Issue>;
  /** Indicates whether this search item has nested issues that match the query */
  readonly hasMatchingChildren?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Use `issue` field instead */
  readonly htmlUrl: Scalars['String']['output'];
  readonly id: Scalars['ID']['output'];
  /** Indicates whether this search item matched the query */
  readonly isMatch: Scalars['Boolean']['output'];
  /** Issue object */
  readonly issue: Issue;
  /** @deprecated Use `issue` field instead */
  readonly issueType?: Maybe<IssueIssueType>;
  /** @deprecated Use `issue` field instead */
  readonly keyDates?: Maybe<KeyDateConnection>;
  /** @deprecated Use `issue` field instead */
  readonly labels: LabelConnection;
  /** @deprecated Use `issue` field instead */
  readonly milestone?: Maybe<Milestone>;
  /** @deprecated Use `issue` field instead */
  readonly number: Scalars['Int']['output'];
  /**
   * Parent issue of this Issue (Github or Zenhub)
   * @deprecated Use `issue` field instead
   */
  readonly parentIssue?: Maybe<Issue>;
  /** Predicted end date */
  readonly predictedEndOn?: Maybe<Scalars['ISO8601DateTime']['output']>;
  /** @deprecated Use `issue` field instead */
  readonly pullRequest: Scalars['Boolean']['output'];
  /** @deprecated Use `issue` field instead */
  readonly pullRequestObject?: Maybe<PullRequest>;
  /** @deprecated Use `issue` field instead */
  readonly repository: Repository;
  /** @deprecated Use `issue` field instead */
  readonly state: IssueState;
  /** @deprecated Use `issue` field instead */
  readonly title: Scalars['String']['output'];
  /**
   * Github or Zebhub issue
   * @deprecated Use `issue` field instead
   */
  readonly type: IssueType;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  /**
   * Issue creator; Only available for GitHub Issues
   * @deprecated Use `issue` field instead
   */
  readonly user: Owner;
  readonly viewerPermission: PermissionLevel;
  /** @deprecated Use `issue` field instead */
  readonly zenhubAssignees: ZenhubUserConnection;
  /** @deprecated Use `issue` field instead */
  readonly zenhubLabels: ZenhubLabelConnection;
  /** @deprecated Use `issue` field instead */
  readonly zorgMetadata?: Maybe<ZorgIssueMetadata>;
};


export type StrategicIssueSearchItemAssigneesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type StrategicIssueSearchItemKeyDatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
};


export type StrategicIssueSearchItemLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type StrategicIssueSearchItemZenhubAssigneesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type StrategicIssueSearchItemZenhubLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type StrategicIssueSearchItemZorgMetadataArgs = {
  workspaceId?: InputMaybe<Scalars['ID']['input']>;
  zenhubOrganizationId?: InputMaybe<Scalars['ID']['input']>;
};

/** The connection type for StrategicIssueSearchItem. */
export type StrategicIssueSearchItemConnection = {
  readonly __typename?: 'StrategicIssueSearchItemConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<StrategicIssueSearchItemEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<StrategicIssueSearchItem>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type StrategicIssueSearchItemEdge = {
  readonly __typename?: 'StrategicIssueSearchItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: StrategicIssueSearchItem;
};

export type StrategicIssuesFiltersInput = {
  /** Filter by delivery risk */
  readonly deliveryRisk?: InputMaybe<DeliveryRiskFilterInput>;
  /** Filter by issue type names */
  readonly issueIssueTypes?: InputMaybe<IssueIssueTypeFiltersInput>;
  /** Filter by issue type level range */
  readonly issueIssueTypesLevelRange?: InputMaybe<IssueIssueTypeLevelRangeInput>;
  /** Filter by label names */
  readonly labels?: InputMaybe<StringInput>;
};

export type StrategicIssuesOrderField =
  | 'ASSIGNEE_LOGIN'
  | 'CREATED_AT'
  | 'END_ON'
  | 'MANUAL'
  | 'START_ON'
  | 'TITLE'
  | 'UPDATED_AT';

/** Order of strategic issues search results */
export type StrategicIssuesOrderInput = {
  readonly direction: OrderDirection;
  readonly field: StrategicIssuesOrderField;
};

/** Filter a String column */
export type StringInput = {
  readonly in?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly nin?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  readonly notInAny?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Activity feed item */
export type TimelineItem = Timestamps & {
  readonly __typename?: 'TimelineItem';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly data?: Maybe<Scalars['JSON']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly key: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for TimelineItem. */
export type TimelineItemConnection = {
  readonly __typename?: 'TimelineItemConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<TimelineItemEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<TimelineItem>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type TimelineItemEdge = {
  readonly __typename?: 'TimelineItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: TimelineItem;
};

export type Timestamps = {
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Unassignable = {
  readonly __typename?: 'Unassignable';
  readonly assignee: User;
  readonly issues: ReadonlyArray<Issue>;
};

/** Autogenerated input type of UpdateComment */
export type UpdateCommentInput = {
  readonly body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly commentId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateComment. */
export type UpdateCommentPayload = {
  readonly __typename?: 'UpdateCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateEpicDates */
export type UpdateEpicDatesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly epicId: Scalars['ID']['input'];
  readonly roadmapId?: InputMaybe<Scalars['ID']['input']>;
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
};

/** Autogenerated return type of UpdateEpicDates. */
export type UpdateEpicDatesPayload = {
  readonly __typename?: 'UpdateEpicDatesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
};

/** Autogenerated input type of UpdateEpicIssuesByIssueInfos */
export type UpdateEpicIssuesByIssueInfosInput = {
  readonly addIssues: ReadonlyArray<IssueInfoInput>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly epic: IssueInfoInput;
  readonly removeIssues: ReadonlyArray<IssueInfoInput>;
};

/** Autogenerated return type of UpdateEpicIssuesByIssueInfos. */
export type UpdateEpicIssuesByIssueInfosPayload = {
  readonly __typename?: 'UpdateEpicIssuesByIssueInfosPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly epic: Epic;
  readonly issuesAdded: ReadonlyArray<Maybe<Issue>>;
  readonly issuesRemoved: ReadonlyArray<Maybe<Issue>>;
};

/** Autogenerated input type of UpdateIssue */
export type UpdateIssueInput = {
  readonly aiMetadata?: InputMaybe<AiMetadataInput>;
  readonly body?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly issueId: Scalars['ID']['input'];
  readonly milestoneId?: InputMaybe<Scalars['ID']['input']>;
  readonly state?: InputMaybe<IssueState>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly zorgMetadata?: InputMaybe<ZorgIssueMetadataInput>;
};

/** Autogenerated input type of UpdateIssueKeyDate */
export type UpdateIssueKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateIssueKeyDate. */
export type UpdateIssueKeyDatePayload = {
  readonly __typename?: 'UpdateIssueKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
  readonly keyDate: KeyDate;
};

/** Autogenerated return type of UpdateIssue. */
export type UpdateIssuePayload = {
  readonly __typename?: 'UpdateIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly issue: Issue;
};

/** Autogenerated input type of UpdateMilestone */
export type UpdateMilestoneInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly dueOn?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly ignoreInaccessible?: InputMaybe<Scalars['Boolean']['input']>;
  readonly milestoneId?: InputMaybe<Scalars['ID']['input']>;
  readonly startDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  readonly state?: InputMaybe<MilestoneState>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly updateAllInWorkspaceId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of UpdateMilestone. */
export type UpdateMilestonePayload = {
  readonly __typename?: 'UpdateMilestonePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly milestone: Milestone;
};

/** Autogenerated input type of UpdatePipelineAutomation */
export type UpdatePipelineAutomationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Possible values: for labels: { labels: [{ name:, color:}, { name:, color:}] }. For assignees: { assignees: [user1_eid, user2_eid] }. To remove all assignees pass empty array { assignees: [] }. For sprints: { sprints: [sprint1_eid, sprint2_eid] }. For epics: { epics: [epic1_eid, epic2_eid] }. For zenhub epics: { zenhubEpics: [epic1_eid, epic2_eid] }. For relative sprints: { relativeSprints: [0, 1, 2] }, where numbers are index of sprints from the current sprint. To remove all sprints pass empty array { relativeSprints: [] }. for pipelines: { pipelines: [pipeline1_eid, pipeline2_eid] } */
  readonly elementDetails?: InputMaybe<Scalars['JSON']['input']>;
  readonly pipelineAutomationId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdatePipelineAutomation. */
export type UpdatePipelineAutomationPayload = {
  readonly __typename?: 'UpdatePipelineAutomationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineAutomation: PipelineAutomation;
};

/** Autogenerated input type of UpdatePipelineConfiguration */
export type UpdatePipelineConfigurationInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineId: Scalars['ID']['input'];
  readonly staleInterval?: InputMaybe<Scalars['Int']['input']>;
  readonly staleIssues?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UpdatePipelineConfiguration. */
export type UpdatePipelineConfigurationPayload = {
  readonly __typename?: 'UpdatePipelineConfigurationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipelineConfiguration: PipelineConfiguration;
};

/** Autogenerated input type of UpdatePipeline */
export type UpdatePipelineInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly pipelineId: Scalars['ID']['input'];
  readonly position?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of UpdatePipeline. */
export type UpdatePipelinePayload = {
  readonly __typename?: 'UpdatePipelinePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly pipeline: Pipeline;
};

/** Autogenerated input type of UpdateProjectDates */
export type UpdateProjectDatesInput = {
  readonly action: ProjectDateAction;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly projectId: Scalars['ID']['input'];
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
};

/** Autogenerated return type of UpdateProjectDates. */
export type UpdateProjectDatesPayload = {
  readonly __typename?: 'UpdateProjectDatesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
};

/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateProject. */
export type UpdateProjectPayload = {
  readonly __typename?: 'UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
};

/** Autogenerated input type of UpdateProjectState */
export type UpdateProjectStateInput = {
  readonly applyToEpics?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly projectId: Scalars['ID']['input'];
  readonly state: ProjectState;
};

/** Autogenerated return type of UpdateProjectState. */
export type UpdateProjectStatePayload = {
  readonly __typename?: 'UpdateProjectStatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly project: Project;
};

/** Autogenerated input type of UpdateRelease */
export type UpdateReleaseInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly release: ReleaseUpdateInput;
  readonly releaseId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateRelease. */
export type UpdateReleasePayload = {
  readonly __typename?: 'UpdateReleasePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly release: Release;
};

/** Autogenerated input type of UpdateRoadmapKeyDate */
export type UpdateRoadmapKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateRoadmapKeyDate. */
export type UpdateRoadmapKeyDatePayload = {
  readonly __typename?: 'UpdateRoadmapKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly roadmap: Roadmap;
};

/** Autogenerated input type of UpdateSavedView */
export type UpdateSavedViewInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** A full new set of filters */
  readonly filters?: InputMaybe<IssueSearchFiltersInput>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly savedViewId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateSavedView. */
export type UpdateSavedViewPayload = {
  readonly __typename?: 'UpdateSavedViewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly savedView: SavedView;
};

/** Autogenerated input type of UpdateSprintConfig */
export type UpdateSprintConfigInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly sprintConfig: SprintConfigUpdateInput;
};

/** Autogenerated return type of UpdateSprintConfig. */
export type UpdateSprintConfigPayload = {
  readonly __typename?: 'UpdateSprintConfigPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly sprintConfig: SprintConfig;
};

/** Autogenerated input type of UpdateSprint */
export type UpdateSprintInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly sprintId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateSprint. */
export type UpdateSprintPayload = {
  readonly __typename?: 'UpdateSprintPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly sprint: Sprint;
};

/** Autogenerated input type of UpdateTimelineKeyDate */
export type UpdateTimelineKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly color?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateTimelineKeyDate. */
export type UpdateTimelineKeyDatePayload = {
  readonly __typename?: 'UpdateTimelineKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly workspace: Workspace;
};

/** Autogenerated input type of UpdateUserPermissions */
export type UpdateUserPermissionsInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly role: Scalars['String']['input'];
  readonly zenhubOrganizationId: Scalars['ID']['input'];
  readonly zenhubUserId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateUserPermissions. */
export type UpdateUserPermissionsPayload = {
  readonly __typename?: 'UpdateUserPermissionsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  /** @deprecated Replaced with a new type */
  readonly role: Roles;
  readonly zenhubOrgUser: ZenhubUserAtOrganization;
};

/** Autogenerated input type of UpdateWorkspace */
export type UpdateWorkspaceInput = {
  readonly areUploadedFilesPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  readonly assumeEstimates?: InputMaybe<Scalars['Boolean']['input']>;
  readonly assumedEstimateValue?: InputMaybe<Scalars['Int']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly defaultRepositoryGhId?: InputMaybe<Scalars['Int']['input']>;
  readonly description?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
  readonly private?: InputMaybe<Scalars['Boolean']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateWorkspace. */
export type UpdateWorkspacePayload = {
  readonly __typename?: 'UpdateWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of UpdateWorkspaceZenhubUserRole */
export type UpdateWorkspaceZenhubUserRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly workspaceId: Scalars['ID']['input'];
  readonly workspaceUserRoles: ReadonlyArray<WorkspaceRoleInput>;
};

/** Autogenerated return type of UpdateWorkspaceZenhubUserRole. */
export type UpdateWorkspaceZenhubUserRolePayload = {
  readonly __typename?: 'UpdateWorkspaceZenhubUserRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly workspace: Workspace;
};

/** Autogenerated input type of UpdateZenhubEpicDates */
export type UpdateZenhubEpicDatesInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateZenhubEpicDates. */
export type UpdateZenhubEpicDatesPayload = {
  readonly __typename?: 'UpdateZenhubEpicDatesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of UpdateZenhubEpic */
export type UpdateZenhubEpicInput = {
  readonly aiMetadata?: InputMaybe<AiMetadataInput>;
  readonly body?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly title?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated input type of UpdateZenhubEpicKeyDate */
export type UpdateZenhubEpicKeyDateInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly date: Scalars['ISO8601Date']['input'];
  readonly description: Scalars['String']['input'];
  readonly keyDateId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateZenhubEpicKeyDate. */
export type UpdateZenhubEpicKeyDatePayload = {
  readonly __typename?: 'UpdateZenhubEpicKeyDatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly keyDate: KeyDate;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated return type of UpdateZenhubEpic. */
export type UpdateZenhubEpicPayload = {
  readonly __typename?: 'UpdateZenhubEpicPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of UpdateZenhubEpicState */
export type UpdateZenhubEpicStateInput = {
  readonly applyToIssues?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly state: ZenhubEpicState;
  readonly zenhubEpicId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateZenhubEpicState. */
export type UpdateZenhubEpicStatePayload = {
  readonly __typename?: 'UpdateZenhubEpicStatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubEpic: ZenhubEpic;
};

/** Autogenerated input type of UpdateZenhubOrganization */
export type UpdateZenhubOrganizationInput = {
  readonly address?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly defaultPaymentMethod?: InputMaybe<Scalars['String']['input']>;
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly nameOnInvoice?: InputMaybe<Scalars['String']['input']>;
  readonly taxId?: InputMaybe<Scalars['String']['input']>;
  /** TAX_TYPES id (i.e. eu_vat>austria) */
  readonly taxTypeId?: InputMaybe<Scalars['String']['input']>;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateZenhubOrganization. */
export type UpdateZenhubOrganizationPayload = {
  readonly __typename?: 'UpdateZenhubOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']['output']>;
  readonly zenhubOrganization: ZenhubOrganization;
};

/** Cache of Github user information. Is inherited from OwnerType. */
export type User = Owner & Timestamps & {
  readonly __typename?: 'User';
  readonly avatarUrl: Scalars['String']['output'];
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly ghId?: Maybe<Scalars['Int']['output']>;
  readonly ghNodeId?: Maybe<Scalars['ID']['output']>;
  readonly hasWorkspace: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  readonly login: Scalars['String']['output'];
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly projects: ProjectConnection;
  /** Repositories favorited by this github user */
  readonly repositoryFavorites: RepositoryFavoriteConnection;
  readonly roadmapItems: RoadmapItemConnection;
  readonly searchWorkspaces: WorkspaceSearchMatchConnection;
  readonly type: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
  readonly zenhubUser?: Maybe<ZenhubUser>;
};


/** Cache of Github user information. Is inherited from OwnerType. */
export type UserProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Cache of Github user information. Is inherited from OwnerType. */
export type UserRepositoryFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** Cache of Github user information. Is inherited from OwnerType. */
export type UserRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


/** Cache of Github user information. Is inherited from OwnerType. */
export type UserSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


/** Cache of Github user information. Is inherited from OwnerType. */
export type UserWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for User. */
export type UserConnection = {
  readonly __typename?: 'UserConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<UserEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<User>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserEdge = {
  readonly __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: User;
};

export type VelocityDiff = {
  readonly __typename?: 'VelocityDiff';
  readonly difference?: Maybe<Scalars['Float']['output']>;
  readonly sprintsCount: Scalars['Int']['output'];
  readonly velocity: Scalars['Float']['output'];
};

export type ViewerPermission = {
  readonly viewerPermission: PermissionLevel;
};

/** Represents a WIP Limit for a Pipeline */
export type WipLimit = {
  readonly __typename?: 'WipLimit';
  readonly blockPipeline: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  /** This should follow the format {limitType: limitValue} */
  readonly limitValue: Scalars['JSON']['output'];
};

/** The connection type for WipLimit. */
export type WipLimitConnection = {
  readonly __typename?: 'WipLimitConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<WipLimitEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<WipLimit>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type WipLimitEdge = {
  readonly __typename?: 'WipLimitEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: WipLimit;
};

export type Workspace = Timestamps & ViewerPermission & {
  readonly __typename?: 'Workspace';
  readonly activeSprint?: Maybe<Sprint>;
  readonly areUploadedFilesPrivate: Scalars['Boolean']['output'];
  readonly assignees?: Maybe<UserConnection>;
  readonly assumeEstimates: Scalars['Boolean']['output'];
  /** When null, a dynamic calculated value is used as the assumed estimate */
  readonly assumedEstimateValue?: Maybe<Scalars['Int']['output']>;
  readonly authors?: Maybe<UserConnection>;
  /** Average velocity of recently(last 3) closed sprints */
  readonly averageSprintVelocity?: Maybe<Scalars['Float']['output']>;
  /** Average velocity of recently closed sprints with last sprint influence */
  readonly averageSprintVelocityWithDiff?: Maybe<VelocityDiff>;
  /** Only for querying control chart */
  readonly closedPipeline: Pipeline;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly creator?: Maybe<ZenhubUser>;
  readonly defaultRepository?: Maybe<Repository>;
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly displayName: Scalars['String']['output'];
  /** @deprecated This field must not be used. Use zenhubEpics. */
  readonly epics?: Maybe<EpicConnection>;
  readonly hasEstimatedIssues: Scalars['Boolean']['output'];
  readonly id: Scalars['ID']['output'];
  /** The state of the workspace during repositories import process */
  readonly importState: WorkspaceImportState;
  readonly isDeletable: Scalars['Boolean']['output'];
  readonly isEditable: Scalars['Boolean']['output'];
  readonly isFavorite: Scalars['Boolean']['output'];
  readonly issueAssigneeOptions?: Maybe<IssueUserOptionConnection>;
  readonly issueAuthorOptions?: Maybe<IssueUserOptionConnection>;
  /** Returns the issue dependencies from all the repositories of the workspace. Optionally, the result can be filtered by repository. */
  readonly issueDependencies?: Maybe<IssueDependencyConnection>;
  readonly issueFlowStats?: Maybe<IssueFlowStats>;
  readonly issueLabelOptions?: Maybe<IssueLabelOptionConnection>;
  readonly issues?: Maybe<IssueConnection>;
  /** Only show issues with these labels by default */
  readonly labelFilters: WorkspaceLabelFilterConnection;
  readonly milestoneFilterOptions?: Maybe<MilestoneConnection>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly pipelineToPipelineAutomations: PipelineToPipelineAutomationConnection;
  /** @deprecated Use `Workspace.pipelines_connection`. */
  readonly pipelines: ReadonlyArray<Pipeline>;
  readonly pipelinesConnection: PipelineConnection;
  readonly previousSprint?: Maybe<Sprint>;
  /** @deprecated Use `Workspace.priorities_connection`. */
  readonly priorities: ReadonlyArray<Priority>;
  readonly prioritiesConnection: PriorityConnection;
  readonly private: Scalars['Boolean']['output'];
  readonly projects: ProjectConnection;
  /** Workspaces that share at least one repository */
  readonly relatedWorkspaces: WorkspaceConnection;
  readonly releases: ReleaseConnection;
  /** @deprecated Use `Workspace.repositories_connection`. */
  readonly repositories?: Maybe<ReadonlyArray<Repository>>;
  readonly repositoriesConnection?: Maybe<RepositoryConnection>;
  readonly repositoryGithubProjectImport?: Maybe<RepositoryGithubProjectImport>;
  readonly roadmap: Roadmap;
  /** Filter sets saved by the current user */
  readonly savedViews: SavedViewConnection;
  readonly sharedZenhubRepositories: RepositoryConnection;
  readonly sprintConfig?: Maybe<SprintConfig>;
  readonly sprints: SprintConnection;
  readonly timelineKeyDates?: Maybe<KeyDateConnection>;
  readonly upcomingSprint?: Maybe<Sprint>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly viewerPermission: PermissionLevel;
  readonly workspaceRepositories: WorkspaceRepositoryConnection;
  readonly zenhubEpics?: Maybe<ZenhubEpicConnection>;
  readonly zenhubIssueByNumber?: Maybe<Issue>;
  readonly zenhubLabels?: Maybe<ZenhubLabelConnection>;
  readonly zenhubOrganization: ZenhubOrganization;
  readonly zenhubOwner?: Maybe<ZenhubIdentity>;
  readonly zenhubRepository?: Maybe<Repository>;
  readonly zenhubUsers: ZenhubUserConnection;
};


export type WorkspaceAssigneesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  login?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


export type WorkspaceAuthorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  login?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};


export type WorkspaceAverageSprintVelocityWithDiffArgs = {
  skipDiff?: InputMaybe<Scalars['Boolean']['input']>;
};


export type WorkspaceEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EpicOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  state?: InputMaybe<IssueStateInput>;
};


export type WorkspaceIssueAssigneeOptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<StringInput>;
  inUse?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  logins?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};


export type WorkspaceIssueAuthorOptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<StringInput>;
  last?: InputMaybe<Scalars['Int']['input']>;
  logins?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};


export type WorkspaceIssueDependenciesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};


export type WorkspaceIssueFlowStatsArgs = {
  daysInCycle?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceIssueLabelOptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  inUse?: InputMaybe<Scalars['Boolean']['input']>;
  includeWorkspaceLabels?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<StringInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};


export type WorkspaceIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  issueTypes?: InputMaybe<StringInput>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<IssueOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};


export type WorkspaceLabelFiltersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceMilestoneFilterOptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ignoreRepositoryPermissions?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryGhIds?: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  state?: InputMaybe<MilestoneState>;
  title?: InputMaybe<StringInput>;
};


export type WorkspacePipelineToPipelineAutomationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspacePipelinesArgs = {
  includeClosed?: InputMaybe<Scalars['Boolean']['input']>;
};


export type WorkspacePipelinesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspacePrioritiesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type WorkspaceRelatedWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceReleasesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  ids?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  state?: InputMaybe<ReleaseStateInput>;
};


export type WorkspaceRepositoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceSavedViewsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type WorkspaceSharedZenhubRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceSprintsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<SprintFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<SprintOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type WorkspaceTimelineKeyDatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
};


export type WorkspaceWorkspaceRepositoriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WorkspaceZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<ZenhubEpicFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ZenhubEpicOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type WorkspaceZenhubIssueByNumberArgs = {
  number: Scalars['Int']['input'];
};


export type WorkspaceZenhubLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type WorkspaceZenhubUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<ZenhubUsersFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};

export type WorkspaceConfigInput = {
  readonly pipelines?: InputMaybe<ReadonlyArray<PipelineConfigInput>>;
  readonly sprintConfig?: InputMaybe<SprintConfigInput>;
};

/** The connection type for Workspace. */
export type WorkspaceConnection = {
  readonly __typename?: 'WorkspaceConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<WorkspaceEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<Workspace>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type WorkspaceEdge = {
  readonly __typename?: 'WorkspaceEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: Workspace;
};

/** A favorited workspace */
export type WorkspaceFavorite = Timestamps & {
  readonly __typename?: 'WorkspaceFavorite';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspace: Workspace;
};

/** The connection type for WorkspaceFavorite. */
export type WorkspaceFavoriteConnection = {
  readonly __typename?: 'WorkspaceFavoriteConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<WorkspaceFavoriteEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<WorkspaceFavorite>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type WorkspaceFavoriteEdge = {
  readonly __typename?: 'WorkspaceFavoriteEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: WorkspaceFavorite;
};

export type WorkspaceImportState =
  | 'COMPLETED'
  | 'IN_PROGRESS'
  | 'PENDING'
  | 'USABLE';

export type WorkspaceLabelFilter = {
  readonly __typename?: 'WorkspaceLabelFilter';
  readonly id: Scalars['ID']['output'];
  readonly labelName: Scalars['String']['output'];
  readonly workspace: Workspace;
  readonly zenhubLabel?: Maybe<ZenhubLabel>;
};

/** The connection type for WorkspaceLabelFilter. */
export type WorkspaceLabelFilterConnection = {
  readonly __typename?: 'WorkspaceLabelFilterConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<WorkspaceLabelFilterEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<WorkspaceLabelFilter>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type WorkspaceLabelFilterEdge = {
  readonly __typename?: 'WorkspaceLabelFilterEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: WorkspaceLabelFilter;
};

export type WorkspaceMatch = {
  readonly __typename?: 'WorkspaceMatch';
  readonly workspace: Workspace;
};

/** Order of Workspace connection */
export type WorkspaceOrderInput = {
  readonly direction?: InputMaybe<OrderDirection>;
};

/** A connection between a workspace and a repository */
export type WorkspaceRepository = Timestamps & {
  readonly __typename?: 'WorkspaceRepository';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly readModeEnabled: Scalars['Boolean']['output'];
  readonly repository: Repository;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspace: Workspace;
};

/** The connection type for WorkspaceRepository. */
export type WorkspaceRepositoryConnection = {
  readonly __typename?: 'WorkspaceRepositoryConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<WorkspaceRepositoryEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<WorkspaceRepository>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type WorkspaceRepositoryEdge = {
  readonly __typename?: 'WorkspaceRepositoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: WorkspaceRepository;
};

export type WorkspaceRoleInput = {
  readonly zenhubUserId: Scalars['ID']['input'];
};

export type WorkspaceSearchMatch = RepositoryMatch | WorkspaceMatch;

/** The connection type for WorkspaceSearchMatch. */
export type WorkspaceSearchMatchConnection = {
  readonly __typename?: 'WorkspaceSearchMatchConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<WorkspaceSearchMatchEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<WorkspaceSearchMatch>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type WorkspaceSearchMatchEdge = {
  readonly __typename?: 'WorkspaceSearchMatchEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node?: Maybe<WorkspaceSearchMatch>;
};

export type WorkspaceSharedZenhubRepository = Timestamps & {
  readonly __typename?: 'WorkspaceSharedZenhubRepository';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly id: Scalars['ID']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspace: Workspace;
  readonly zenhubRepository: Repository;
};

/** New epics entity */
export type ZenhubEpic = ActivityFeedField & Node & RoadmapItemDates & Timestamps & ViewerPermission & ZenhubEpicIssueProgress & {
  readonly __typename?: 'ZenhubEpic';
  readonly activityFeed?: Maybe<ActivityFeedConnection>;
  readonly assignees: ZenhubUserConnection;
  /** Dependencies that are blocked by this zenhub_epic */
  readonly blockedItems: IssueDependencyItemConnection;
  /** Dependencies that are blocking this zenhub_epic */
  readonly blockingItems: IssueDependencyItemConnection;
  readonly body?: Maybe<Scalars['String']['output']>;
  readonly childIssues: IssueConnection;
  readonly comments: CommentConnection;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly creator?: Maybe<ZenhubUser>;
  readonly endOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly estimate?: Maybe<Estimate>;
  readonly htmlBody?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly keyDates: KeyDateConnection;
  readonly labels: LabelConnection;
  readonly oldIssue?: Maybe<Issue>;
  readonly project?: Maybe<Project>;
  /** Dependencies that are related to this zenhub_epic */
  readonly relatedItems: IssueDependencyItemConnection;
  readonly startOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly state: ZenhubEpicState;
  readonly title: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly viewerPermission: PermissionLevel;
  readonly zenhubIssueCountProgress?: Maybe<IssueCountProgress>;
  readonly zenhubIssueEstimateProgress?: Maybe<IssueEstimateProgress>;
  readonly zenhubOrganization: ZenhubOrganization;
};


/** New epics entity */
export type ZenhubEpicActivityFeedArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skipTimelineItems?: InputMaybe<Scalars['Boolean']['input']>;
};


/** New epics entity */
export type ZenhubEpicAssigneesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicBlockedItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicBlockingItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicChildIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId: Scalars['ID']['input'];
};


/** New epics entity */
export type ZenhubEpicCommentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicEndOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};


/** New epics entity */
export type ZenhubEpicKeyDatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicRelatedItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<IssueDependencyItemFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** New epics entity */
export type ZenhubEpicStartOnArgs = {
  roadmapId?: InputMaybe<Scalars['ID']['input']>;
};

/** The connection type for ZenhubEpic. */
export type ZenhubEpicConnection = {
  readonly __typename?: 'ZenhubEpicConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ZenhubEpicEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ZenhubEpic>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ZenhubEpicEdge = {
  readonly __typename?: 'ZenhubEpicEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ZenhubEpic;
};

/** Filters for ZenhubEpic connection */
export type ZenhubEpicFiltersInput = {
  readonly assigneeIds?: InputMaybe<IdInput>;
  readonly estimateValues?: InputMaybe<FloatInput>;
  readonly id?: InputMaybe<IdInput>;
  readonly labelIds?: InputMaybe<IdInput>;
  readonly matchType?: InputMaybe<MatchingFilter>;
  readonly projectIds?: InputMaybe<IdInput>;
  readonly state?: InputMaybe<ZenhubEpicStateFilterInput>;
};

export type ZenhubEpicInput = {
  readonly body?: InputMaybe<Scalars['String']['input']>;
  readonly title: Scalars['String']['input'];
};

export type ZenhubEpicIssueProgress = {
  readonly zenhubIssueCountProgress?: Maybe<IssueCountProgress>;
  readonly zenhubIssueEstimateProgress?: Maybe<IssueEstimateProgress>;
};

/** Filter issue search results */
export type ZenhubEpicIssueSearchFiltersInput = {
  readonly workspaces?: InputMaybe<IdInput>;
};

export type ZenhubEpicOrderField =
  | 'ASSIGNEES'
  | 'CREATED_AT'
  | 'END_ON'
  | 'START_ON'
  | 'STATE'
  | 'TITLE'
  | 'UPDATED_AT';

/** Order of ZenhubEpic connection */
export type ZenhubEpicOrderInput = {
  readonly direction?: InputMaybe<OrderDirection>;
  readonly field?: InputMaybe<ZenhubEpicOrderField>;
};

/** Filter issues by special Zenhub epic filters */
export type ZenhubEpicSearchFiltersInput = {
  readonly id?: InputMaybe<IdInput>;
  readonly specialFilters?: InputMaybe<ZenhubEpicSpecialFilter>;
};

export type ZenhubEpicSpecialFilter =
  /** Show all issues not in an epic */
  | 'not_in_epic';

export type ZenhubEpicState =
  | 'CLOSED'
  | 'IN_PROGRESS'
  | 'OPEN'
  | 'TODO';

/** Filter for ZenhubEpic state */
export type ZenhubEpicStateFilterInput = {
  readonly in?: InputMaybe<ReadonlyArray<ZenhubEpicState>>;
  readonly nin?: InputMaybe<ReadonlyArray<ZenhubEpicState>>;
};

export type ZenhubIdentity = ZenhubOrganization | ZenhubUser;

export type ZenhubIssueType = BaseIssueType & Timestamps & {
  readonly __typename?: 'ZenhubIssueType';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly disposition: IssueTypeDisposition;
  readonly id: Scalars['ID']['output'];
  readonly isDefault: Scalars['Boolean']['output'];
  readonly isDefaultForLevel: Scalars['Boolean']['output'];
  readonly isEnabled: Scalars['Boolean']['output'];
  /** @deprecated Removed from Github API */
  readonly isPrivate: Scalars['Boolean']['output'];
  readonly issuesCount: Scalars['Int']['output'];
  readonly level?: Maybe<Scalars['Int']['output']>;
  readonly name: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly zenhubOrganization: ZenhubOrganization;
};

/** The connection type for ZenhubIssueType. */
export type ZenhubIssueTypeConnection = {
  readonly __typename?: 'ZenhubIssueTypeConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ZenhubIssueTypeEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ZenhubIssueType>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ZenhubIssueTypeEdge = {
  readonly __typename?: 'ZenhubIssueTypeEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ZenhubIssueType;
};

export type ZenhubLabel = Node & Timestamps & {
  readonly __typename?: 'ZenhubLabel';
  readonly color?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly description?: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['ID']['output'];
  readonly name: Scalars['String']['output'];
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly zenhubEpics: ZenhubEpicConnection;
  readonly zenhubOrganization: ZenhubOrganization;
};


export type ZenhubLabelZenhubEpicsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for ZenhubLabel. */
export type ZenhubLabelConnection = {
  readonly __typename?: 'ZenhubLabelConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ZenhubLabelEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ZenhubLabel>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ZenhubLabelEdge = {
  readonly __typename?: 'ZenhubLabelEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ZenhubLabel;
};

/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganization = Node & Timestamps & {
  readonly __typename?: 'ZenhubOrganization';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly creator?: Maybe<ZenhubUser>;
  /** Optional. Returns cache of associated Github organization */
  readonly githubOrganization?: Maybe<Organization>;
  readonly id: Scalars['ID']['output'];
  readonly issueTypeOptions: IssueTypeOptionConnection;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly projects: ProjectConnection;
  readonly roadmapItems: RoadmapItemConnection;
  /** Search and filter issues for planning panel */
  readonly searchStrategicIssues: StrategicIssueSearchItemConnection;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaces: WorkspaceConnection;
  readonly zenhubIssueTypes: ZenhubIssueTypeConnection;
  readonly zenhubLabels: ZenhubLabelConnection;
  /** @deprecated Use ZenhubOrganizationType.zenhub_users_at_organization instead */
  readonly zenhubUsers?: Maybe<ZenhubUserConnection>;
  /** Returns all Zenhub users at the organization. */
  readonly zenhubUsersAtOrganization?: Maybe<ZenhubUserAtOrganizationConnection>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationIssueTypeOptionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationProjectsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationRoadmapItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<RoadmapItemOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  state?: InputMaybe<RoadmapItemStateFilterInput>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationSearchStrategicIssuesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<StrategicIssuesFiltersInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  issueIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<StrategicIssuesOrderInput>;
  parentIssueId?: InputMaybe<Scalars['ID']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  repositoryIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  states?: InputMaybe<ReadonlyArray<IssueState>>;
  workspaceId?: InputMaybe<Scalars['ID']['input']>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<WorkspaceOrderInput>;
  query?: InputMaybe<Scalars['String']['input']>;
  workspaceIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationZenhubIssueTypesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationZenhubLabelsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationZenhubUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  emails?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<ZenhubUserOrderInput>;
  platformOnly?: InputMaybe<Scalars['Boolean']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


/** This is a root entity for Zenhub. Contains workspaces, users, and other Zenhub data. */
export type ZenhubOrganizationZenhubUsersAtOrganizationArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  emails?: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  first?: InputMaybe<Scalars['Int']['input']>;
  includeExternal?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<ZenhubUserOrderInput>;
  platformOnly?: InputMaybe<Scalars['Boolean']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Roles>;
  seatRequestPending?: InputMaybe<Scalars['Boolean']['input']>;
  seated?: InputMaybe<Scalars['Boolean']['input']>;
};

/** The connection type for ZenhubOrganization. */
export type ZenhubOrganizationConnection = {
  readonly __typename?: 'ZenhubOrganizationConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ZenhubOrganizationEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ZenhubOrganization>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ZenhubOrganizationEdge = {
  readonly __typename?: 'ZenhubOrganizationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ZenhubOrganization;
};

export type ZenhubOrganizationLimited = Node & Timestamps & {
  readonly __typename?: 'ZenhubOrganizationLimited';
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  /** ID of the object. */
  readonly id: Scalars['ID']['output'];
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type ZenhubUser = Node & Timestamps & {
  readonly __typename?: 'ZenhubUser';
  readonly contactEmail?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly estimationGroups: EstimationGroupConnection;
  readonly externalOnly: Scalars['Boolean']['output'];
  readonly githubUser?: Maybe<User>;
  readonly id: Scalars['ID']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  /** @deprecated Use ZenhubOrganizationType#zenhub_users_at_organization or viewer_at_organization instead */
  readonly role?: Maybe<Roles>;
  readonly searchWorkspaces: WorkspaceConnection;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
  readonly zenhubOrganizations: ZenhubOrganizationConnection;
};


export type ZenhubUserEstimationGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId: Scalars['ID']['input'];
};


export type ZenhubUserRoleArgs = {
  zenhubOrganizationId: Scalars['ID']['input'];
};


export type ZenhubUserSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};


export type ZenhubUserWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ZenhubUserZenhubOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};

export type ZenhubUserAtOrganization = Node & Timestamps & {
  readonly __typename?: 'ZenhubUserAtOrganization';
  readonly contactEmail?: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['ISO8601DateTime']['output'];
  readonly email?: Maybe<Scalars['String']['output']>;
  readonly estimationGroups: EstimationGroupConnection;
  readonly externalOnly: Scalars['Boolean']['output'];
  readonly githubUser?: Maybe<User>;
  readonly id: Scalars['ID']['output'];
  readonly imageUrl?: Maybe<Scalars['String']['output']>;
  readonly name?: Maybe<Scalars['String']['output']>;
  readonly role?: Maybe<Roles>;
  readonly searchWorkspaces: WorkspaceConnection;
  readonly seatRequestedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  readonly seated?: Maybe<Scalars['Boolean']['output']>;
  readonly updatedAt: Scalars['ISO8601DateTime']['output'];
  readonly workspaceFavorites: WorkspaceFavoriteConnection;
  readonly zenhubOrganizations: ZenhubOrganizationConnection;
};


export type ZenhubUserAtOrganizationEstimationGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  workspaceId: Scalars['ID']['input'];
};


export type ZenhubUserAtOrganizationSearchWorkspacesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};


export type ZenhubUserAtOrganizationWorkspaceFavoritesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ZenhubUserAtOrganizationZenhubOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};

/** The connection type for ZenhubUserAtOrganization. */
export type ZenhubUserAtOrganizationConnection = {
  readonly __typename?: 'ZenhubUserAtOrganizationConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ZenhubUserAtOrganizationEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ZenhubUserAtOrganization>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ZenhubUserAtOrganizationEdge = {
  readonly __typename?: 'ZenhubUserAtOrganizationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ZenhubUserAtOrganization;
};

/** The connection type for ZenhubUser. */
export type ZenhubUserConnection = {
  readonly __typename?: 'ZenhubUserConnection';
  /** A list of edges. */
  readonly edges: ReadonlyArray<ZenhubUserEdge>;
  /** A list of nodes. */
  readonly nodes: ReadonlyArray<ZenhubUser>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  readonly totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ZenhubUserEdge = {
  readonly __typename?: 'ZenhubUserEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  readonly node: ZenhubUser;
};

export type ZenhubUserOrderField =
  | 'DISPLAY_NAME';

/** Order of ZenhubUser connection */
export type ZenhubUserOrderInput = {
  readonly direction?: InputMaybe<OrderDirection>;
  readonly field?: InputMaybe<ZenhubUserOrderField>;
};

export type ZenhubUsersAssignedEpicsEachSprintCountComparison = {
  readonly sprintIds: ReadonlyArray<Scalars['ID']['input']>;
  readonly value: Scalars['Int']['input'];
};

export type ZenhubUsersAssignedIssuesCountComparison = {
  readonly sprintIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly value: Scalars['Int']['input'];
};

/** Filter for zenhub users search */
export type ZenhubUsersFiltersInput = {
  /** Apply assigned epics each sprint count comparison filter */
  readonly assignedEpicsEachSprintCountComparison?: InputMaybe<ZenhubUsersAssignedEpicsEachSprintCountComparison>;
  /** Apply assigned issues count comparison filter */
  readonly assignedIssuesCountComparison?: InputMaybe<ZenhubUsersAssignedIssuesCountComparison>;
  /** Include external members in the search */
  readonly includeExternalMembers?: InputMaybe<Scalars['Boolean']['input']>;
  /** Apply last assigned at comparison filter */
  readonly lastAssignedAtComparison?: InputMaybe<ZenhubUsersLastAssignedAtComparison>;
};

export type ZenhubUsersLastAssignedAtComparison = {
  readonly includeNulls?: InputMaybe<Scalars['Boolean']['input']>;
  readonly sprintIds?: InputMaybe<ReadonlyArray<Scalars['ID']['input']>>;
  readonly value: Scalars['ISO8601DateTime']['input'];
};

export type ZorgIssueMetadata = {
  readonly __typename?: 'ZorgIssueMetadata';
  readonly endOn?: Maybe<Scalars['ISO8601Date']['output']>;
  readonly startOn?: Maybe<Scalars['ISO8601Date']['output']>;
};

export type ZorgIssueMetadataInput = {
  readonly endOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly startOn?: InputMaybe<Scalars['ISO8601Date']['input']>;
  readonly zenhubOrganizationId: Scalars['ID']['input'];
};

export type CreateIssueDependencyMutationVariables = Exact<{
  input: CreateIssueDependencyInput;
}>;


export type CreateIssueDependencyMutation = { readonly __typename?: 'Mutation', readonly createIssueDependency?: { readonly __typename?: 'CreateIssueDependencyPayload', readonly issueDependency: { readonly __typename?: 'IssueDependency', readonly id: string, readonly blockingIssue: { readonly __typename?: 'Issue', readonly id: string, readonly title: string }, readonly blockedIssue: { readonly __typename?: 'Issue', readonly id: string, readonly title: string } } } | null };

export type DeleteIssueDependencyMutationVariables = Exact<{
  input: DeleteIssueDependencyInput;
}>;


export type DeleteIssueDependencyMutation = { readonly __typename?: 'Mutation', readonly deleteIssueDependency?: { readonly __typename?: 'DeleteIssueDependencyPayload', readonly issueDependency: { readonly __typename?: 'IssueDependency', readonly id: string } } | null };

export type AddIssuesToEpicsMutationVariables = Exact<{
  input: AddIssuesToEpicsInput;
}>;


export type AddIssuesToEpicsMutation = { readonly __typename?: 'Mutation', readonly addIssuesToEpics?: { readonly __typename?: 'AddIssuesToEpicsPayload', readonly epics: ReadonlyArray<{ readonly __typename?: 'Epic', readonly id: string }> } | null };

export type CreateEpicMutationVariables = Exact<{
  input: CreateEpicInput;
}>;


export type CreateEpicMutation = { readonly __typename?: 'Mutation', readonly createEpic?: { readonly __typename?: 'CreateEpicPayload', readonly epic: { readonly __typename?: 'Epic', readonly id: string, readonly issue: { readonly __typename?: 'Issue', readonly id: string, readonly title: string, readonly number: number, readonly htmlUrl: string } } } | null };

export type CreateEpicFromIssueMutationVariables = Exact<{
  input: CreateEpicFromIssueInput;
}>;


export type CreateEpicFromIssueMutation = { readonly __typename?: 'Mutation', readonly createEpicFromIssue?: { readonly __typename?: 'CreateEpicFromIssuePayload', readonly epic: { readonly __typename?: 'Epic', readonly id: string, readonly issue: { readonly __typename?: 'Issue', readonly id: string, readonly title: string, readonly number: number, readonly htmlUrl: string } } } | null };

export type CreateZenhubEpicMutationVariables = Exact<{
  input: CreateZenhubEpicInput;
}>;


export type CreateZenhubEpicMutation = { readonly __typename?: 'Mutation', readonly createZenhubEpic?: { readonly __typename?: 'CreateZenhubEpicPayload', readonly zenhubEpic: { readonly __typename?: 'ZenhubEpic', readonly id: string, readonly title: string } } | null };

export type DeleteZenhubEpicMutationVariables = Exact<{
  input: DeleteZenhubEpicInput;
}>;


export type DeleteZenhubEpicMutation = { readonly __typename?: 'Mutation', readonly deleteZenhubEpic?: { readonly __typename?: 'DeleteZenhubEpicPayload', readonly zenhubEpicId: string } | null };

export type RemoveIssuesFromEpicsMutationVariables = Exact<{
  input: RemoveIssuesFromEpicsInput;
}>;


export type RemoveIssuesFromEpicsMutation = { readonly __typename?: 'Mutation', readonly removeIssuesFromEpics?: { readonly __typename?: 'RemoveIssuesFromEpicsPayload', readonly epics: ReadonlyArray<{ readonly __typename?: 'Epic', readonly id: string }> } | null };

export type UpdateZenhubEpicMutationVariables = Exact<{
  input: UpdateZenhubEpicInput;
}>;


export type UpdateZenhubEpicMutation = { readonly __typename?: 'Mutation', readonly updateZenhubEpic?: { readonly __typename?: 'UpdateZenhubEpicPayload', readonly zenhubEpic: { readonly __typename?: 'ZenhubEpic', readonly id: string, readonly title: string } } | null };

export type UpdateZenhubEpicDatesMutationVariables = Exact<{
  input: UpdateZenhubEpicDatesInput;
}>;


export type UpdateZenhubEpicDatesMutation = { readonly __typename?: 'Mutation', readonly updateZenhubEpicDates?: { readonly __typename?: 'UpdateZenhubEpicDatesPayload', readonly zenhubEpic: { readonly __typename?: 'ZenhubEpic', readonly id: string, readonly startOn?: string | null, readonly endOn?: string | null } } | null };

export type AddAssigneesToIssuesMutationVariables = Exact<{
  input: AddAssigneesToIssuesInput;
}>;


export type AddAssigneesToIssuesMutation = { readonly __typename?: 'Mutation', readonly addAssigneesToIssues?: { readonly __typename?: 'AddAssigneesToIssuesPayload', readonly successCount: number } | null };

export type AddLabelsToIssuesMutationVariables = Exact<{
  input: AddLabelsToIssuesInput;
}>;


export type AddLabelsToIssuesMutation = { readonly __typename?: 'Mutation', readonly addLabelsToIssues?: { readonly __typename?: 'AddLabelsToIssuesPayload', readonly successCount: number } | null };

export type CreateIssueMutationVariables = Exact<{
  input: CreateIssueInput;
}>;


export type CreateIssueMutation = { readonly __typename?: 'Mutation', readonly createIssue?: { readonly __typename?: 'CreateIssuePayload', readonly issue: { readonly __typename?: 'Issue', readonly id: string, readonly title: string, readonly number: number, readonly htmlUrl: string, readonly state: IssueState } } | null };

export type RemoveAssigneesFromIssuesMutationVariables = Exact<{
  input: RemoveAssigneesFromIssuesInput;
}>;


export type RemoveAssigneesFromIssuesMutation = { readonly __typename?: 'Mutation', readonly removeAssigneesFromIssues?: { readonly __typename?: 'RemoveAssigneesFromIssuesPayload', readonly successCount: number } | null };

export type RemoveLabelsFromIssuesMutationVariables = Exact<{
  input: RemoveLabelsFromIssuesInput;
}>;


export type RemoveLabelsFromIssuesMutation = { readonly __typename?: 'Mutation', readonly removeLabelsFromIssues?: { readonly __typename?: 'RemoveLabelsFromIssuesPayload', readonly successCount: number } | null };

export type UpdateIssueMutationVariables = Exact<{
  input: UpdateIssueInput;
}>;


export type UpdateIssueMutation = { readonly __typename?: 'Mutation', readonly updateIssue?: { readonly __typename?: 'UpdateIssuePayload', readonly issue: { readonly __typename?: 'Issue', readonly id: string, readonly title: string, readonly body?: string | null } } | null };

export type CloseIssuesMutationVariables = Exact<{
  input: CloseIssuesInput;
}>;


export type CloseIssuesMutation = { readonly __typename?: 'Mutation', readonly closeIssues?: { readonly __typename?: 'CloseIssuesPayload', readonly successCount: number } | null };

export type MoveIssueMutationVariables = Exact<{
  input: MoveIssueInput;
}>;


export type MoveIssueMutation = { readonly __typename?: 'Mutation', readonly moveIssue?: { readonly __typename?: 'MoveIssuePayload', readonly issue: { readonly __typename?: 'Issue', readonly id: string } } | null };

export type ReopenIssuesMutationVariables = Exact<{
  input: ReopenIssuesInput;
}>;


export type ReopenIssuesMutation = { readonly __typename?: 'Mutation', readonly reopenIssues?: { readonly __typename?: 'ReopenIssuesPayload', readonly successCount: number } | null };

export type SetEstimateMutationVariables = Exact<{
  input: SetEstimateInput;
}>;


export type SetEstimateMutation = { readonly __typename?: 'Mutation', readonly setEstimate?: { readonly __typename?: 'SetEstimatePayload', readonly clientMutationId?: string | null } | null };

export type CreateGithubLabelMutationVariables = Exact<{
  input: CreateGithubLabelInput;
}>;


export type CreateGithubLabelMutation = { readonly __typename?: 'Mutation', readonly createGithubLabel?: { readonly __typename?: 'CreateGithubLabelPayload', readonly label: { readonly __typename?: 'Label', readonly id: string, readonly name: string, readonly color?: string | null, readonly description?: string | null } } | null };

export type CreateZenhubLabelMutationVariables = Exact<{
  input: CreateZenhubLabelInput;
}>;


export type CreateZenhubLabelMutation = { readonly __typename?: 'Mutation', readonly createZenhubLabel?: { readonly __typename?: 'CreateZenhubLabelPayload', readonly zenhubLabel: { readonly __typename?: 'ZenhubLabel', readonly id: string, readonly name: string, readonly color?: string | null, readonly description?: string | null } } | null };

export type DeleteZenhubLabelsMutationVariables = Exact<{
  input: DeleteZenhubLabelsInput;
}>;


export type DeleteZenhubLabelsMutation = { readonly __typename?: 'Mutation', readonly deleteZenhubLabels?: { readonly __typename?: 'DeleteZenhubLabelsPayload', readonly zenhubLabels: ReadonlyArray<{ readonly __typename?: 'ZenhubLabel', readonly id: string }> } | null };

export type GetRepositoryLabelsQueryVariables = Exact<{
  repositoryGhId: Scalars['Int']['input'];
}>;


export type GetRepositoryLabelsQuery = { readonly __typename?: 'Query', readonly repositoriesByGhId: ReadonlyArray<{ readonly __typename?: 'Repository', readonly id: string, readonly name: string, readonly labels: { readonly __typename?: 'LabelConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Label', readonly id: string, readonly name: string, readonly color?: string | null, readonly description?: string | null }> } }> };

export type GetWorkspaceLabelsQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type GetWorkspaceLabelsQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly zenhubLabels?: { readonly __typename?: 'ZenhubLabelConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubLabel', readonly id: string, readonly name: string, readonly color?: string | null, readonly description?: string | null }> } | null } | null };

export type AddMilestoneToIssuesMutationVariables = Exact<{
  input: AddMilestoneForIssuesInput;
}>;


export type AddMilestoneToIssuesMutation = { readonly __typename?: 'Mutation', readonly addMilestoneToIssues?: { readonly __typename?: 'AddMilestoneForIssuesPayload', readonly successCount: number } | null };

export type CreateMilestoneMutationVariables = Exact<{
  input: CreateMilestoneInput;
}>;


export type CreateMilestoneMutation = { readonly __typename?: 'Mutation', readonly createMilestone?: { readonly __typename?: 'CreateMilestonePayload', readonly milestone: { readonly __typename?: 'Milestone', readonly id: string, readonly title: string, readonly description?: string | null, readonly dueOn?: string | null } } | null };

export type DeleteMilestoneMutationVariables = Exact<{
  input: DeleteMilestoneInput;
}>;


export type DeleteMilestoneMutation = { readonly __typename?: 'Mutation', readonly deleteMilestone?: { readonly __typename?: 'DeleteMilestonePayload', readonly milestone: { readonly __typename?: 'Milestone', readonly id: string } } | null };

export type RemoveMilestoneToIssuesMutationVariables = Exact<{
  input: RemoveMilestoneForIssuesInput;
}>;


export type RemoveMilestoneToIssuesMutation = { readonly __typename?: 'Mutation', readonly removeMilestoneToIssues?: { readonly __typename?: 'RemoveMilestoneForIssuesPayload', readonly successCount: number } | null };

export type UpdateMilestoneMutationVariables = Exact<{
  input: UpdateMilestoneInput;
}>;


export type UpdateMilestoneMutation = { readonly __typename?: 'Mutation', readonly updateMilestone?: { readonly __typename?: 'UpdateMilestonePayload', readonly milestone: { readonly __typename?: 'Milestone', readonly id: string, readonly title: string, readonly description?: string | null, readonly dueOn?: string | null } } | null };

export type CreatePipelineMutationVariables = Exact<{
  input: CreatePipelineInput;
}>;


export type CreatePipelineMutation = { readonly __typename?: 'Mutation', readonly createPipeline?: { readonly __typename?: 'CreatePipelinePayload', readonly pipeline: { readonly __typename?: 'Pipeline', readonly id: string, readonly name: string, readonly description?: string | null } } | null };

export type DeletePipelineMutationVariables = Exact<{
  input: DeletePipelineInput;
}>;


export type DeletePipelineMutation = { readonly __typename?: 'Mutation', readonly deletePipeline?: { readonly __typename?: 'DeletePipelinePayload', readonly clientMutationId?: string | null } | null };

export type UpdatePipelineMutationVariables = Exact<{
  input: UpdatePipelineInput;
}>;


export type UpdatePipelineMutation = { readonly __typename?: 'Mutation', readonly updatePipeline?: { readonly __typename?: 'UpdatePipelinePayload', readonly pipeline: { readonly __typename?: 'Pipeline', readonly id: string, readonly name: string, readonly description?: string | null } } | null };

export type GetWorkspacePipelinesQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type GetWorkspacePipelinesQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly pipelinesConnection: { readonly __typename?: 'PipelineConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Pipeline', readonly id: string, readonly name: string, readonly description?: string | null, readonly issues: { readonly __typename?: 'IssueConnection', readonly totalCount: number } }> } } | null };

export type GetRepositoriesByGhIdsQueryVariables = Exact<{
  ghIds: ReadonlyArray<Scalars['Int']['input']> | Scalars['Int']['input'];
}>;


export type GetRepositoriesByGhIdsQuery = { readonly __typename?: 'Query', readonly repositoriesByGhId: ReadonlyArray<{ readonly __typename?: 'Repository', readonly id: string, readonly ghId: number, readonly name: string, readonly description?: string | null, readonly ownerName: string, readonly createdAt: string, readonly updatedAt: string, readonly workspacesConnection: { readonly __typename?: 'WorkspaceConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null }> } }> };

export type IssueByInfoQueryVariables = Exact<{
  repositoryGhId: Scalars['Int']['input'];
  issueNumber: Scalars['Int']['input'];
}>;


export type IssueByInfoQuery = { readonly __typename?: 'Query', readonly issueByInfo: { readonly __typename?: 'Issue', readonly id: string, readonly title: string, readonly number: number, readonly state: IssueState, readonly htmlUrl: string, readonly labels: { readonly __typename?: 'LabelConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Label', readonly name: string }> }, readonly parentIssue?: { readonly __typename: 'Issue', readonly type: IssueType, readonly id: string, readonly title: string, readonly number: number, readonly parentIssue?: { readonly __typename?: 'Issue', readonly id: string, readonly number: number, readonly title: string } | null } | null, readonly assignees: { readonly __typename?: 'UserConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'User', readonly login: string }> }, readonly milestone?: { readonly __typename?: 'Milestone', readonly title: string } | null } };

export type SearchIssuesQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
  user: Scalars['String']['input'];
  repoIds: ReadonlyArray<Scalars['ID']['input']> | Scalars['ID']['input'];
  pipelineIds: ReadonlyArray<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type SearchIssuesQuery = { readonly __typename?: 'Query', readonly searchIssues?: { readonly __typename?: 'IssueConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Issue', readonly id: string, readonly state: IssueState, readonly body?: string | null, readonly closedAt?: string | null, readonly htmlUrl: string, readonly labels: { readonly __typename?: 'LabelConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Label', readonly id: string, readonly name: string }> }, readonly parentIssue?: { readonly __typename: 'Issue', readonly type: IssueType, readonly id: string, readonly title: string, readonly number: number, readonly parentIssue?: { readonly __typename?: 'Issue', readonly id: string, readonly number: number, readonly title: string } | null } | null, readonly creator?: { readonly __typename?: 'ZenhubUser', readonly id: string, readonly name?: string | null, readonly githubUser?: { readonly __typename?: 'User', readonly login: string } | null } | null, readonly estimate?: { readonly __typename?: 'Estimate', readonly value: number } | null, readonly assignees: { readonly __typename?: 'UserConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'User', readonly id: string, readonly login: string }> } }> } | null };

export type SearchIssuesByPipelineQueryVariables = Exact<{
  pipelineId: Scalars['ID']['input'];
  query?: InputMaybe<Scalars['String']['input']>;
  filters: IssueSearchFiltersInput;
}>;


export type SearchIssuesByPipelineQuery = { readonly __typename?: 'Query', readonly searchIssuesByPipeline?: { readonly __typename?: 'IssueConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Issue', readonly id: string, readonly title: string, readonly number: number }> } | null };

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = { readonly __typename?: 'Query', readonly viewer: { readonly __typename?: 'ZenhubUser', readonly id: string, readonly name?: string | null, readonly email?: string | null, readonly imageUrl?: string | null, readonly githubUser?: { readonly __typename?: 'User', readonly login: string, readonly avatarUrl: string } | null } };

export type WorkspaceIssuesQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type WorkspaceIssuesQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly issues?: { readonly __typename?: 'IssueConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Issue', readonly id: string, readonly pullRequest: boolean, readonly type: IssueType, readonly title: string, readonly number: number, readonly state: IssueState, readonly assignees: { readonly __typename?: 'UserConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'User', readonly name?: string | null, readonly id: string, readonly ghId?: number | null, readonly login: string }> }, readonly parentZenhubEpics: { readonly __typename?: 'ZenhubEpicConnection', readonly totalCount: number }, readonly repository: { readonly __typename?: 'Repository', readonly name: string, readonly ownerName: string } }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly endCursor?: string | null } } | null } | null };

export type AddRepositoryToWorkspaceMutationVariables = Exact<{
  input: AddRepositoryToWorkspaceInput;
}>;


export type AddRepositoryToWorkspaceMutation = { readonly __typename?: 'Mutation', readonly addRepositoryToWorkspace?: { readonly __typename?: 'AddRepositoryToWorkspacePayload', readonly workspaceRepository: { readonly __typename?: 'WorkspaceRepository', readonly id: string, readonly repository: { readonly __typename?: 'Repository', readonly id: string, readonly ghId: number, readonly name: string, readonly description?: string | null }, readonly workspace: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null } } } | null };

export type DisconnectWorkspaceRepositoryMutationVariables = Exact<{
  input: DisconnectWorkspaceRepositoryInput;
}>;


export type DisconnectWorkspaceRepositoryMutation = { readonly __typename?: 'Mutation', readonly disconnectWorkspaceRepository?: { readonly __typename?: 'DisconnectWorkspaceRepositoryPayload', readonly workspace: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null } } | null };

export type GetRepositoryAssignableUsersQueryVariables = Exact<{
  repositoryId: Scalars['ID']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetRepositoryAssignableUsersQuery = { readonly __typename?: 'Query', readonly node?: { readonly __typename?: 'Blockage' } | { readonly __typename?: 'Comment' } | { readonly __typename?: 'Epic' } | { readonly __typename?: 'Issue' } | { readonly __typename?: 'IssueDependency' } | { readonly __typename?: 'KeyDate' } | { readonly __typename?: 'Milestone' } | { readonly __typename?: 'Pipeline' } | { readonly __typename?: 'PipelineToPipelineAutomation' } | { readonly __typename?: 'Project' } | { readonly __typename?: 'Release' } | { readonly __typename?: 'Repository', readonly id: string, readonly name: string, readonly assignableUsers: { readonly __typename?: 'UserConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'User', readonly id: string, readonly login: string, readonly name?: string | null, readonly zenhubUser?: { readonly __typename?: 'ZenhubUser', readonly imageUrl?: string | null, readonly githubUser?: { readonly __typename?: 'User', readonly login: string, readonly avatarUrl: string } | null } | null }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly endCursor?: string | null } } } | { readonly __typename?: 'Roadmap' } | { readonly __typename?: 'SavedView' } | { readonly __typename?: 'Sprint' } | { readonly __typename?: 'SprintConfig' } | { readonly __typename?: 'SprintIssue' } | { readonly __typename?: 'SprintReview' } | { readonly __typename?: 'SprintReviewFeature' } | { readonly __typename?: 'SprintReviewSchedule' } | { readonly __typename?: 'ZenhubEpic' } | { readonly __typename?: 'ZenhubLabel' } | { readonly __typename?: 'ZenhubOrganization' } | { readonly __typename?: 'ZenhubOrganizationLimited' } | { readonly __typename?: 'ZenhubUser' } | { readonly __typename?: 'ZenhubUserAtOrganization' } | null };

export type GetRepositoryDetailsQueryVariables = Exact<{
  repositoryId: Scalars['ID']['input'];
}>;


export type GetRepositoryDetailsQuery = { readonly __typename?: 'Query', readonly node?: { readonly __typename?: 'Blockage' } | { readonly __typename?: 'Comment' } | { readonly __typename?: 'Epic' } | { readonly __typename?: 'Issue' } | { readonly __typename?: 'IssueDependency' } | { readonly __typename?: 'KeyDate' } | { readonly __typename?: 'Milestone' } | { readonly __typename?: 'Pipeline' } | { readonly __typename?: 'PipelineToPipelineAutomation' } | { readonly __typename?: 'Project' } | { readonly __typename?: 'Release' } | { readonly __typename?: 'Repository', readonly id: string, readonly ghId: number, readonly name: string, readonly description?: string | null, readonly ownerName: string, readonly createdAt: string, readonly updatedAt: string, readonly workspacesConnection: { readonly __typename?: 'WorkspaceConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null }> }, readonly issues: { readonly __typename?: 'IssueConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'Issue', readonly id: string, readonly number: number, readonly title: string, readonly state: IssueState }> }, readonly milestones: { readonly __typename?: 'MilestoneConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'Milestone', readonly id: string, readonly title: string, readonly state: MilestoneState }> }, readonly labels: { readonly __typename?: 'LabelConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'Label', readonly id: string, readonly name: string, readonly color?: string | null }> } } | { readonly __typename?: 'Roadmap' } | { readonly __typename?: 'SavedView' } | { readonly __typename?: 'Sprint' } | { readonly __typename?: 'SprintConfig' } | { readonly __typename?: 'SprintIssue' } | { readonly __typename?: 'SprintReview' } | { readonly __typename?: 'SprintReviewFeature' } | { readonly __typename?: 'SprintReviewSchedule' } | { readonly __typename?: 'ZenhubEpic' } | { readonly __typename?: 'ZenhubLabel' } | { readonly __typename?: 'ZenhubOrganization' } | { readonly __typename?: 'ZenhubOrganizationLimited' } | { readonly __typename?: 'ZenhubUser' } | { readonly __typename?: 'ZenhubUserAtOrganization' } | null };

export type GetWorkspaceRepositoriesQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type GetWorkspaceRepositoriesQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null, readonly repositoriesConnection?: { readonly __typename?: 'RepositoryConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Repository', readonly id: string, readonly ghId: number, readonly createdAt: string, readonly name: string, readonly description?: string | null }> } | null } | null };

export type AddIssuesToSprintsMutationVariables = Exact<{
  input: AddIssuesToSprintsInput;
}>;


export type AddIssuesToSprintsMutation = { readonly __typename?: 'Mutation', readonly addIssuesToSprints?: { readonly __typename?: 'AddIssuesToSprintsPayload', readonly sprintIssues: ReadonlyArray<{ readonly __typename?: 'SprintIssue', readonly id: string }> } | null };

export type CreateSprintConfigMutationVariables = Exact<{
  input: CreateSprintConfigInput;
}>;


export type CreateSprintConfigMutation = { readonly __typename?: 'Mutation', readonly createSprintConfig?: { readonly __typename?: 'CreateSprintConfigPayload', readonly sprintConfig: { readonly __typename?: 'SprintConfig', readonly id: string, readonly name: string } } | null };

export type DeleteSprintConfigAndOpenSprintsMutationVariables = Exact<{
  input: DeleteSprintConfigAndOpenSprintsInput;
}>;


export type DeleteSprintConfigAndOpenSprintsMutation = { readonly __typename?: 'Mutation', readonly deleteSprintConfigAndOpenSprints?: { readonly __typename?: 'DeleteSprintConfigAndOpenSprintsPayload', readonly workspace: { readonly __typename?: 'Workspace', readonly id: string } } | null };

export type RemoveIssuesFromSprintsMutationVariables = Exact<{
  input: RemoveIssuesFromSprintsInput;
}>;


export type RemoveIssuesFromSprintsMutation = { readonly __typename?: 'Mutation', readonly removeIssuesFromSprints?: { readonly __typename?: 'RemoveIssuesFromSprintsPayload', readonly sprints: ReadonlyArray<{ readonly __typename?: 'Sprint', readonly id: string }> } | null };

export type UpdateSprintMutationVariables = Exact<{
  input: UpdateSprintInput;
}>;


export type UpdateSprintMutation = { readonly __typename?: 'Mutation', readonly updateSprint?: { readonly __typename?: 'UpdateSprintPayload', readonly sprint: { readonly __typename?: 'Sprint', readonly id: string, readonly name?: string | null, readonly startAt: string, readonly endAt: string, readonly state: SprintState } } | null };

export type GetWorkspaceSprintsQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type GetWorkspaceSprintsQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly sprints: { readonly __typename?: 'SprintConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Sprint', readonly id: string, readonly name?: string | null, readonly startAt: string, readonly endAt: string, readonly state: SprintState, readonly issues: { readonly __typename?: 'IssueConnection', readonly totalCount: number } }> } } | null };

export type GetWorkspaceUsersQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type GetWorkspaceUsersQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null, readonly assignees?: { readonly __typename?: 'UserConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'User', readonly id: string, readonly ghId?: number | null, readonly login: string, readonly name?: string | null, readonly zenhubUser?: { readonly __typename?: 'ZenhubUser', readonly email?: string | null } | null }> } | null } | null };

export type OwnerByGhIdQueryVariables = Exact<{
  ghId: Scalars['Int']['input'];
}>;


export type OwnerByGhIdQuery = { readonly __typename?: 'Query', readonly ownerByGhId?: { readonly __typename?: 'Bot', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'Mannequin', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'NoOwner', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'Organization', readonly login: string, readonly id: string, readonly avatarUrl: string } | { readonly __typename?: 'User', readonly name?: string | null, readonly id: string, readonly login: string, readonly avatarUrl: string } | null };

export type OwnerByLoginQueryVariables = Exact<{
  login: Scalars['String']['input'];
}>;


export type OwnerByLoginQuery = { readonly __typename?: 'Query', readonly ownerByLogin?: { readonly __typename?: 'Bot', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'Mannequin', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'NoOwner', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'Organization', readonly login: string, readonly id: string, readonly avatarUrl: string } | { readonly __typename?: 'User', readonly name?: string | null, readonly id: string, readonly login: string, readonly avatarUrl: string } | null };

export type SearchOwnerByLoginQueryVariables = Exact<{
  login: Scalars['String']['input'];
}>;


export type SearchOwnerByLoginQuery = { readonly __typename?: 'Query', readonly ownerByLogin?: { readonly __typename?: 'Bot', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'Mannequin', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'NoOwner', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'Organization', readonly id: string, readonly login: string, readonly avatarUrl: string } | { readonly __typename?: 'User', readonly name?: string | null, readonly id: string, readonly login: string, readonly avatarUrl: string } | null };

export type SearchWorkspaceUsersQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type SearchWorkspaceUsersQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly zenhubUsers: { readonly __typename?: 'ZenhubUserConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubUser', readonly id: string, readonly name?: string | null, readonly email?: string | null }> } } | null };

export type CreateWorkspaceMutationVariables = Exact<{
  input: CreateWorkspaceInput;
}>;


export type CreateWorkspaceMutation = { readonly __typename?: 'Mutation', readonly createWorkspace?: { readonly __typename?: 'CreateWorkspacePayload', readonly workspace: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null } } | null };

export type GetOrganizationWorkspacesQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetOrganizationWorkspacesQuery = { readonly __typename?: 'Query', readonly viewer: { readonly __typename?: 'ZenhubUser', readonly zenhubOrganizations: { readonly __typename?: 'ZenhubOrganizationConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubOrganization', readonly id: string, readonly name?: string | null, readonly workspaces: { readonly __typename?: 'WorkspaceConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null, readonly pipelinesConnection: { readonly __typename?: 'PipelineConnection', readonly totalCount: number }, readonly repositoriesConnection?: { readonly __typename?: 'RepositoryConnection', readonly totalCount: number } | null }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly endCursor?: string | null } } }> } } };

export type GetUserOrganizationsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetUserOrganizationsQuery = { readonly __typename?: 'Query', readonly viewer: { readonly __typename?: 'ZenhubUser', readonly zenhubOrganizations: { readonly __typename?: 'ZenhubOrganizationConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubOrganization', readonly id: string, readonly name?: string | null, readonly workspaces: { readonly __typename?: 'WorkspaceConnection', readonly totalCount: number } }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly endCursor?: string | null } } } };

export type GetUserWorkspacesFromOrgsQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetUserWorkspacesFromOrgsQuery = { readonly __typename?: 'Query', readonly viewer: { readonly __typename?: 'ZenhubUser', readonly zenhubOrganizations: { readonly __typename?: 'ZenhubOrganizationConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubOrganization', readonly id: string, readonly name?: string | null, readonly workspaces: { readonly __typename?: 'WorkspaceConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null, readonly pipelinesConnection: { readonly __typename?: 'PipelineConnection', readonly totalCount: number }, readonly repositoriesConnection?: { readonly __typename?: 'RepositoryConnection', readonly totalCount: number } | null }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly endCursor?: string | null } } }> } } };

export type GetWorkspaceOverviewQueryVariables = Exact<{
  workspaceId: Scalars['ID']['input'];
}>;


export type GetWorkspaceOverviewQuery = { readonly __typename?: 'Query', readonly workspace?: { readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null, readonly issueLabelOptions?: { readonly __typename?: 'IssueLabelOptionConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'IssueLabelOption', readonly name: string }> } | null, readonly pipelinesConnection: { readonly __typename?: 'PipelineConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'Pipeline', readonly id: string, readonly name: string, readonly description?: string | null, readonly issues: { readonly __typename?: 'IssueConnection', readonly totalCount: number, readonly pipelineCounts: { readonly __typename?: 'PipelineCounts', readonly issuesCount: number, readonly sumEstimates: number } } }> }, readonly repositoriesConnection?: { readonly __typename?: 'RepositoryConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'Repository', readonly id: string, readonly name: string, readonly description?: string | null, readonly ownerName: string, readonly ghId: number, readonly issues: { readonly __typename?: 'IssueConnection', readonly totalCount: number, readonly pipelineCounts: { readonly __typename?: 'PipelineCounts', readonly issuesCount: number, readonly sumEstimates: number } } }> } | null, readonly defaultRepository?: { readonly __typename?: 'Repository', readonly id: string, readonly ghId: number, readonly name: string, readonly githubIssueTypes: { readonly __typename?: 'GithubIssueTypeConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'GithubIssueType', readonly id: string, readonly name: string, readonly description?: string | null, readonly level?: number | null }> } } | null, readonly zenhubEpics?: { readonly __typename?: 'ZenhubEpicConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubEpic', readonly id: string, readonly title: string, readonly startOn?: string | null, readonly endOn?: string | null }> } | null, readonly zenhubUsers: { readonly __typename?: 'ZenhubUserConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'ZenhubUser', readonly name?: string | null, readonly email?: string | null, readonly githubUser?: { readonly __typename?: 'User', readonly login: string, readonly avatarUrl: string, readonly name?: string | null } | null }> } } | null };

export type SearchUserWorkspacesQueryVariables = Exact<{
  query: Scalars['String']['input'];
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type SearchUserWorkspacesQuery = { readonly __typename?: 'Query', readonly viewer: { readonly __typename?: 'ZenhubUser', readonly searchWorkspaces: { readonly __typename?: 'WorkspaceConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'Workspace', readonly id: string, readonly name?: string | null, readonly description?: string | null, readonly pipelinesConnection: { readonly __typename?: 'PipelineConnection', readonly totalCount: number }, readonly repositoriesConnection?: { readonly __typename?: 'RepositoryConnection', readonly totalCount: number } | null }>, readonly pageInfo: { readonly __typename?: 'PageInfo', readonly hasNextPage: boolean, readonly endCursor?: string | null } } } };


export const CreateIssueDependencyDocument = gql`
    mutation createIssueDependency($input: CreateIssueDependencyInput!) {
  createIssueDependency(input: $input) {
    issueDependency {
      id
      blockingIssue {
        id
        title
      }
      blockedIssue {
        id
        title
      }
    }
  }
}
    `;
export const DeleteIssueDependencyDocument = gql`
    mutation deleteIssueDependency($input: DeleteIssueDependencyInput!) {
  deleteIssueDependency(input: $input) {
    issueDependency {
      id
    }
  }
}
    `;
export const AddIssuesToEpicsDocument = gql`
    mutation addIssuesToEpics($input: AddIssuesToEpicsInput!) {
  addIssuesToEpics(input: $input) {
    epics {
      id
    }
  }
}
    `;
export const CreateEpicDocument = gql`
    mutation createEpic($input: CreateEpicInput!) {
  createEpic(input: $input) {
    epic {
      id
      issue {
        id
        title
        number
        htmlUrl
      }
    }
  }
}
    `;
export const CreateEpicFromIssueDocument = gql`
    mutation createEpicFromIssue($input: CreateEpicFromIssueInput!) {
  createEpicFromIssue(input: $input) {
    epic {
      id
      issue {
        id
        title
        number
        htmlUrl
      }
    }
  }
}
    `;
export const CreateZenhubEpicDocument = gql`
    mutation createZenhubEpic($input: CreateZenhubEpicInput!) {
  createZenhubEpic(input: $input) {
    zenhubEpic {
      id
      title
    }
  }
}
    `;
export const DeleteZenhubEpicDocument = gql`
    mutation deleteZenhubEpic($input: DeleteZenhubEpicInput!) {
  deleteZenhubEpic(input: $input) {
    zenhubEpicId
  }
}
    `;
export const RemoveIssuesFromEpicsDocument = gql`
    mutation removeIssuesFromEpics($input: RemoveIssuesFromEpicsInput!) {
  removeIssuesFromEpics(input: $input) {
    epics {
      id
    }
  }
}
    `;
export const UpdateZenhubEpicDocument = gql`
    mutation updateZenhubEpic($input: UpdateZenhubEpicInput!) {
  updateZenhubEpic(input: $input) {
    zenhubEpic {
      id
      title
    }
  }
}
    `;
export const UpdateZenhubEpicDatesDocument = gql`
    mutation updateZenhubEpicDates($input: UpdateZenhubEpicDatesInput!) {
  updateZenhubEpicDates(input: $input) {
    zenhubEpic {
      id
      startOn
      endOn
    }
  }
}
    `;
export const AddAssigneesToIssuesDocument = gql`
    mutation addAssigneesToIssues($input: AddAssigneesToIssuesInput!) {
  addAssigneesToIssues(input: $input) {
    successCount
  }
}
    `;
export const AddLabelsToIssuesDocument = gql`
    mutation addLabelsToIssues($input: AddLabelsToIssuesInput!) {
  addLabelsToIssues(input: $input) {
    successCount
  }
}
    `;
export const CreateIssueDocument = gql`
    mutation createIssue($input: CreateIssueInput!) {
  createIssue(input: $input) {
    issue {
      id
      title
      number
      htmlUrl
      state
    }
  }
}
    `;
export const RemoveAssigneesFromIssuesDocument = gql`
    mutation removeAssigneesFromIssues($input: RemoveAssigneesFromIssuesInput!) {
  removeAssigneesFromIssues(input: $input) {
    successCount
  }
}
    `;
export const RemoveLabelsFromIssuesDocument = gql`
    mutation removeLabelsFromIssues($input: RemoveLabelsFromIssuesInput!) {
  removeLabelsFromIssues(input: $input) {
    successCount
  }
}
    `;
export const UpdateIssueDocument = gql`
    mutation updateIssue($input: UpdateIssueInput!) {
  updateIssue(input: $input) {
    issue {
      id
      title
      body
    }
  }
}
    `;
export const CloseIssuesDocument = gql`
    mutation closeIssues($input: CloseIssuesInput!) {
  closeIssues(input: $input) {
    successCount
  }
}
    `;
export const MoveIssueDocument = gql`
    mutation moveIssue($input: MoveIssueInput!) {
  moveIssue(input: $input) {
    issue {
      id
    }
  }
}
    `;
export const ReopenIssuesDocument = gql`
    mutation reopenIssues($input: ReopenIssuesInput!) {
  reopenIssues(input: $input) {
    successCount
  }
}
    `;
export const SetEstimateDocument = gql`
    mutation setEstimate($input: SetEstimateInput!) {
  setEstimate(input: $input) {
    clientMutationId
  }
}
    `;
export const CreateGithubLabelDocument = gql`
    mutation createGithubLabel($input: CreateGithubLabelInput!) {
  createGithubLabel(input: $input) {
    label {
      id
      name
      color
      description
    }
  }
}
    `;
export const CreateZenhubLabelDocument = gql`
    mutation createZenhubLabel($input: CreateZenhubLabelInput!) {
  createZenhubLabel(input: $input) {
    zenhubLabel {
      id
      name
      color
      description
    }
  }
}
    `;
export const DeleteZenhubLabelsDocument = gql`
    mutation deleteZenhubLabels($input: DeleteZenhubLabelsInput!) {
  deleteZenhubLabels(input: $input) {
    zenhubLabels {
      id
    }
  }
}
    `;
export const GetRepositoryLabelsDocument = gql`
    query getRepositoryLabels($repositoryGhId: Int!) {
  repositoriesByGhId(ghIds: [$repositoryGhId]) {
    id
    name
    labels {
      nodes {
        id
        name
        color
        description
      }
    }
  }
}
    `;
export const GetWorkspaceLabelsDocument = gql`
    query getWorkspaceLabels($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    id
    name
    zenhubLabels {
      nodes {
        id
        name
        color
        description
      }
    }
  }
}
    `;
export const AddMilestoneToIssuesDocument = gql`
    mutation addMilestoneToIssues($input: AddMilestoneForIssuesInput!) {
  addMilestoneToIssues(input: $input) {
    successCount
  }
}
    `;
export const CreateMilestoneDocument = gql`
    mutation createMilestone($input: CreateMilestoneInput!) {
  createMilestone(input: $input) {
    milestone {
      id
      title
      description
      dueOn
    }
  }
}
    `;
export const DeleteMilestoneDocument = gql`
    mutation deleteMilestone($input: DeleteMilestoneInput!) {
  deleteMilestone(input: $input) {
    milestone {
      id
    }
  }
}
    `;
export const RemoveMilestoneToIssuesDocument = gql`
    mutation removeMilestoneToIssues($input: RemoveMilestoneForIssuesInput!) {
  removeMilestoneToIssues(input: $input) {
    successCount
  }
}
    `;
export const UpdateMilestoneDocument = gql`
    mutation updateMilestone($input: UpdateMilestoneInput!) {
  updateMilestone(input: $input) {
    milestone {
      id
      title
      description
      dueOn
    }
  }
}
    `;
export const CreatePipelineDocument = gql`
    mutation createPipeline($input: CreatePipelineInput!) {
  createPipeline(input: $input) {
    pipeline {
      id
      name
      description
    }
  }
}
    `;
export const DeletePipelineDocument = gql`
    mutation deletePipeline($input: DeletePipelineInput!) {
  deletePipeline(input: $input) {
    clientMutationId
  }
}
    `;
export const UpdatePipelineDocument = gql`
    mutation updatePipeline($input: UpdatePipelineInput!) {
  updatePipeline(input: $input) {
    pipeline {
      id
      name
      description
    }
  }
}
    `;
export const GetWorkspacePipelinesDocument = gql`
    query getWorkspacePipelines($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    id
    name
    pipelinesConnection {
      nodes {
        id
        name
        description
        issues {
          totalCount
        }
      }
    }
  }
}
    `;
export const GetRepositoriesByGhIdsDocument = gql`
    query getRepositoriesByGhIds($ghIds: [Int!]!) {
  repositoriesByGhId(ghIds: $ghIds) {
    id
    ghId
    name
    description
    ownerName
    createdAt
    updatedAt
    workspacesConnection {
      nodes {
        id
        name
      }
    }
  }
}
    `;
export const IssueByInfoDocument = gql`
    query issueByInfo($repositoryGhId: Int!, $issueNumber: Int!) {
  issueByInfo(repositoryGhId: $repositoryGhId, issueNumber: $issueNumber) {
    id
    title
    number
    state
    htmlUrl
    labels {
      nodes {
        name
      }
    }
    parentIssue {
      __typename
      type
      id
      title
      number
      parentIssue {
        id
        number
        title
      }
    }
    assignees {
      nodes {
        login
      }
    }
    milestone {
      title
    }
  }
}
    `;
export const SearchIssuesDocument = gql`
    query searchIssues($workspaceId: ID!, $user: String!, $repoIds: [ID!]!, $pipelineIds: [ID!]!) {
  searchIssues(
    workspaceId: $workspaceId
    query: $user
    filters: {pipelineIds: $pipelineIds, repositoryIds: $repoIds}
  ) {
    nodes {
      id
      state
      body
      state
      labels {
        nodes {
          id
          name
        }
      }
      parentIssue {
        __typename
        type
        id
        title
        number
        parentIssue {
          id
          number
          title
        }
      }
      closedAt
      creator {
        id
        githubUser {
          login
        }
        name
      }
      estimate {
        value
      }
      htmlUrl
      assignees {
        nodes {
          id
          login
        }
      }
    }
  }
}
    `;
export const SearchIssuesByPipelineDocument = gql`
    query searchIssuesByPipeline($pipelineId: ID!, $query: String, $filters: IssueSearchFiltersInput!) {
  searchIssuesByPipeline(
    pipelineId: $pipelineId
    query: $query
    filters: $filters
  ) {
    nodes {
      id
      title
      number
    }
  }
}
    `;
export const ViewerDocument = gql`
    query viewer {
  viewer {
    id
    name
    email
    imageUrl
    githubUser {
      login
      avatarUrl
    }
  }
}
    `;
export const WorkspaceIssuesDocument = gql`
    query workspaceIssues($workspaceId: ID!, $after: String) {
  workspace(id: $workspaceId) {
    issues(after: $after) {
      nodes {
        id
        pullRequest
        type
        title
        number
        state
        assignees {
          nodes {
            name
            id
            ghId
            login
          }
        }
        parentZenhubEpics {
          totalCount
        }
        repository {
          name
          ownerName
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
    `;
export const AddRepositoryToWorkspaceDocument = gql`
    mutation addRepositoryToWorkspace($input: AddRepositoryToWorkspaceInput!) {
  addRepositoryToWorkspace(input: $input) {
    workspaceRepository {
      id
      repository {
        id
        ghId
        name
        description
      }
      workspace {
        id
        name
      }
    }
  }
}
    `;
export const DisconnectWorkspaceRepositoryDocument = gql`
    mutation disconnectWorkspaceRepository($input: DisconnectWorkspaceRepositoryInput!) {
  disconnectWorkspaceRepository(input: $input) {
    workspace {
      id
      name
    }
  }
}
    `;
export const GetRepositoryAssignableUsersDocument = gql`
    query getRepositoryAssignableUsers($repositoryId: ID!, $first: Int) {
  node(id: $repositoryId) {
    ... on Repository {
      id
      name
      assignableUsers(first: $first) {
        totalCount
        nodes {
          id
          login
          name
          zenhubUser {
            imageUrl
            githubUser {
              login
              avatarUrl
            }
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  }
}
    `;
export const GetRepositoryDetailsDocument = gql`
    query getRepositoryDetails($repositoryId: ID!) {
  node(id: $repositoryId) {
    ... on Repository {
      id
      ghId
      name
      description
      ownerName
      createdAt
      updatedAt
      workspacesConnection {
        nodes {
          id
          name
          description
        }
      }
      issues(first: 5) {
        totalCount
        nodes {
          id
          number
          title
          state
        }
      }
      milestones(first: 5) {
        totalCount
        nodes {
          id
          title
          state
        }
      }
      labels(first: 10) {
        totalCount
        nodes {
          id
          name
          color
        }
      }
    }
  }
}
    `;
export const GetWorkspaceRepositoriesDocument = gql`
    query getWorkspaceRepositories($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    id
    name
    description
    repositoriesConnection {
      nodes {
        id
        ghId
        createdAt
        name
        description
      }
    }
  }
}
    `;
export const AddIssuesToSprintsDocument = gql`
    mutation addIssuesToSprints($input: AddIssuesToSprintsInput!) {
  addIssuesToSprints(input: $input) {
    sprintIssues {
      id
    }
  }
}
    `;
export const CreateSprintConfigDocument = gql`
    mutation createSprintConfig($input: CreateSprintConfigInput!) {
  createSprintConfig(input: $input) {
    sprintConfig {
      id
      name
    }
  }
}
    `;
export const DeleteSprintConfigAndOpenSprintsDocument = gql`
    mutation deleteSprintConfigAndOpenSprints($input: DeleteSprintConfigAndOpenSprintsInput!) {
  deleteSprintConfigAndOpenSprints(input: $input) {
    workspace {
      id
    }
  }
}
    `;
export const RemoveIssuesFromSprintsDocument = gql`
    mutation removeIssuesFromSprints($input: RemoveIssuesFromSprintsInput!) {
  removeIssuesFromSprints(input: $input) {
    sprints {
      id
    }
  }
}
    `;
export const UpdateSprintDocument = gql`
    mutation updateSprint($input: UpdateSprintInput!) {
  updateSprint(input: $input) {
    sprint {
      id
      name
      startAt
      endAt
      state
    }
  }
}
    `;
export const GetWorkspaceSprintsDocument = gql`
    query getWorkspaceSprints($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    id
    name
    sprints {
      nodes {
        id
        name
        startAt
        endAt
        state
        issues {
          totalCount
        }
      }
    }
  }
}
    `;
export const GetWorkspaceUsersDocument = gql`
    query getWorkspaceUsers($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    id
    name
    description
    assignees {
      totalCount
      nodes {
        id
        ghId
        login
        name
        zenhubUser {
          email
        }
      }
    }
  }
}
    `;
export const OwnerByGhIdDocument = gql`
    query ownerByGhId($ghId: Int!) {
  ownerByGhId(ghId: $ghId) {
    id
    login
    avatarUrl
    ... on User {
      name
    }
    ... on Organization {
      login
    }
  }
}
    `;
export const OwnerByLoginDocument = gql`
    query ownerByLogin($login: String!) {
  ownerByLogin(login: $login) {
    id
    login
    avatarUrl
    ... on User {
      name
    }
    ... on Organization {
      login
    }
  }
}
    `;
export const SearchOwnerByLoginDocument = gql`
    query searchOwnerByLogin($login: String!) {
  ownerByLogin(login: $login) {
    id
    login
    avatarUrl
    ... on User {
      name
    }
  }
}
    `;
export const SearchWorkspaceUsersDocument = gql`
    query searchWorkspaceUsers($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    zenhubUsers {
      nodes {
        id
        name
        email
      }
    }
  }
}
    `;
export const CreateWorkspaceDocument = gql`
    mutation createWorkspace($input: CreateWorkspaceInput!) {
  createWorkspace(input: $input) {
    workspace {
      id
      name
      description
    }
  }
}
    `;
export const GetOrganizationWorkspacesDocument = gql`
    query getOrganizationWorkspaces($query: String, $first: Int) {
  viewer {
    zenhubOrganizations(query: $query, first: $first) {
      nodes {
        id
        name
        workspaces(first: $first) {
          nodes {
            id
            name
            description
            pipelinesConnection {
              totalCount
            }
            repositoriesConnection {
              totalCount
            }
          }
          pageInfo {
            hasNextPage
            endCursor
          }
        }
      }
    }
  }
}
    `;
export const GetUserOrganizationsDocument = gql`
    query getUserOrganizations($query: String, $first: Int) {
  viewer {
    zenhubOrganizations(query: $query, first: $first) {
      nodes {
        id
        name
        workspaces {
          totalCount
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
    `;
export const GetUserWorkspacesFromOrgsDocument = gql`
    query getUserWorkspacesFromOrgs($first: Int) {
  viewer {
    zenhubOrganizations(first: 10) {
      nodes {
        id
        name
        workspaces(first: $first) {
          nodes {
            id
            name
            description
            pipelinesConnection {
              totalCount
            }
            repositoriesConnection {
              totalCount
            }
          }
          pageInfo {
            hasNextPage
            endCursor
          }
        }
      }
    }
  }
}
    `;
export const GetWorkspaceOverviewDocument = gql`
    query getWorkspaceOverview($workspaceId: ID!) {
  workspace(id: $workspaceId) {
    id
    name
    description
    issueLabelOptions {
      nodes {
        name
      }
    }
    pipelinesConnection {
      totalCount
      nodes {
        id
        name
        description
        issues {
          totalCount
          pipelineCounts {
            issuesCount
            sumEstimates
          }
        }
      }
    }
    repositoriesConnection {
      totalCount
      nodes {
        id
        name
        description
        ownerName
        issues {
          totalCount
          pipelineCounts {
            issuesCount
            sumEstimates
          }
        }
        ghId
      }
    }
    defaultRepository {
      id
      ghId
      name
      githubIssueTypes {
        nodes {
          id
          name
          description
          level
        }
      }
    }
    zenhubEpics(first: 20) {
      totalCount
      nodes {
        id
        title
        startOn
        endOn
      }
    }
    zenhubUsers {
      totalCount
      nodes {
        githubUser {
          login
          avatarUrl
          name
        }
        name
        email
      }
    }
  }
}
    `;
export const SearchUserWorkspacesDocument = gql`
    query searchUserWorkspaces($query: String!, $first: Int) {
  viewer {
    searchWorkspaces(query: $query, first: $first) {
      nodes {
        id
        name
        description
        pipelinesConnection {
          totalCount
        }
        repositoriesConnection {
          totalCount
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    createIssueDependency(variables: CreateIssueDependencyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateIssueDependencyMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateIssueDependencyMutation>({ document: CreateIssueDependencyDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createIssueDependency', 'mutation', variables);
    },
    deleteIssueDependency(variables: DeleteIssueDependencyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DeleteIssueDependencyMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteIssueDependencyMutation>({ document: DeleteIssueDependencyDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'deleteIssueDependency', 'mutation', variables);
    },
    addIssuesToEpics(variables: AddIssuesToEpicsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<AddIssuesToEpicsMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<AddIssuesToEpicsMutation>({ document: AddIssuesToEpicsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'addIssuesToEpics', 'mutation', variables);
    },
    createEpic(variables: CreateEpicMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateEpicMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateEpicMutation>({ document: CreateEpicDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createEpic', 'mutation', variables);
    },
    createEpicFromIssue(variables: CreateEpicFromIssueMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateEpicFromIssueMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateEpicFromIssueMutation>({ document: CreateEpicFromIssueDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createEpicFromIssue', 'mutation', variables);
    },
    createZenhubEpic(variables: CreateZenhubEpicMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateZenhubEpicMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateZenhubEpicMutation>({ document: CreateZenhubEpicDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createZenhubEpic', 'mutation', variables);
    },
    deleteZenhubEpic(variables: DeleteZenhubEpicMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DeleteZenhubEpicMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteZenhubEpicMutation>({ document: DeleteZenhubEpicDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'deleteZenhubEpic', 'mutation', variables);
    },
    removeIssuesFromEpics(variables: RemoveIssuesFromEpicsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<RemoveIssuesFromEpicsMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<RemoveIssuesFromEpicsMutation>({ document: RemoveIssuesFromEpicsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'removeIssuesFromEpics', 'mutation', variables);
    },
    updateZenhubEpic(variables: UpdateZenhubEpicMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<UpdateZenhubEpicMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateZenhubEpicMutation>({ document: UpdateZenhubEpicDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'updateZenhubEpic', 'mutation', variables);
    },
    updateZenhubEpicDates(variables: UpdateZenhubEpicDatesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<UpdateZenhubEpicDatesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateZenhubEpicDatesMutation>({ document: UpdateZenhubEpicDatesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'updateZenhubEpicDates', 'mutation', variables);
    },
    addAssigneesToIssues(variables: AddAssigneesToIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<AddAssigneesToIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<AddAssigneesToIssuesMutation>({ document: AddAssigneesToIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'addAssigneesToIssues', 'mutation', variables);
    },
    addLabelsToIssues(variables: AddLabelsToIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<AddLabelsToIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<AddLabelsToIssuesMutation>({ document: AddLabelsToIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'addLabelsToIssues', 'mutation', variables);
    },
    createIssue(variables: CreateIssueMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateIssueMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateIssueMutation>({ document: CreateIssueDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createIssue', 'mutation', variables);
    },
    removeAssigneesFromIssues(variables: RemoveAssigneesFromIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<RemoveAssigneesFromIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<RemoveAssigneesFromIssuesMutation>({ document: RemoveAssigneesFromIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'removeAssigneesFromIssues', 'mutation', variables);
    },
    removeLabelsFromIssues(variables: RemoveLabelsFromIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<RemoveLabelsFromIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<RemoveLabelsFromIssuesMutation>({ document: RemoveLabelsFromIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'removeLabelsFromIssues', 'mutation', variables);
    },
    updateIssue(variables: UpdateIssueMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<UpdateIssueMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateIssueMutation>({ document: UpdateIssueDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'updateIssue', 'mutation', variables);
    },
    closeIssues(variables: CloseIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CloseIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CloseIssuesMutation>({ document: CloseIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'closeIssues', 'mutation', variables);
    },
    moveIssue(variables: MoveIssueMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<MoveIssueMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<MoveIssueMutation>({ document: MoveIssueDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'moveIssue', 'mutation', variables);
    },
    reopenIssues(variables: ReopenIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<ReopenIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<ReopenIssuesMutation>({ document: ReopenIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'reopenIssues', 'mutation', variables);
    },
    setEstimate(variables: SetEstimateMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<SetEstimateMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<SetEstimateMutation>({ document: SetEstimateDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'setEstimate', 'mutation', variables);
    },
    createGithubLabel(variables: CreateGithubLabelMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateGithubLabelMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateGithubLabelMutation>({ document: CreateGithubLabelDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createGithubLabel', 'mutation', variables);
    },
    createZenhubLabel(variables: CreateZenhubLabelMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateZenhubLabelMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateZenhubLabelMutation>({ document: CreateZenhubLabelDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createZenhubLabel', 'mutation', variables);
    },
    deleteZenhubLabels(variables: DeleteZenhubLabelsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DeleteZenhubLabelsMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteZenhubLabelsMutation>({ document: DeleteZenhubLabelsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'deleteZenhubLabels', 'mutation', variables);
    },
    getRepositoryLabels(variables: GetRepositoryLabelsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetRepositoryLabelsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetRepositoryLabelsQuery>({ document: GetRepositoryLabelsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getRepositoryLabels', 'query', variables);
    },
    getWorkspaceLabels(variables: GetWorkspaceLabelsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetWorkspaceLabelsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkspaceLabelsQuery>({ document: GetWorkspaceLabelsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getWorkspaceLabels', 'query', variables);
    },
    addMilestoneToIssues(variables: AddMilestoneToIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<AddMilestoneToIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<AddMilestoneToIssuesMutation>({ document: AddMilestoneToIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'addMilestoneToIssues', 'mutation', variables);
    },
    createMilestone(variables: CreateMilestoneMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateMilestoneMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateMilestoneMutation>({ document: CreateMilestoneDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createMilestone', 'mutation', variables);
    },
    deleteMilestone(variables: DeleteMilestoneMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DeleteMilestoneMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteMilestoneMutation>({ document: DeleteMilestoneDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'deleteMilestone', 'mutation', variables);
    },
    removeMilestoneToIssues(variables: RemoveMilestoneToIssuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<RemoveMilestoneToIssuesMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<RemoveMilestoneToIssuesMutation>({ document: RemoveMilestoneToIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'removeMilestoneToIssues', 'mutation', variables);
    },
    updateMilestone(variables: UpdateMilestoneMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<UpdateMilestoneMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateMilestoneMutation>({ document: UpdateMilestoneDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'updateMilestone', 'mutation', variables);
    },
    createPipeline(variables: CreatePipelineMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreatePipelineMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreatePipelineMutation>({ document: CreatePipelineDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createPipeline', 'mutation', variables);
    },
    deletePipeline(variables: DeletePipelineMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DeletePipelineMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeletePipelineMutation>({ document: DeletePipelineDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'deletePipeline', 'mutation', variables);
    },
    updatePipeline(variables: UpdatePipelineMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<UpdatePipelineMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdatePipelineMutation>({ document: UpdatePipelineDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'updatePipeline', 'mutation', variables);
    },
    getWorkspacePipelines(variables: GetWorkspacePipelinesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetWorkspacePipelinesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkspacePipelinesQuery>({ document: GetWorkspacePipelinesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getWorkspacePipelines', 'query', variables);
    },
    getRepositoriesByGhIds(variables: GetRepositoriesByGhIdsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetRepositoriesByGhIdsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetRepositoriesByGhIdsQuery>({ document: GetRepositoriesByGhIdsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getRepositoriesByGhIds', 'query', variables);
    },
    issueByInfo(variables: IssueByInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<IssueByInfoQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<IssueByInfoQuery>({ document: IssueByInfoDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'issueByInfo', 'query', variables);
    },
    searchIssues(variables: SearchIssuesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<SearchIssuesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<SearchIssuesQuery>({ document: SearchIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'searchIssues', 'query', variables);
    },
    searchIssuesByPipeline(variables: SearchIssuesByPipelineQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<SearchIssuesByPipelineQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<SearchIssuesByPipelineQuery>({ document: SearchIssuesByPipelineDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'searchIssuesByPipeline', 'query', variables);
    },
    viewer(variables?: ViewerQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<ViewerQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<ViewerQuery>({ document: ViewerDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'viewer', 'query', variables);
    },
    workspaceIssues(variables: WorkspaceIssuesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<WorkspaceIssuesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<WorkspaceIssuesQuery>({ document: WorkspaceIssuesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'workspaceIssues', 'query', variables);
    },
    addRepositoryToWorkspace(variables: AddRepositoryToWorkspaceMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<AddRepositoryToWorkspaceMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<AddRepositoryToWorkspaceMutation>({ document: AddRepositoryToWorkspaceDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'addRepositoryToWorkspace', 'mutation', variables);
    },
    disconnectWorkspaceRepository(variables: DisconnectWorkspaceRepositoryMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DisconnectWorkspaceRepositoryMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DisconnectWorkspaceRepositoryMutation>({ document: DisconnectWorkspaceRepositoryDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'disconnectWorkspaceRepository', 'mutation', variables);
    },
    getRepositoryAssignableUsers(variables: GetRepositoryAssignableUsersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetRepositoryAssignableUsersQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetRepositoryAssignableUsersQuery>({ document: GetRepositoryAssignableUsersDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getRepositoryAssignableUsers', 'query', variables);
    },
    getRepositoryDetails(variables: GetRepositoryDetailsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetRepositoryDetailsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetRepositoryDetailsQuery>({ document: GetRepositoryDetailsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getRepositoryDetails', 'query', variables);
    },
    getWorkspaceRepositories(variables: GetWorkspaceRepositoriesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetWorkspaceRepositoriesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkspaceRepositoriesQuery>({ document: GetWorkspaceRepositoriesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getWorkspaceRepositories', 'query', variables);
    },
    addIssuesToSprints(variables: AddIssuesToSprintsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<AddIssuesToSprintsMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<AddIssuesToSprintsMutation>({ document: AddIssuesToSprintsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'addIssuesToSprints', 'mutation', variables);
    },
    createSprintConfig(variables: CreateSprintConfigMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateSprintConfigMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateSprintConfigMutation>({ document: CreateSprintConfigDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createSprintConfig', 'mutation', variables);
    },
    deleteSprintConfigAndOpenSprints(variables: DeleteSprintConfigAndOpenSprintsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<DeleteSprintConfigAndOpenSprintsMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<DeleteSprintConfigAndOpenSprintsMutation>({ document: DeleteSprintConfigAndOpenSprintsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'deleteSprintConfigAndOpenSprints', 'mutation', variables);
    },
    removeIssuesFromSprints(variables: RemoveIssuesFromSprintsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<RemoveIssuesFromSprintsMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<RemoveIssuesFromSprintsMutation>({ document: RemoveIssuesFromSprintsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'removeIssuesFromSprints', 'mutation', variables);
    },
    updateSprint(variables: UpdateSprintMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<UpdateSprintMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<UpdateSprintMutation>({ document: UpdateSprintDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'updateSprint', 'mutation', variables);
    },
    getWorkspaceSprints(variables: GetWorkspaceSprintsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetWorkspaceSprintsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkspaceSprintsQuery>({ document: GetWorkspaceSprintsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getWorkspaceSprints', 'query', variables);
    },
    getWorkspaceUsers(variables: GetWorkspaceUsersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetWorkspaceUsersQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkspaceUsersQuery>({ document: GetWorkspaceUsersDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getWorkspaceUsers', 'query', variables);
    },
    ownerByGhId(variables: OwnerByGhIdQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<OwnerByGhIdQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<OwnerByGhIdQuery>({ document: OwnerByGhIdDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'ownerByGhId', 'query', variables);
    },
    ownerByLogin(variables: OwnerByLoginQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<OwnerByLoginQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<OwnerByLoginQuery>({ document: OwnerByLoginDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'ownerByLogin', 'query', variables);
    },
    searchOwnerByLogin(variables: SearchOwnerByLoginQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<SearchOwnerByLoginQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<SearchOwnerByLoginQuery>({ document: SearchOwnerByLoginDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'searchOwnerByLogin', 'query', variables);
    },
    searchWorkspaceUsers(variables: SearchWorkspaceUsersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<SearchWorkspaceUsersQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<SearchWorkspaceUsersQuery>({ document: SearchWorkspaceUsersDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'searchWorkspaceUsers', 'query', variables);
    },
    createWorkspace(variables: CreateWorkspaceMutationVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<CreateWorkspaceMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<CreateWorkspaceMutation>({ document: CreateWorkspaceDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'createWorkspace', 'mutation', variables);
    },
    getOrganizationWorkspaces(variables?: GetOrganizationWorkspacesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetOrganizationWorkspacesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetOrganizationWorkspacesQuery>({ document: GetOrganizationWorkspacesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getOrganizationWorkspaces', 'query', variables);
    },
    getUserOrganizations(variables?: GetUserOrganizationsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetUserOrganizationsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetUserOrganizationsQuery>({ document: GetUserOrganizationsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getUserOrganizations', 'query', variables);
    },
    getUserWorkspacesFromOrgs(variables?: GetUserWorkspacesFromOrgsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetUserWorkspacesFromOrgsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetUserWorkspacesFromOrgsQuery>({ document: GetUserWorkspacesFromOrgsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getUserWorkspacesFromOrgs', 'query', variables);
    },
    getWorkspaceOverview(variables: GetWorkspaceOverviewQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetWorkspaceOverviewQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkspaceOverviewQuery>({ document: GetWorkspaceOverviewDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getWorkspaceOverview', 'query', variables);
    },
    searchUserWorkspaces(variables: SearchUserWorkspacesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<SearchUserWorkspacesQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<SearchUserWorkspacesQuery>({ document: SearchUserWorkspacesDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'searchUserWorkspaces', 'query', variables);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;